[
  {
    "ID": "hello-world",
    "Name": "Hello World",
    "GoCode": "// Our first program will print the classic \"hello world\"\n// message. Here's the full source code.\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Println(\"hello world\")\n}\n",
    "GoCodeHash": "3eb6e21f5f89b9a4bf64f267972a24211f0032e7",
    "URLHash": "NeviD0awXjt",
    "Segs": [
      [
        {
          "docs": "Our first program will print the classic \"hello world\"\nmessage. Here's the full source code.",
          "docs_rendered": "\u003cp\u003eOur first program will print the classic \u0026ldquo;hello world\u0026rdquo;\nmessage. Here\u0026rsquo;s the full source code.\u003c/p\u003e\n",
          "code": "\npackage main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import \"fmt\"",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import \"fmt\"\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {\n    fmt.Println(\"hello world\")\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;hello world\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n    fmt.Println(\"hello world\")\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "To run the program, put the code in `hello-world.go` and\nuse `go run`.",
          "docs_rendered": "\u003cp\u003eTo run the program, put the code in \u003ccode\u003ehello-world.go\u003c/code\u003e and\nuse \u003ccode\u003ego run\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n$ go run hello-world.go\nhello world",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run hello-world.go\n\u003cspan class=\"go\"\u003ehello world\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Sometimes we'll want to build our programs into\nbinaries. We can do this using `go build`.",
          "docs_rendered": "\u003cp\u003eSometimes we\u0026rsquo;ll want to build our programs into\nbinaries. We can do this using \u003ccode\u003ego build\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n$ go build hello-world.go\n$ ls\nhello-world    hello-world.go",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go build hello-world.go\n\u003cspan class=\"gp\"\u003e$\u003c/span\u003e ls\n\u003cspan class=\"go\"\u003ehello-world    hello-world.go\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "We can then execute the built binary directly.",
          "docs_rendered": "\u003cp\u003eWe can then execute the built binary directly.\u003c/p\u003e\n",
          "code": "\n$ ./hello-world\nhello world",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e ./hello-world\n\u003cspan class=\"go\"\u003ehello world\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Now that we can run and build basic Go programs, let's\nlearn more about the language.",
          "docs_rendered": "\u003cp\u003eNow that we can run and build basic Go programs, let\u0026rsquo;s\nlearn more about the language.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "values",
    "Name": "Values",
    "GoCode": "// Go has various value types including strings,\n// integers, floats, booleans, etc. Here are a few\n// basic examples.\n\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\n\t// Strings, which can be added together with `+`.\n\tfmt.Println(\"go\" + \"lang\")\n\n\t// Integers and floats.\n\tfmt.Println(\"1+1 =\", 1+1)\n\tfmt.Println(\"7.0/3.0 =\", 7.0/3.0)\n\n\t// Booleans, with boolean operators as you'd expect.\n\tfmt.Println(true \u0026\u0026 false)\n\tfmt.Println(true || false)\n\tfmt.Println(!true)\n}\n",
    "GoCodeHash": "476982956a689418d548148af5f17145de16f063",
    "URLHash": "YnVS3LZr8pk",
    "Segs": [
      [
        {
          "docs": "Go has various value types including strings,\nintegers, floats, booleans, etc. Here are a few\nbasic examples.",
          "docs_rendered": "\u003cp\u003eGo has various value types including strings,\nintegers, floats, booleans, etc. Here are a few\nbasic examples.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import \"fmt\"",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import \"fmt\"\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Strings, which can be added together with `+`.",
          "docs_rendered": "\u003cp\u003eStrings, which can be added together with \u003ccode\u003e+\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(\"go\" + \"lang\")",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;go\u0026quot;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;lang\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(\"go\" + \"lang\")\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Integers and floats.",
          "docs_rendered": "\u003cp\u003eIntegers and floats.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(\"1+1 =\", 1+1)\n    fmt.Println(\"7.0/3.0 =\", 7.0/3.0)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;1+1 =\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;7.0/3.0 =\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e7.0\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"mf\"\u003e3.0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(\"1+1 =\", 1+1)\n    fmt.Println(\"7.0/3.0 =\", 7.0/3.0)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Booleans, with boolean operators as you'd expect.",
          "docs_rendered": "\u003cp\u003eBooleans, with boolean operators as you\u0026rsquo;d expect.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(true \u0026\u0026 false)\n    fmt.Println(true || false)\n    fmt.Println(!true)\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(!\u003c/span\u003e\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(true \u0026\u0026 false)\n    fmt.Println(true || false)\n    fmt.Println(!true)\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "",
          "docs_rendered": "",
          "code": "$ go run values.go\ngolang\n1+1 = 2\n7.0/3.0 = 2.3333333333333335\nfalse\ntrue\nfalse",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run values.go\n\u003cspan class=\"go\"\u003egolang\u003c/span\u003e\n\u003cspan class=\"go\"\u003e1+1 = 2\u003c/span\u003e\n\u003cspan class=\"go\"\u003e7.0/3.0 = 2.3333333333333335\u003c/span\u003e\n\u003cspan class=\"go\"\u003efalse\u003c/span\u003e\n\u003cspan class=\"go\"\u003etrue\u003c/span\u003e\n\u003cspan class=\"go\"\u003efalse\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "variables",
    "Name": "Variables",
    "GoCode": "// In Go, _variables_ are explicitly declared and used by\n// the compiler to e.g. check type-correctness of function\n// calls.\n\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\n\t// `var` declares 1 or more variables.\n\tvar a = \"initial\"\n\tfmt.Println(a)\n\n\t// You can declare multiple variables at once.\n\tvar b, c int = 1, 2\n\tfmt.Println(b, c)\n\n\t// Go will infer the type of initialized variables.\n\tvar d = true\n\tfmt.Println(d)\n\n\t// Variables declared without a corresponding\n\t// initialization are _zero-valued_. For example, the\n\t// zero value for an `int` is `0`.\n\tvar e int\n\tfmt.Println(e)\n\n\t// The `:=` syntax is shorthand for declaring and\n\t// initializing a variable, e.g. for\n\t// `var f string = \"apple\"` in this case.\n\tf := \"apple\"\n\tfmt.Println(f)\n}\n",
    "GoCodeHash": "736ce4018f275bb8d12e5232349bae93611506b2",
    "URLHash": "iYyAIilyBRf",
    "Segs": [
      [
        {
          "docs": "In Go, _variables_ are explicitly declared and used by\nthe compiler to e.g. check type-correctness of function\ncalls.",
          "docs_rendered": "\u003cp\u003eIn Go, \u003cem\u003evariables\u003c/em\u003e are explicitly declared and used by\nthe compiler to e.g. check type-correctness of function\ncalls.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import \"fmt\"",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import \"fmt\"\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "`var` declares 1 or more variables.",
          "docs_rendered": "\u003cp\u003e\u003ccode\u003evar\u003c/code\u003e declares 1 or more variables.\u003c/p\u003e\n",
          "code": "\n    var a = \"initial\"\n    fmt.Println(a)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003ea\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;initial\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    var a = \"initial\"\n    fmt.Println(a)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "You can declare multiple variables at once.",
          "docs_rendered": "\u003cp\u003eYou can declare multiple variables at once.\u003c/p\u003e\n",
          "code": "\n    var b, c int = 1, 2\n    fmt.Println(b, c)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ec\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    var b, c int = 1, 2\n    fmt.Println(b, c)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Go will infer the type of initialized variables.",
          "docs_rendered": "\u003cp\u003eGo will infer the type of initialized variables.\u003c/p\u003e\n",
          "code": "\n    var d = true\n    fmt.Println(d)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003ed\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    var d = true\n    fmt.Println(d)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Variables declared without a corresponding\ninitialization are _zero-valued_. For example, the\nzero value for an `int` is `0`.",
          "docs_rendered": "\u003cp\u003eVariables declared without a corresponding\ninitialization are \u003cem\u003ezero-valued\u003c/em\u003e. For example, the\nzero value for an \u003ccode\u003eint\u003c/code\u003e is \u003ccode\u003e0\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n    var e int\n    fmt.Println(e)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003ee\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    var e int\n    fmt.Println(e)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "The `:=` syntax is shorthand for declaring and\ninitializing a variable, e.g. for\n`var f string = \"apple\"` in this case.",
          "docs_rendered": "\u003cp\u003eThe \u003ccode\u003e:=\u003c/code\u003e syntax is shorthand for declaring and\ninitializing a variable, e.g. for\n\u003ccode\u003evar f string = \u0026quot;apple\u0026quot;\u003c/code\u003e in this case.\u003c/p\u003e\n",
          "code": "\n    f := \"apple\"\n    fmt.Println(f)\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ef\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;apple\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    f := \"apple\"\n    fmt.Println(f)\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "",
          "docs_rendered": "",
          "code": "$ go run variables.go\ninitial\n1 2\ntrue\n0\napple",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run variables.go\n\u003cspan class=\"go\"\u003einitial\u003c/span\u003e\n\u003cspan class=\"go\"\u003e1 2\u003c/span\u003e\n\u003cspan class=\"go\"\u003etrue\u003c/span\u003e\n\u003cspan class=\"go\"\u003e0\u003c/span\u003e\n\u003cspan class=\"go\"\u003eapple\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "constants",
    "Name": "Constants",
    "GoCode": "// Go supports _constants_ of character, string, boolean,\n// and numeric values.\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\n// `const` declares a constant value.\nconst s string = \"constant\"\n\nfunc main() {\n\tfmt.Println(s)\n\n\t// A `const` statement can appear anywhere a `var`\n\t// statement can.\n\tconst n = 500000000\n\n\t// Constant expressions perform arithmetic with\n\t// arbitrary precision.\n\tconst d = 3e20 / n\n\tfmt.Println(d)\n\n\t// A numeric constant has no type until it's given\n\t// one, such as by an explicit conversion.\n\tfmt.Println(int64(d))\n\n\t// A number can be given a type by using it in a\n\t// context that requires one, such as a variable\n\t// assignment or function call. For example, here\n\t// `math.Sin` expects a `float64`.\n\tfmt.Println(math.Sin(n))\n}\n",
    "GoCodeHash": "9f776516953ae57a76544444c72802d3fad63da3",
    "URLHash": "Vw-pXSfo9_b",
    "Segs": [
      [
        {
          "docs": "Go supports _constants_ of character, string, boolean,\nand numeric values.",
          "docs_rendered": "\u003cp\u003eGo supports \u003cem\u003econstants\u003c/em\u003e of character, string, boolean,\nand numeric values.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"fmt\"\n    \"math\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;math\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"fmt\"\n    \"math\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "`const` declares a constant value.",
          "docs_rendered": "\u003cp\u003e\u003ccode\u003econst\u003c/code\u003e declares a constant value.\u003c/p\u003e\n",
          "code": "\nconst s string = \"constant\"",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003es\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;constant\u0026quot;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "const s string = \"constant\"\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {\n    fmt.Println(s)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n    fmt.Println(s)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "A `const` statement can appear anywhere a `var`\nstatement can.",
          "docs_rendered": "\u003cp\u003eA \u003ccode\u003econst\u003c/code\u003e statement can appear anywhere a \u003ccode\u003evar\u003c/code\u003e\nstatement can.\u003c/p\u003e\n",
          "code": "\n    const n = 500000000",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e500000000\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    const n = 500000000\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Constant expressions perform arithmetic with\narbitrary precision.",
          "docs_rendered": "\u003cp\u003eConstant expressions perform arithmetic with\narbitrary precision.\u003c/p\u003e\n",
          "code": "\n    const d = 3e20 / n\n    fmt.Println(d)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ed\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mf\"\u003e3e20\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"nx\"\u003en\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    const d = 3e20 / n\n    fmt.Println(d)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "A numeric constant has no type until it's given\none, such as by an explicit conversion.",
          "docs_rendered": "\u003cp\u003eA numeric constant has no type until it\u0026rsquo;s given\none, such as by an explicit conversion.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(int64(d))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eint64\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(int64(d))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "A number can be given a type by using it in a\ncontext that requires one, such as a variable\nassignment or function call. For example, here\n`math.Sin` expects a `float64`.",
          "docs_rendered": "\u003cp\u003eA number can be given a type by using it in a\ncontext that requires one, such as a variable\nassignment or function call. For example, here\n\u003ccode\u003emath.Sin\u003c/code\u003e expects a \u003ccode\u003efloat64\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(math.Sin(n))\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003emath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(math.Sin(n))\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "",
          "docs_rendered": "",
          "code": "$ go run constant.go \nconstant\n6e+11\n600000000000\n-0.28470407323754404",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run constant.go \n\u003cspan class=\"go\"\u003econstant\u003c/span\u003e\n\u003cspan class=\"go\"\u003e6e+11\u003c/span\u003e\n\u003cspan class=\"go\"\u003e600000000000\u003c/span\u003e\n\u003cspan class=\"go\"\u003e-0.28470407323754404\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "for",
    "Name": "For",
    "GoCode": "// `for` is Go's only looping construct. Here are\n// some basic types of `for` loops.\n\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\n\t// The most basic type, with a single condition.\n\ti := 1\n\tfor i \u003c= 3 {\n\t\tfmt.Println(i)\n\t\ti = i + 1\n\t}\n\n\t// A classic initial/condition/after `for` loop.\n\tfor j := 7; j \u003c= 9; j++ {\n\t\tfmt.Println(j)\n\t}\n\n\t// `for` without a condition will loop repeatedly\n\t// until you `break` out of the loop or `return` from\n\t// the enclosing function.\n\tfor {\n\t\tfmt.Println(\"loop\")\n\t\tbreak\n\t}\n\n\t// You can also `continue` to the next iteration of\n\t// the loop.\n\tfor n := 0; n \u003c= 5; n++ {\n\t\tif n%2 == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tfmt.Println(n)\n\t}\n}\n",
    "GoCodeHash": "7af221b7da2f2b22b0b1b0a1b365afc5a56ef815",
    "URLHash": "2-4H-ArwHHS",
    "Segs": [
      [
        {
          "docs": "`for` is Go's only looping construct. Here are\nsome basic types of `for` loops.",
          "docs_rendered": "\u003cp\u003e\u003ccode\u003efor\u003c/code\u003e is Go\u0026rsquo;s only looping construct. Here are\nsome basic types of \u003ccode\u003efor\u003c/code\u003e loops.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import \"fmt\"",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import \"fmt\"\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "The most basic type, with a single condition.",
          "docs_rendered": "\u003cp\u003eThe most basic type, with a single condition.\u003c/p\u003e\n",
          "code": "\n    i := 1\n    for i \u003c= 3 {\n        fmt.Println(i)\n        i = i + 1\n    }",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    i := 1\n    for i \u003c= 3 {\n        fmt.Println(i)\n        i = i + 1\n    }\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "A classic initial/condition/after `for` loop.",
          "docs_rendered": "\u003cp\u003eA classic initial/condition/after \u003ccode\u003efor\u003c/code\u003e loop.\u003c/p\u003e\n",
          "code": "\n    for j := 7; j \u003c= 9; j++ {\n        fmt.Println(j)\n    }",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    for j := 7; j \u003c= 9; j++ {\n        fmt.Println(j)\n    }\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "`for` without a condition will loop repeatedly\nuntil you `break` out of the loop or `return` from\nthe enclosing function.",
          "docs_rendered": "\u003cp\u003e\u003ccode\u003efor\u003c/code\u003e without a condition will loop repeatedly\nuntil you \u003ccode\u003ebreak\u003c/code\u003e out of the loop or \u003ccode\u003ereturn\u003c/code\u003e from\nthe enclosing function.\u003c/p\u003e\n",
          "code": "\n    for {\n        fmt.Println(\"loop\")\n        break\n    }",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;loop\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    for {\n        fmt.Println(\"loop\")\n        break\n    }\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "You can also `continue` to the next iteration of\nthe loop.",
          "docs_rendered": "\u003cp\u003eYou can also \u003ccode\u003econtinue\u003c/code\u003e to the next iteration of\nthe loop.\u003c/p\u003e\n",
          "code": "\n    for n := 0; n \u003c= 5; n++ {\n        if n%2 == 0 {\n            continue\n        }\n        fmt.Println(n)\n    }\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003en\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003en\u003c/span\u003e\u003cspan class=\"o\"\u003e%\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003econtinue\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    for n := 0; n \u003c= 5; n++ {\n        if n%2 == 0 {\n            continue\n        }\n        fmt.Println(n)\n    }\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "",
          "docs_rendered": "",
          "code": "$ go run for.go\n1\n2\n3\n7\n8\n9\nloop\n1\n3\n5",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run \u003cspan class=\"k\"\u003efor\u003c/span\u003e.go\n\u003cspan class=\"go\"\u003e1\u003c/span\u003e\n\u003cspan class=\"go\"\u003e2\u003c/span\u003e\n\u003cspan class=\"go\"\u003e3\u003c/span\u003e\n\u003cspan class=\"go\"\u003e7\u003c/span\u003e\n\u003cspan class=\"go\"\u003e8\u003c/span\u003e\n\u003cspan class=\"go\"\u003e9\u003c/span\u003e\n\u003cspan class=\"go\"\u003eloop\u003c/span\u003e\n\u003cspan class=\"go\"\u003e1\u003c/span\u003e\n\u003cspan class=\"go\"\u003e3\u003c/span\u003e\n\u003cspan class=\"go\"\u003e5\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "We'll see some other `for` forms later when we look at\n`range` statements, channels, and other data\nstructures.",
          "docs_rendered": "\u003cp\u003eWe\u0026rsquo;ll see some other \u003ccode\u003efor\u003c/code\u003e forms later when we look at\n\u003ccode\u003erange\u003c/code\u003e statements, channels, and other data\nstructures.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "if-else",
    "Name": "If/Else",
    "GoCode": "// Branching with `if` and `else` in Go is\n// straight-forward.\n\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\n\t// Here's a basic example.\n\tif 7%2 == 0 {\n\t\tfmt.Println(\"7 is even\")\n\t} else {\n\t\tfmt.Println(\"7 is odd\")\n\t}\n\n\t// You can have an `if` statement without an else.\n\tif 8%4 == 0 {\n\t\tfmt.Println(\"8 is divisible by 4\")\n\t}\n\n\t// A statement can precede conditionals; any variables\n\t// declared in this statement are available in all\n\t// branches.\n\tif num := 9; num \u003c 0 {\n\t\tfmt.Println(num, \"is negative\")\n\t} else if num \u003c 10 {\n\t\tfmt.Println(num, \"has 1 digit\")\n\t} else {\n\t\tfmt.Println(num, \"has multiple digits\")\n\t}\n}\n\n// Note that you don't need parentheses around conditions\n// in Go, but that the braces are required.\n",
    "GoCodeHash": "ae7f289ac1b2b1f152cd1952b93769209eed8e1d",
    "URLHash": "QlMkcwHvmns",
    "Segs": [
      [
        {
          "docs": "Branching with `if` and `else` in Go is\nstraight-forward.",
          "docs_rendered": "\u003cp\u003eBranching with \u003ccode\u003eif\u003c/code\u003e and \u003ccode\u003eelse\u003c/code\u003e in Go is\nstraight-forward.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import \"fmt\"",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import \"fmt\"\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Here's a basic example.",
          "docs_rendered": "\u003cp\u003eHere\u0026rsquo;s a basic example.\u003c/p\u003e\n",
          "code": "\n    if 7%2 == 0 {\n        fmt.Println(\"7 is even\")\n    } else {\n        fmt.Println(\"7 is odd\")\n    }",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"o\"\u003e%\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;7 is even\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;7 is odd\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    if 7%2 == 0 {\n        fmt.Println(\"7 is even\")\n    } else {\n        fmt.Println(\"7 is odd\")\n    }\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "You can have an `if` statement without an else.",
          "docs_rendered": "\u003cp\u003eYou can have an \u003ccode\u003eif\u003c/code\u003e statement without an else.\u003c/p\u003e\n",
          "code": "\n    if 8%4 == 0 {\n        fmt.Println(\"8 is divisible by 4\")\n    }",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"o\"\u003e%\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;8 is divisible by 4\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    if 8%4 == 0 {\n        fmt.Println(\"8 is divisible by 4\")\n    }\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "A statement can precede conditionals; any variables\ndeclared in this statement are available in all\nbranches.",
          "docs_rendered": "\u003cp\u003eA statement can precede conditionals; any variables\ndeclared in this statement are available in all\nbranches.\u003c/p\u003e\n",
          "code": "\n    if num := 9; num \u003c 0 {\n        fmt.Println(num, \"is negative\")\n    } else if num \u003c 10 {\n        fmt.Println(num, \"has 1 digit\")\n    } else {\n        fmt.Println(num, \"has multiple digits\")\n    }\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;is negative\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;has 1 digit\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;has multiple digits\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    if num := 9; num \u003c 0 {\n        fmt.Println(num, \"is negative\")\n    } else if num \u003c 10 {\n        fmt.Println(num, \"has 1 digit\")\n    } else {\n        fmt.Println(num, \"has multiple digits\")\n    }\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Note that you don't need parentheses around conditions\nin Go, but that the braces are required.",
          "docs_rendered": "\u003cp\u003eNote that you don\u0026rsquo;t need parentheses around conditions\nin Go, but that the braces are required.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "",
          "docs_rendered": "",
          "code": "$ go run if-else.go \n7 is odd\n8 is divisible by 4\n9 has 1 digit",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run \u003cspan class=\"k\"\u003eif\u003c/span\u003e-else.go \n\u003cspan class=\"go\"\u003e7 is odd\u003c/span\u003e\n\u003cspan class=\"go\"\u003e8 is divisible by 4\u003c/span\u003e\n\u003cspan class=\"go\"\u003e9 has 1 digit\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "There is no [ternary if](http://en.wikipedia.org/wiki/%3F:)\nin Go, so you'll need to use a full `if` statement even\nfor basic conditions.",
          "docs_rendered": "\u003cp\u003eThere is no \u003ca href=\"http://en.wikipedia.org/wiki/%3F:\"\u003eternary if\u003c/a\u003e\nin Go, so you\u0026rsquo;ll need to use a full \u003ccode\u003eif\u003c/code\u003e statement even\nfor basic conditions.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "switch",
    "Name": "Switch",
    "GoCode": "// _Switch statements_ express conditionals across many\n// branches.\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\n\t// Here's a basic `switch`.\n\ti := 2\n\tfmt.Print(\"Write \", i, \" as \")\n\tswitch i {\n\tcase 1:\n\t\tfmt.Println(\"one\")\n\tcase 2:\n\t\tfmt.Println(\"two\")\n\tcase 3:\n\t\tfmt.Println(\"three\")\n\t}\n\n\t// You can use commas to separate multiple expressions\n\t// in the same `case` statement. We use the optional\n\t// `default` case in this example as well.\n\tswitch time.Now().Weekday() {\n\tcase time.Saturday, time.Sunday:\n\t\tfmt.Println(\"It's the weekend\")\n\tdefault:\n\t\tfmt.Println(\"It's a weekday\")\n\t}\n\n\t// `switch` without an expression is an alternate way\n\t// to express if/else logic. Here we also show how the\n\t// `case` expressions can be non-constants.\n\tt := time.Now()\n\tswitch {\n\tcase t.Hour() \u003c 12:\n\t\tfmt.Println(\"It's before noon\")\n\tdefault:\n\t\tfmt.Println(\"It's after noon\")\n\t}\n\n\t// A type `switch` compares types instead of values.  You\n\t// can use this to discover the type of an interface\n\t// value.  In this example, the variable `t` will have the\n\t// type corresponding to its clause.\n\twhatAmI := func(i interface{}) {\n\t\tswitch t := i.(type) {\n\t\tcase bool:\n\t\t\tfmt.Println(\"I'm a bool\")\n\t\tcase int:\n\t\t\tfmt.Println(\"I'm an int\")\n\t\tdefault:\n\t\t\tfmt.Printf(\"Don't know type %T\\n\", t)\n\t\t}\n\t}\n\twhatAmI(true)\n\twhatAmI(1)\n\twhatAmI(\"hey\")\n}\n",
    "GoCodeHash": "28a8909ee7963cb315f14a3be1607def1d91f3a3",
    "URLHash": "qVDqWoUQ6AI",
    "Segs": [
      [
        {
          "docs": "_Switch statements_ express conditionals across many\nbranches.",
          "docs_rendered": "\u003cp\u003e\u003cem\u003eSwitch statements\u003c/em\u003e express conditionals across many\nbranches.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"fmt\"\n    \"time\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;time\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"fmt\"\n    \"time\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Here's a basic `switch`.",
          "docs_rendered": "\u003cp\u003eHere\u0026rsquo;s a basic \u003ccode\u003eswitch\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n    i := 2\n    fmt.Print(\"Write \", i, \" as \")\n    switch i {\n    case 1:\n        fmt.Println(\"one\")\n    case 2:\n        fmt.Println(\"two\")\n    case 3:\n        fmt.Println(\"three\")\n    }",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Write \u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot; as \u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eswitch\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;one\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;two\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;three\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    i := 2\n    fmt.Print(\"Write \", i, \" as \")\n    switch i {\n    case 1:\n        fmt.Println(\"one\")\n    case 2:\n        fmt.Println(\"two\")\n    case 3:\n        fmt.Println(\"three\")\n    }\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "You can use commas to separate multiple expressions\nin the same `case` statement. We use the optional\n`default` case in this example as well.",
          "docs_rendered": "\u003cp\u003eYou can use commas to separate multiple expressions\nin the same \u003ccode\u003ecase\u003c/code\u003e statement. We use the optional\n\u003ccode\u003edefault\u003c/code\u003e case in this example as well.\u003c/p\u003e\n",
          "code": "\n    switch time.Now().Weekday() {\n    case time.Saturday, time.Sunday:\n        fmt.Println(\"It's the weekend\")\n    default:\n        fmt.Println(\"It's a weekday\")\n    }",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003eswitch\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eNow\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"nx\"\u003eWeekday\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSaturday\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSunday\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;It\u0026#39;s the weekend\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;It\u0026#39;s a weekday\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    switch time.Now().Weekday() {\n    case time.Saturday, time.Sunday:\n        fmt.Println(\"It's the weekend\")\n    default:\n        fmt.Println(\"It's a weekday\")\n    }\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "`switch` without an expression is an alternate way\nto express if/else logic. Here we also show how the\n`case` expressions can be non-constants.",
          "docs_rendered": "\u003cp\u003e\u003ccode\u003eswitch\u003c/code\u003e without an expression is an alternate way\nto express if/else logic. Here we also show how the\n\u003ccode\u003ecase\u003c/code\u003e expressions can be non-constants.\u003c/p\u003e\n",
          "code": "\n    t := time.Now()\n    switch {\n    case t.Hour() \u003c 12:\n        fmt.Println(\"It's before noon\")\n    default:\n        fmt.Println(\"It's after noon\")\n    }",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003et\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eNow\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eswitch\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"nx\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eHour\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;It\u0026#39;s before noon\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;It\u0026#39;s after noon\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    t := time.Now()\n    switch {\n    case t.Hour() \u003c 12:\n        fmt.Println(\"It's before noon\")\n    default:\n        fmt.Println(\"It's after noon\")\n    }\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "A type `switch` compares types instead of values.  You\ncan use this to discover the type of an interface\nvalue.  In this example, the variable `t` will have the\ntype corresponding to its clause.",
          "docs_rendered": "\u003cp\u003eA type \u003ccode\u003eswitch\u003c/code\u003e compares types instead of values.  You\ncan use this to discover the type of an interface\nvalue.  In this example, the variable \u003ccode\u003et\u003c/code\u003e will have the\ntype corresponding to its clause.\u003c/p\u003e\n",
          "code": "\n    whatAmI := func(i interface{}) {\n        switch t := i.(type) {\n        case bool:\n            fmt.Println(\"I'm a bool\")\n        case int:\n            fmt.Println(\"I'm an int\")\n        default:\n            fmt.Printf(\"Don't know type %T\\n\", t)\n        }\n    }\n    whatAmI(true)\n    whatAmI(1)\n    whatAmI(\"hey\")\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ewhatAmI\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"kd\"\u003einterface\u003c/span\u003e\u003cspan class=\"p\"\u003e{})\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eswitch\u003c/span\u003e \u003cspan class=\"nx\"\u003et\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e.(\u003c/span\u003e\u003cspan class=\"kd\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;I\u0026#39;m a bool\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;I\u0026#39;m an int\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Don\u0026#39;t know type %T\\n\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ewhatAmI\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ewhatAmI\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ewhatAmI\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;hey\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    whatAmI := func(i interface{}) {\n        switch t := i.(type) {\n        case bool:\n            fmt.Println(\"I'm a bool\")\n        case int:\n            fmt.Println(\"I'm an int\")\n        default:\n            fmt.Printf(\"Don't know type %T\\n\", t)\n        }\n    }\n    whatAmI(true)\n    whatAmI(1)\n    whatAmI(\"hey\")\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "",
          "docs_rendered": "",
          "code": "$ go run switch.go \nWrite 2 as two\nIt's a weekday\nIt's after noon\nI'm a bool\nI'm an int\nDon't know type string",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run switch.go \n\u003cspan class=\"go\"\u003eWrite 2 as two\u003c/span\u003e\n\u003cspan class=\"go\"\u003eIt\u0026#39;s a weekday\u003c/span\u003e\n\u003cspan class=\"go\"\u003eIt\u0026#39;s after noon\u003c/span\u003e\n\u003cspan class=\"go\"\u003eI\u0026#39;m a bool\u003c/span\u003e\n\u003cspan class=\"go\"\u003eI\u0026#39;m an int\u003c/span\u003e\n\u003cspan class=\"go\"\u003eDon\u0026#39;t know type string\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "arrays",
    "Name": "Arrays",
    "GoCode": "// In Go, an _array_ is a numbered sequence of elements of a\n// specific length.\n\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\n\t// Here we create an array `a` that will hold exactly\n\t// 5 `int`s. The type of elements and length are both\n\t// part of the array's type. By default an array is\n\t// zero-valued, which for `int`s means `0`s.\n\tvar a [5]int\n\tfmt.Println(\"emp:\", a)\n\n\t// We can set a value at an index using the\n\t// `array[index] = value` syntax, and get a value with\n\t// `array[index]`.\n\ta[4] = 100\n\tfmt.Println(\"set:\", a)\n\tfmt.Println(\"get:\", a[4])\n\n\t// The builtin `len` returns the length of an array.\n\tfmt.Println(\"len:\", len(a))\n\n\t// Use this syntax to declare and initialize an array\n\t// in one line.\n\tb := [5]int{1, 2, 3, 4, 5}\n\tfmt.Println(\"dcl:\", b)\n\n\t// Array types are one-dimensional, but you can\n\t// compose types to build multi-dimensional data\n\t// structures.\n\tvar twoD [2][3]int\n\tfor i := 0; i \u003c 2; i++ {\n\t\tfor j := 0; j \u003c 3; j++ {\n\t\t\ttwoD[i][j] = i + j\n\t\t}\n\t}\n\tfmt.Println(\"2d: \", twoD)\n}\n",
    "GoCodeHash": "e71f2d3763eb2950727faa39b90cf1bc037d85fa",
    "URLHash": "TaahifSGSwU",
    "Segs": [
      [
        {
          "docs": "In Go, an _array_ is a numbered sequence of elements of a\nspecific length.",
          "docs_rendered": "\u003cp\u003eIn Go, an \u003cem\u003earray\u003c/em\u003e is a numbered sequence of elements of a\nspecific length.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import \"fmt\"",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import \"fmt\"\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Here we create an array `a` that will hold exactly\n5 `int`s. The type of elements and length are both\npart of the array's type. By default an array is\nzero-valued, which for `int`s means `0`s.",
          "docs_rendered": "\u003cp\u003eHere we create an array \u003ccode\u003ea\u003c/code\u003e that will hold exactly\n5 \u003ccode\u003eint\u003c/code\u003es. The type of elements and length are both\npart of the array\u0026rsquo;s type. By default an array is\nzero-valued, which for \u003ccode\u003eint\u003c/code\u003es means \u003ccode\u003e0\u003c/code\u003es.\u003c/p\u003e\n",
          "code": "\n    var a [5]int\n    fmt.Println(\"emp:\", a)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003ea\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;emp:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    var a [5]int\n    fmt.Println(\"emp:\", a)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "We can set a value at an index using the\n`array[index] = value` syntax, and get a value with\n`array[index]`.",
          "docs_rendered": "\u003cp\u003eWe can set a value at an index using the\n\u003ccode\u003earray[index] = value\u003c/code\u003e syntax, and get a value with\n\u003ccode\u003earray[index]\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n    a[4] = 100\n    fmt.Println(\"set:\", a)\n    fmt.Println(\"get:\", a[4])",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e100\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;set:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;get:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    a[4] = 100\n    fmt.Println(\"set:\", a)\n    fmt.Println(\"get:\", a[4])\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "The builtin `len` returns the length of an array.",
          "docs_rendered": "\u003cp\u003eThe builtin \u003ccode\u003elen\u003c/code\u003e returns the length of an array.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(\"len:\", len(a))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;len:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(\"len:\", len(a))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Use this syntax to declare and initialize an array\nin one line.",
          "docs_rendered": "\u003cp\u003eUse this syntax to declare and initialize an array\nin one line.\u003c/p\u003e\n",
          "code": "\n    b := [5]int{1, 2, 3, 4, 5}\n    fmt.Println(\"dcl:\", b)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;dcl:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    b := [5]int{1, 2, 3, 4, 5}\n    fmt.Println(\"dcl:\", b)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Array types are one-dimensional, but you can\ncompose types to build multi-dimensional data\nstructures.",
          "docs_rendered": "\u003cp\u003eArray types are one-dimensional, but you can\ncompose types to build multi-dimensional data\nstructures.\u003c/p\u003e\n",
          "code": "\n    var twoD [2][3]int\n    for i := 0; i \u003c 2; i++ {\n        for j := 0; j \u003c 3; j++ {\n            twoD[i][j] = i + j\n        }\n    }\n    fmt.Println(\"2d: \", twoD)\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003etwoD\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"nx\"\u003etwoD\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"nx\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;2d: \u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003etwoD\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    var twoD [2][3]int\n    for i := 0; i \u003c 2; i++ {\n        for j := 0; j \u003c 3; j++ {\n            twoD[i][j] = i + j\n        }\n    }\n    fmt.Println(\"2d: \", twoD)\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "Note that arrays appear in the form `[v1 v2 v3 ...]`\nwhen printed with `fmt.Println`.",
          "docs_rendered": "\u003cp\u003eNote that arrays appear in the form \u003ccode\u003e[v1 v2 v3 ...]\u003c/code\u003e\nwhen printed with \u003ccode\u003efmt.Println\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n$ go run arrays.go\nemp: [0 0 0 0 0]\nset: [0 0 0 0 100]\nget: 100\nlen: 5\ndcl: [1 2 3 4 5]\n2d:  [[0 1 2] [1 2 3]]",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run arrays.go\n\u003cspan class=\"go\"\u003eemp: [0 0 0 0 0]\u003c/span\u003e\n\u003cspan class=\"go\"\u003eset: [0 0 0 0 100]\u003c/span\u003e\n\u003cspan class=\"go\"\u003eget: 100\u003c/span\u003e\n\u003cspan class=\"go\"\u003elen: 5\u003c/span\u003e\n\u003cspan class=\"go\"\u003edcl: [1 2 3 4 5]\u003c/span\u003e\n\u003cspan class=\"go\"\u003e2d:  [[0 1 2] [1 2 3]]\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "You'll see _slices_ much more often than arrays in\ntypical Go. We'll look at slices next.",
          "docs_rendered": "\u003cp\u003eYou\u0026rsquo;ll see \u003cem\u003eslices\u003c/em\u003e much more often than arrays in\ntypical Go. We\u0026rsquo;ll look at slices next.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "slices",
    "Name": "Slices",
    "GoCode": "// _Slices_ are a key data type in Go, giving a more\n// powerful interface to sequences than arrays.\n\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\n\t// Unlike arrays, slices are typed only by the\n\t// elements they contain (not the number of elements).\n\t// To create an empty slice with non-zero length, use\n\t// the builtin `make`. Here we make a slice of\n\t// `string`s of length `3` (initially zero-valued).\n\ts := make([]string, 3)\n\tfmt.Println(\"emp:\", s)\n\n\t// We can set and get just like with arrays.\n\ts[0] = \"a\"\n\ts[1] = \"b\"\n\ts[2] = \"c\"\n\tfmt.Println(\"set:\", s)\n\tfmt.Println(\"get:\", s[2])\n\n\t// `len` returns the length of the slice as expected.\n\tfmt.Println(\"len:\", len(s))\n\n\t// In addition to these basic operations, slices\n\t// support several more that make them richer than\n\t// arrays. One is the builtin `append`, which\n\t// returns a slice containing one or more new values.\n\t// Note that we need to accept a return value from\n\t// `append` as we may get a new slice value.\n\ts = append(s, \"d\")\n\ts = append(s, \"e\", \"f\")\n\tfmt.Println(\"apd:\", s)\n\n\t// Slices can also be `copy`'d. Here we create an\n\t// empty slice `c` of the same length as `s` and copy\n\t// into `c` from `s`.\n\tc := make([]string, len(s))\n\tcopy(c, s)\n\tfmt.Println(\"cpy:\", c)\n\n\t// Slices support a \"slice\" operator with the syntax\n\t// `slice[low:high]`. For example, this gets a slice\n\t// of the elements `s[2]`, `s[3]`, and `s[4]`.\n\tl := s[2:5]\n\tfmt.Println(\"sl1:\", l)\n\n\t// This slices up to (but excluding) `s[5]`.\n\tl = s[:5]\n\tfmt.Println(\"sl2:\", l)\n\n\t// And this slices up from (and including) `s[2]`.\n\tl = s[2:]\n\tfmt.Println(\"sl3:\", l)\n\n\t// We can declare and initialize a variable for slice\n\t// in a single line as well.\n\tt := []string{\"g\", \"h\", \"i\"}\n\tfmt.Println(\"dcl:\", t)\n\n\t// Slices can be composed into multi-dimensional data\n\t// structures. The length of the inner slices can\n\t// vary, unlike with multi-dimensional arrays.\n\ttwoD := make([][]int, 3)\n\tfor i := 0; i \u003c 3; i++ {\n\t\tinnerLen := i + 1\n\t\ttwoD[i] = make([]int, innerLen)\n\t\tfor j := 0; j \u003c innerLen; j++ {\n\t\t\ttwoD[i][j] = i + j\n\t\t}\n\t}\n\tfmt.Println(\"2d: \", twoD)\n}\n",
    "GoCodeHash": "02c5330eb3ef32a88ca22a5adbded9bd356f89f3",
    "URLHash": "iLnoIEIxeQ1",
    "Segs": [
      [
        {
          "docs": "_Slices_ are a key data type in Go, giving a more\npowerful interface to sequences than arrays.",
          "docs_rendered": "\u003cp\u003e\u003cem\u003eSlices\u003c/em\u003e are a key data type in Go, giving a more\npowerful interface to sequences than arrays.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import \"fmt\"",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import \"fmt\"\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Unlike arrays, slices are typed only by the\nelements they contain (not the number of elements).\nTo create an empty slice with non-zero length, use\nthe builtin `make`. Here we make a slice of\n`string`s of length `3` (initially zero-valued).",
          "docs_rendered": "\u003cp\u003eUnlike arrays, slices are typed only by the\nelements they contain (not the number of elements).\nTo create an empty slice with non-zero length, use\nthe builtin \u003ccode\u003emake\u003c/code\u003e. Here we make a slice of\n\u003ccode\u003estring\u003c/code\u003es of length \u003ccode\u003e3\u003c/code\u003e (initially zero-valued).\u003c/p\u003e\n",
          "code": "\n    s := make([]string, 3)\n    fmt.Println(\"emp:\", s)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003es\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e([]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;emp:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    s := make([]string, 3)\n    fmt.Println(\"emp:\", s)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "We can set and get just like with arrays.",
          "docs_rendered": "\u003cp\u003eWe can set and get just like with arrays.\u003c/p\u003e\n",
          "code": "\n    s[0] = \"a\"\n    s[1] = \"b\"\n    s[2] = \"c\"\n    fmt.Println(\"set:\", s)\n    fmt.Println(\"get:\", s[2])",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;a\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;b\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;c\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;set:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;get:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    s[0] = \"a\"\n    s[1] = \"b\"\n    s[2] = \"c\"\n    fmt.Println(\"set:\", s)\n    fmt.Println(\"get:\", s[2])\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "`len` returns the length of the slice as expected.",
          "docs_rendered": "\u003cp\u003e\u003ccode\u003elen\u003c/code\u003e returns the length of the slice as expected.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(\"len:\", len(s))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;len:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(\"len:\", len(s))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "In addition to these basic operations, slices\nsupport several more that make them richer than\narrays. One is the builtin `append`, which\nreturns a slice containing one or more new values.\nNote that we need to accept a return value from\n`append` as we may get a new slice value.",
          "docs_rendered": "\u003cp\u003eIn addition to these basic operations, slices\nsupport several more that make them richer than\narrays. One is the builtin \u003ccode\u003eappend\u003c/code\u003e, which\nreturns a slice containing one or more new values.\nNote that we need to accept a return value from\n\u003ccode\u003eappend\u003c/code\u003e as we may get a new slice value.\u003c/p\u003e\n",
          "code": "\n    s = append(s, \"d\")\n    s = append(s, \"e\", \"f\")\n    fmt.Println(\"apd:\", s)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003es\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;d\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003es\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;f\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;apd:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    s = append(s, \"d\")\n    s = append(s, \"e\", \"f\")\n    fmt.Println(\"apd:\", s)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Slices can also be `copy`'d. Here we create an\nempty slice `c` of the same length as `s` and copy\ninto `c` from `s`.",
          "docs_rendered": "\u003cp\u003eSlices can also be \u003ccode\u003ecopy\u003c/code\u003e\u0026rsquo;d. Here we create an\nempty slice \u003ccode\u003ec\u003c/code\u003e of the same length as \u003ccode\u003es\u003c/code\u003e and copy\ninto \u003ccode\u003ec\u003c/code\u003e from \u003ccode\u003es\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n    c := make([]string, len(s))\n    copy(c, s)\n    fmt.Println(\"cpy:\", c)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e([]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003ecopy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;cpy:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    c := make([]string, len(s))\n    copy(c, s)\n    fmt.Println(\"cpy:\", c)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Slices support a \"slice\" operator with the syntax\n`slice[low:high]`. For example, this gets a slice\nof the elements `s[2]`, `s[3]`, and `s[4]`.",
          "docs_rendered": "\u003cp\u003eSlices support a \u0026ldquo;slice\u0026rdquo; operator with the syntax\n\u003ccode\u003eslice[low:high]\u003c/code\u003e. For example, this gets a slice\nof the elements \u003ccode\u003es[2]\u003c/code\u003e, \u003ccode\u003es[3]\u003c/code\u003e, and \u003ccode\u003es[4]\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n    l := s[2:5]\n    fmt.Println(\"sl1:\", l)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003el\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;sl1:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    l := s[2:5]\n    fmt.Println(\"sl1:\", l)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "This slices up to (but excluding) `s[5]`.",
          "docs_rendered": "\u003cp\u003eThis slices up to (but excluding) \u003ccode\u003es[5]\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n    l = s[:5]\n    fmt.Println(\"sl2:\", l)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003el\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e[:\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;sl2:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    l = s[:5]\n    fmt.Println(\"sl2:\", l)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "And this slices up from (and including) `s[2]`.",
          "docs_rendered": "\u003cp\u003eAnd this slices up from (and including) \u003ccode\u003es[2]\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n    l = s[2:]\n    fmt.Println(\"sl3:\", l)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003el\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e:]\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;sl3:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    l = s[2:]\n    fmt.Println(\"sl3:\", l)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "We can declare and initialize a variable for slice\nin a single line as well.",
          "docs_rendered": "\u003cp\u003eWe can declare and initialize a variable for slice\nin a single line as well.\u003c/p\u003e\n",
          "code": "\n    t := []string{\"g\", \"h\", \"i\"}\n    fmt.Println(\"dcl:\", t)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003et\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;g\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;h\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;i\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;dcl:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    t := []string{\"g\", \"h\", \"i\"}\n    fmt.Println(\"dcl:\", t)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Slices can be composed into multi-dimensional data\nstructures. The length of the inner slices can\nvary, unlike with multi-dimensional arrays.",
          "docs_rendered": "\u003cp\u003eSlices can be composed into multi-dimensional data\nstructures. The length of the inner slices can\nvary, unlike with multi-dimensional arrays.\u003c/p\u003e\n",
          "code": "\n    twoD := make([][]int, 3)\n    for i := 0; i \u003c 3; i++ {\n        innerLen := i + 1\n        twoD[i] = make([]int, innerLen)\n        for j := 0; j \u003c innerLen; j++ {\n            twoD[i][j] = i + j\n        }\n    }\n    fmt.Println(\"2d: \", twoD)\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003etwoD\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e([][]\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003einnerLen\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003etwoD\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e([]\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003einnerLen\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nx\"\u003einnerLen\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"nx\"\u003etwoD\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"nx\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;2d: \u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003etwoD\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    twoD := make([][]int, 3)\n    for i := 0; i \u003c 3; i++ {\n        innerLen := i + 1\n        twoD[i] = make([]int, innerLen)\n        for j := 0; j \u003c innerLen; j++ {\n            twoD[i][j] = i + j\n        }\n    }\n    fmt.Println(\"2d: \", twoD)\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "Note that while slices are different types than arrays,\nthey are rendered similarly by `fmt.Println`.",
          "docs_rendered": "\u003cp\u003eNote that while slices are different types than arrays,\nthey are rendered similarly by \u003ccode\u003efmt.Println\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n$ go run slices.go\nemp: [  ]\nset: [a b c]\nget: c\nlen: 3\napd: [a b c d e f]\ncpy: [a b c d e f]\nsl1: [c d e]\nsl2: [a b c d e]\nsl3: [c d e f]\ndcl: [g h i]\n2d:  [[0] [1 2] [2 3 4]]",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run slices.go\n\u003cspan class=\"go\"\u003eemp: [  ]\u003c/span\u003e\n\u003cspan class=\"go\"\u003eset: [a b c]\u003c/span\u003e\n\u003cspan class=\"go\"\u003eget: c\u003c/span\u003e\n\u003cspan class=\"go\"\u003elen: 3\u003c/span\u003e\n\u003cspan class=\"go\"\u003eapd: [a b c d e f]\u003c/span\u003e\n\u003cspan class=\"go\"\u003ecpy: [a b c d e f]\u003c/span\u003e\n\u003cspan class=\"go\"\u003esl1: [c d e]\u003c/span\u003e\n\u003cspan class=\"go\"\u003esl2: [a b c d e]\u003c/span\u003e\n\u003cspan class=\"go\"\u003esl3: [c d e f]\u003c/span\u003e\n\u003cspan class=\"go\"\u003edcl: [g h i]\u003c/span\u003e\n\u003cspan class=\"go\"\u003e2d:  [[0] [1 2] [2 3 4]]\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Check out this [great blog post](http://blog.golang.org/2011/01/go-slices-usage-and-internals.html)\nby the Go team for more details on the design and\nimplementation of slices in Go.",
          "docs_rendered": "\u003cp\u003eCheck out this \u003ca href=\"http://blog.golang.org/2011/01/go-slices-usage-and-internals.html\"\u003egreat blog post\u003c/a\u003e\nby the Go team for more details on the design and\nimplementation of slices in Go.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Now that we've seen arrays and slices we'll look at\nGo's other key builtin data structure: maps.",
          "docs_rendered": "\u003cp\u003eNow that we\u0026rsquo;ve seen arrays and slices we\u0026rsquo;ll look at\nGo\u0026rsquo;s other key builtin data structure: maps.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "maps",
    "Name": "Maps",
    "GoCode": "// _Maps_ are Go's built-in [associative data type](http://en.wikipedia.org/wiki/Associative_array)\n// (sometimes called _hashes_ or _dicts_ in other languages).\n\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\n\t// To create an empty map, use the builtin `make`:\n\t// `make(map[key-type]val-type)`.\n\tm := make(map[string]int)\n\n\t// Set key/value pairs using typical `name[key] = val`\n\t// syntax.\n\tm[\"k1\"] = 7\n\tm[\"k2\"] = 13\n\n\t// Printing a map with e.g. `fmt.Println` will show all of\n\t// its key/value pairs.\n\tfmt.Println(\"map:\", m)\n\n\t// Get a value for a key with `name[key]`.\n\tv1 := m[\"k1\"]\n\tfmt.Println(\"v1: \", v1)\n\n\t// The builtin `len` returns the number of key/value\n\t// pairs when called on a map.\n\tfmt.Println(\"len:\", len(m))\n\n\t// The builtin `delete` removes key/value pairs from\n\t// a map.\n\tdelete(m, \"k2\")\n\tfmt.Println(\"map:\", m)\n\n\t// The optional second return value when getting a\n\t// value from a map indicates if the key was present\n\t// in the map. This can be used to disambiguate\n\t// between missing keys and keys with zero values\n\t// like `0` or `\"\"`. Here we didn't need the value\n\t// itself, so we ignored it with the _blank identifier_\n\t// `_`.\n\t_, prs := m[\"k2\"]\n\tfmt.Println(\"prs:\", prs)\n\n\t// You can also declare and initialize a new map in\n\t// the same line with this syntax.\n\tn := map[string]int{\"foo\": 1, \"bar\": 2}\n\tfmt.Println(\"map:\", n)\n}\n",
    "GoCodeHash": "9e0e4535c99668b460c7175f8ff2edc2ccf58bec",
    "URLHash": "agK2Ro2i-Lu",
    "Segs": [
      [
        {
          "docs": "_Maps_ are Go's built-in [associative data type](http://en.wikipedia.org/wiki/Associative_array)\n(sometimes called _hashes_ or _dicts_ in other languages).",
          "docs_rendered": "\u003cp\u003e\u003cem\u003eMaps\u003c/em\u003e are Go\u0026rsquo;s built-in \u003ca href=\"http://en.wikipedia.org/wiki/Associative_array\"\u003eassociative data type\u003c/a\u003e\n(sometimes called \u003cem\u003ehashes\u003c/em\u003e or \u003cem\u003edicts\u003c/em\u003e in other languages).\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import \"fmt\"",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import \"fmt\"\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "To create an empty map, use the builtin `make`:\n`make(map[key-type]val-type)`.",
          "docs_rendered": "\u003cp\u003eTo create an empty map, use the builtin \u003ccode\u003emake\u003c/code\u003e:\n\u003ccode\u003emake(map[key-type]val-type)\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n    m := make(map[string]int)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003em\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    m := make(map[string]int)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Set key/value pairs using typical `name[key] = val`\nsyntax.",
          "docs_rendered": "\u003cp\u003eSet key/value pairs using typical \u003ccode\u003ename[key] = val\u003c/code\u003e\nsyntax.\u003c/p\u003e\n",
          "code": "\n    m[\"k1\"] = 7\n    m[\"k2\"] = 13",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;k1\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;k2\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e13\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    m[\"k1\"] = 7\n    m[\"k2\"] = 13\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Printing a map with e.g. `fmt.Println` will show all of\nits key/value pairs.",
          "docs_rendered": "\u003cp\u003ePrinting a map with e.g. \u003ccode\u003efmt.Println\u003c/code\u003e will show all of\nits key/value pairs.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(\"map:\", m)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;map:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(\"map:\", m)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Get a value for a key with `name[key]`.",
          "docs_rendered": "\u003cp\u003eGet a value for a key with \u003ccode\u003ename[key]\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n    v1 := m[\"k1\"]\n    fmt.Println(\"v1: \", v1)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ev1\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;k1\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;v1: \u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ev1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    v1 := m[\"k1\"]\n    fmt.Println(\"v1: \", v1)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "The builtin `len` returns the number of key/value\npairs when called on a map.",
          "docs_rendered": "\u003cp\u003eThe builtin \u003ccode\u003elen\u003c/code\u003e returns the number of key/value\npairs when called on a map.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(\"len:\", len(m))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;len:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(\"len:\", len(m))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "The builtin `delete` removes key/value pairs from\na map.",
          "docs_rendered": "\u003cp\u003eThe builtin \u003ccode\u003edelete\u003c/code\u003e removes key/value pairs from\na map.\u003c/p\u003e\n",
          "code": "\n    delete(m, \"k2\")\n    fmt.Println(\"map:\", m)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nb\"\u003edelete\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;k2\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;map:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    delete(m, \"k2\")\n    fmt.Println(\"map:\", m)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "The optional second return value when getting a\nvalue from a map indicates if the key was present\nin the map. This can be used to disambiguate\nbetween missing keys and keys with zero values\nlike `0` or `\"\"`. Here we didn't need the value\nitself, so we ignored it with the _blank identifier_\n`_`.",
          "docs_rendered": "\u003cp\u003eThe optional second return value when getting a\nvalue from a map indicates if the key was present\nin the map. This can be used to disambiguate\nbetween missing keys and keys with zero values\nlike \u003ccode\u003e0\u003c/code\u003e or \u003ccode\u003e\u0026quot;\u0026quot;\u003c/code\u003e. Here we didn\u0026rsquo;t need the value\nitself, so we ignored it with the \u003cem\u003eblank identifier\u003c/em\u003e\n\u003ccode\u003e_\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n    _, prs := m[\"k2\"]\n    fmt.Println(\"prs:\", prs)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eprs\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;k2\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;prs:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eprs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    _, prs := m[\"k2\"]\n    fmt.Println(\"prs:\", prs)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "You can also declare and initialize a new map in\nthe same line with this syntax.",
          "docs_rendered": "\u003cp\u003eYou can also declare and initialize a new map in\nthe same line with this syntax.\u003c/p\u003e\n",
          "code": "\n    n := map[string]int{\"foo\": 1, \"bar\": 2}\n    fmt.Println(\"map:\", n)\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"kd\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;foo\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;bar\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;map:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    n := map[string]int{\"foo\": 1, \"bar\": 2}\n    fmt.Println(\"map:\", n)\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "Note that maps appear in the form `map[k:v k:v]` when\nprinted with `fmt.Println`.",
          "docs_rendered": "\u003cp\u003eNote that maps appear in the form \u003ccode\u003emap[k:v k:v]\u003c/code\u003e when\nprinted with \u003ccode\u003efmt.Println\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n$ go run maps.go \nmap: map[k1:7 k2:13]\nv1:  7\nlen: 2\nmap: map[k1:7]\nprs: false\nmap: map[bar:2 foo:1]",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run maps.go \n\u003cspan class=\"go\"\u003emap: map[k1:7 k2:13]\u003c/span\u003e\n\u003cspan class=\"go\"\u003ev1:  7\u003c/span\u003e\n\u003cspan class=\"go\"\u003elen: 2\u003c/span\u003e\n\u003cspan class=\"go\"\u003emap: map[k1:7]\u003c/span\u003e\n\u003cspan class=\"go\"\u003eprs: false\u003c/span\u003e\n\u003cspan class=\"go\"\u003emap: map[bar:2 foo:1]\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "range",
    "Name": "Range",
    "GoCode": "// _range_ iterates over elements in a variety of data\n// structures. Let's see how to use `range` with some\n// of the data structures we've already learned.\n\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\n\t// Here we use `range` to sum the numbers in a slice.\n\t// Arrays work like this too.\n\tnums := []int{2, 3, 4}\n\tsum := 0\n\tfor _, num := range nums {\n\t\tsum += num\n\t}\n\tfmt.Println(\"sum:\", sum)\n\n\t// `range` on arrays and slices provides both the\n\t// index and value for each entry. Above we didn't\n\t// need the index, so we ignored it with the\n\t// blank identifier `_`. Sometimes we actually want\n\t// the indexes though.\n\tfor i, num := range nums {\n\t\tif num == 3 {\n\t\t\tfmt.Println(\"index:\", i)\n\t\t}\n\t}\n\n\t// `range` on map iterates over key/value pairs.\n\tkvs := map[string]string{\"a\": \"apple\", \"b\": \"banana\"}\n\tfor k, v := range kvs {\n\t\tfmt.Printf(\"%s -\u003e %s\\n\", k, v)\n\t}\n\n\t// `range` can also iterate over just the keys of a map.\n\tfor k := range kvs {\n\t\tfmt.Println(\"key:\", k)\n\t}\n\n\t// `range` on strings iterates over Unicode code\n\t// points. The first value is the starting byte index\n\t// of the `rune` and the second the `rune` itself.\n\tfor i, c := range \"go\" {\n\t\tfmt.Println(i, c)\n\t}\n}\n",
    "GoCodeHash": "c7d9ae9ed081fb4bbf27ef45242fbb39bbae3d4c",
    "URLHash": "pdZOtv4g-7J",
    "Segs": [
      [
        {
          "docs": "_range_ iterates over elements in a variety of data\nstructures. Let's see how to use `range` with some\nof the data structures we've already learned.",
          "docs_rendered": "\u003cp\u003e\u003cem\u003erange\u003c/em\u003e iterates over elements in a variety of data\nstructures. Let\u0026rsquo;s see how to use \u003ccode\u003erange\u003c/code\u003e with some\nof the data structures we\u0026rsquo;ve already learned.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import \"fmt\"",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import \"fmt\"\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Here we use `range` to sum the numbers in a slice.\nArrays work like this too.",
          "docs_rendered": "\u003cp\u003eHere we use \u003ccode\u003erange\u003c/code\u003e to sum the numbers in a slice.\nArrays work like this too.\u003c/p\u003e\n",
          "code": "\n    nums := []int{2, 3, 4}\n    sum := 0\n    for _, num := range nums {\n        sum += num\n    }\n    fmt.Println(\"sum:\", sum)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003enums\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"k\"\u003erange\u003c/span\u003e \u003cspan class=\"nx\"\u003enums\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;sum:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    nums := []int{2, 3, 4}\n    sum := 0\n    for _, num := range nums {\n        sum += num\n    }\n    fmt.Println(\"sum:\", sum)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "`range` on arrays and slices provides both the\nindex and value for each entry. Above we didn't\nneed the index, so we ignored it with the\nblank identifier `_`. Sometimes we actually want\nthe indexes though.",
          "docs_rendered": "\u003cp\u003e\u003ccode\u003erange\u003c/code\u003e on arrays and slices provides both the\nindex and value for each entry. Above we didn\u0026rsquo;t\nneed the index, so we ignored it with the\nblank identifier \u003ccode\u003e_\u003c/code\u003e. Sometimes we actually want\nthe indexes though.\u003c/p\u003e\n",
          "code": "\n    for i, num := range nums {\n        if num == 3 {\n            fmt.Println(\"index:\", i)\n        }\n    }",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"k\"\u003erange\u003c/span\u003e \u003cspan class=\"nx\"\u003enums\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;index:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    for i, num := range nums {\n        if num == 3 {\n            fmt.Println(\"index:\", i)\n        }\n    }\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "`range` on map iterates over key/value pairs.",
          "docs_rendered": "\u003cp\u003e\u003ccode\u003erange\u003c/code\u003e on map iterates over key/value pairs.\u003c/p\u003e\n",
          "code": "\n    kvs := map[string]string{\"a\": \"apple\", \"b\": \"banana\"}\n    for k, v := range kvs {\n        fmt.Printf(\"%s -\u003e %s\\n\", k, v)\n    }",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ekvs\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"kd\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;a\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;apple\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;b\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;banana\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ev\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"k\"\u003erange\u003c/span\u003e \u003cspan class=\"nx\"\u003ekvs\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;%s -\u0026gt; %s\\n\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    kvs := map[string]string{\"a\": \"apple\", \"b\": \"banana\"}\n    for k, v := range kvs {\n        fmt.Printf(\"%s -\u003e %s\\n\", k, v)\n    }\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "`range` can also iterate over just the keys of a map.",
          "docs_rendered": "\u003cp\u003e\u003ccode\u003erange\u003c/code\u003e can also iterate over just the keys of a map.\u003c/p\u003e\n",
          "code": "\n    for k := range kvs {\n        fmt.Println(\"key:\", k)\n    }",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ek\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"k\"\u003erange\u003c/span\u003e \u003cspan class=\"nx\"\u003ekvs\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;key:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    for k := range kvs {\n        fmt.Println(\"key:\", k)\n    }\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "`range` on strings iterates over Unicode code\npoints. The first value is the starting byte index\nof the `rune` and the second the `rune` itself.",
          "docs_rendered": "\u003cp\u003e\u003ccode\u003erange\u003c/code\u003e on strings iterates over Unicode code\npoints. The first value is the starting byte index\nof the \u003ccode\u003erune\u003c/code\u003e and the second the \u003ccode\u003erune\u003c/code\u003e itself.\u003c/p\u003e\n",
          "code": "\n    for i, c := range \"go\" {\n        fmt.Println(i, c)\n    }\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"k\"\u003erange\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;go\u0026quot;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    for i, c := range \"go\" {\n        fmt.Println(i, c)\n    }\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "",
          "docs_rendered": "",
          "code": "$ go run range.go\nsum: 9\nindex: 1\na -\u003e apple\nb -\u003e banana\nkey: a\nkey: b\n0 103\n1 111",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run range.go\n\u003cspan class=\"go\"\u003esum: 9\u003c/span\u003e\n\u003cspan class=\"go\"\u003eindex: 1\u003c/span\u003e\n\u003cspan class=\"go\"\u003ea -\u0026gt; apple\u003c/span\u003e\n\u003cspan class=\"go\"\u003eb -\u0026gt; banana\u003c/span\u003e\n\u003cspan class=\"go\"\u003ekey: a\u003c/span\u003e\n\u003cspan class=\"go\"\u003ekey: b\u003c/span\u003e\n\u003cspan class=\"go\"\u003e0 103\u003c/span\u003e\n\u003cspan class=\"go\"\u003e1 111\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "functions",
    "Name": "Functions",
    "GoCode": "// _Functions_ are central in Go. We'll learn about\n// functions with a few different examples.\n\npackage main\n\nimport \"fmt\"\n\n// Here's a function that takes two `int`s and returns\n// their sum as an `int`.\nfunc plus(a int, b int) int {\n\n\t// Go requires explicit returns, i.e. it won't\n\t// automatically return the value of the last\n\t// expression.\n\treturn a + b\n}\n\n// When you have multiple consecutive parameters of\n// the same type, you may omit the type name for the\n// like-typed parameters up to the final parameter that\n// declares the type.\nfunc plusPlus(a, b, c int) int {\n\treturn a + b + c\n}\n\nfunc main() {\n\n\t// Call a function just as you'd expect, with\n\t// `name(args)`.\n\tres := plus(1, 2)\n\tfmt.Println(\"1+2 =\", res)\n\n\tres = plusPlus(1, 2, 3)\n\tfmt.Println(\"1+2+3 =\", res)\n}\n",
    "GoCodeHash": "94ade6d23721234a9612c9f77431106308b84953",
    "URLHash": "-o49-dQfGbK",
    "Segs": [
      [
        {
          "docs": "_Functions_ are central in Go. We'll learn about\nfunctions with a few different examples.",
          "docs_rendered": "\u003cp\u003e\u003cem\u003eFunctions\u003c/em\u003e are central in Go. We\u0026rsquo;ll learn about\nfunctions with a few different examples.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import \"fmt\"",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import \"fmt\"\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Here's a function that takes two `int`s and returns\ntheir sum as an `int`.",
          "docs_rendered": "\u003cp\u003eHere\u0026rsquo;s a function that takes two \u003ccode\u003eint\u003c/code\u003es and returns\ntheir sum as an \u003ccode\u003eint\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\nfunc plus(a int, b int) int {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003eplus\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ea\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func plus(a int, b int) int {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Go requires explicit returns, i.e. it won't\nautomatically return the value of the last\nexpression.",
          "docs_rendered": "\u003cp\u003eGo requires explicit returns, i.e. it won\u0026rsquo;t\nautomatically return the value of the last\nexpression.\u003c/p\u003e\n",
          "code": "\n    return a + b\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    return a + b\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "When you have multiple consecutive parameters of\nthe same type, you may omit the type name for the\nlike-typed parameters up to the final parameter that\ndeclares the type.",
          "docs_rendered": "\u003cp\u003eWhen you have multiple consecutive parameters of\nthe same type, you may omit the type name for the\nlike-typed parameters up to the final parameter that\ndeclares the type.\u003c/p\u003e\n",
          "code": "\nfunc plusPlus(a, b, c int) int {\n    return a + b + c\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003eplusPlus\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ec\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003ec\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func plusPlus(a, b, c int) int {\n    return a + b + c\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Call a function just as you'd expect, with\n`name(args)`.",
          "docs_rendered": "\u003cp\u003eCall a function just as you\u0026rsquo;d expect, with\n\u003ccode\u003ename(args)\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n    res := plus(1, 2)\n    fmt.Println(\"1+2 =\", res)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003eres\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eplus\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;1+2 =\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    res := plus(1, 2)\n    fmt.Println(\"1+2 =\", res)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "    res = plusPlus(1, 2, 3)\n    fmt.Println(\"1+2+3 =\", res)\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003eres\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eplusPlus\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;1+2+3 =\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    res = plusPlus(1, 2, 3)\n    fmt.Println(\"1+2+3 =\", res)\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "",
          "docs_rendered": "",
          "code": "$ go run functions.go \n1+2 = 3\n1+2+3 = 6",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run functions.go \n\u003cspan class=\"go\"\u003e1+2 = 3\u003c/span\u003e\n\u003cspan class=\"go\"\u003e1+2+3 = 6\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "There are several other features to Go functions. One is\nmultiple return values, which we'll look at next.",
          "docs_rendered": "\u003cp\u003eThere are several other features to Go functions. One is\nmultiple return values, which we\u0026rsquo;ll look at next.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "multiple-return-values",
    "Name": "Multiple Return Values",
    "GoCode": "// Go has built-in support for _multiple return values_.\n// This feature is used often in idiomatic Go, for example\n// to return both result and error values from a function.\n\npackage main\n\nimport \"fmt\"\n\n// The `(int, int)` in this function signature shows that\n// the function returns 2 `int`s.\nfunc vals() (int, int) {\n\treturn 3, 7\n}\n\nfunc main() {\n\n\t// Here we use the 2 different return values from the\n\t// call with _multiple assignment_.\n\ta, b := vals()\n\tfmt.Println(a)\n\tfmt.Println(b)\n\n\t// If you only want a subset of the returned values,\n\t// use the blank identifier `_`.\n\t_, c := vals()\n\tfmt.Println(c)\n}\n",
    "GoCodeHash": "c6e4f5dd9c55b5d2aaeb7e939c216ec76f042501",
    "URLHash": "vZdUvLB1WbK",
    "Segs": [
      [
        {
          "docs": "Go has built-in support for _multiple return values_.\nThis feature is used often in idiomatic Go, for example\nto return both result and error values from a function.",
          "docs_rendered": "\u003cp\u003eGo has built-in support for \u003cem\u003emultiple return values\u003c/em\u003e.\nThis feature is used often in idiomatic Go, for example\nto return both result and error values from a function.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import \"fmt\"",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import \"fmt\"\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "The `(int, int)` in this function signature shows that\nthe function returns 2 `int`s.",
          "docs_rendered": "\u003cp\u003eThe \u003ccode\u003e(int, int)\u003c/code\u003e in this function signature shows that\nthe function returns 2 \u003ccode\u003eint\u003c/code\u003es.\u003c/p\u003e\n",
          "code": "\nfunc vals() (int, int) {\n    return 3, 7\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003evals\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func vals() (int, int) {\n    return 3, 7\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Here we use the 2 different return values from the\ncall with _multiple assignment_.",
          "docs_rendered": "\u003cp\u003eHere we use the 2 different return values from the\ncall with \u003cem\u003emultiple assignment\u003c/em\u003e.\u003c/p\u003e\n",
          "code": "\n    a, b := vals()\n    fmt.Println(a)\n    fmt.Println(b)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003evals\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    a, b := vals()\n    fmt.Println(a)\n    fmt.Println(b)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "If you only want a subset of the returned values,\nuse the blank identifier `_`.",
          "docs_rendered": "\u003cp\u003eIf you only want a subset of the returned values,\nuse the blank identifier \u003ccode\u003e_\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n    _, c := vals()\n    fmt.Println(c)\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003evals\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    _, c := vals()\n    fmt.Println(c)\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "",
          "docs_rendered": "",
          "code": "$ go run multiple-return-values.go\n3\n7\n7",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run multiple-return-values.go\n\u003cspan class=\"go\"\u003e3\u003c/span\u003e\n\u003cspan class=\"go\"\u003e7\u003c/span\u003e\n\u003cspan class=\"go\"\u003e7\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Accepting a variable number of arguments is another nice\nfeature of Go functions; we'll look at this next.",
          "docs_rendered": "\u003cp\u003eAccepting a variable number of arguments is another nice\nfeature of Go functions; we\u0026rsquo;ll look at this next.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "variadic-functions",
    "Name": "Variadic Functions",
    "GoCode": "// [_Variadic functions_](http://en.wikipedia.org/wiki/Variadic_function)\n// can be called with any number of trailing arguments.\n// For example, `fmt.Println` is a common variadic\n// function.\n\npackage main\n\nimport \"fmt\"\n\n// Here's a function that will take an arbitrary number\n// of `int`s as arguments.\nfunc sum(nums ...int) {\n\tfmt.Print(nums, \" \")\n\ttotal := 0\n\tfor _, num := range nums {\n\t\ttotal += num\n\t}\n\tfmt.Println(total)\n}\n\nfunc main() {\n\n\t// Variadic functions can be called in the usual way\n\t// with individual arguments.\n\tsum(1, 2)\n\tsum(1, 2, 3)\n\n\t// If you already have multiple args in a slice,\n\t// apply them to a variadic function using\n\t// `func(slice...)` like this.\n\tnums := []int{1, 2, 3, 4}\n\tsum(nums...)\n}\n",
    "GoCodeHash": "560aaef6ce8867710f3ef609b1bb2317377a71bf",
    "URLHash": "Ua6kZOMabBp",
    "Segs": [
      [
        {
          "docs": "[_Variadic functions_](http://en.wikipedia.org/wiki/Variadic_function)\ncan be called with any number of trailing arguments.\nFor example, `fmt.Println` is a common variadic\nfunction.",
          "docs_rendered": "\u003cp\u003e\u003ca href=\"http://en.wikipedia.org/wiki/Variadic_function\"\u003e\u003cem\u003eVariadic functions\u003c/em\u003e\u003c/a\u003e\ncan be called with any number of trailing arguments.\nFor example, \u003ccode\u003efmt.Println\u003c/code\u003e is a common variadic\nfunction.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import \"fmt\"",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import \"fmt\"\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Here's a function that will take an arbitrary number\nof `int`s as arguments.",
          "docs_rendered": "\u003cp\u003eHere\u0026rsquo;s a function that will take an arbitrary number\nof \u003ccode\u003eint\u003c/code\u003es as arguments.\u003c/p\u003e\n",
          "code": "\nfunc sum(nums ...int) {\n    fmt.Print(nums, \" \")\n    total := 0\n    for _, num := range nums {\n        total += num\n    }\n    fmt.Println(total)\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enums\u003c/span\u003e \u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot; \u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003etotal\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"k\"\u003erange\u003c/span\u003e \u003cspan class=\"nx\"\u003enums\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003etotal\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etotal\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func sum(nums ...int) {\n    fmt.Print(nums, \" \")\n    total := 0\n    for _, num := range nums {\n        total += num\n    }\n    fmt.Println(total)\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Variadic functions can be called in the usual way\nwith individual arguments.",
          "docs_rendered": "\u003cp\u003eVariadic functions can be called in the usual way\nwith individual arguments.\u003c/p\u003e\n",
          "code": "\n    sum(1, 2)\n    sum(1, 2, 3)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    sum(1, 2)\n    sum(1, 2, 3)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "If you already have multiple args in a slice,\napply them to a variadic function using\n`func(slice...)` like this.",
          "docs_rendered": "\u003cp\u003eIf you already have multiple args in a slice,\napply them to a variadic function using\n\u003ccode\u003efunc(slice...)\u003c/code\u003e like this.\u003c/p\u003e\n",
          "code": "\n    nums := []int{1, 2, 3, 4}\n    sum(nums...)\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003enums\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enums\u003c/span\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    nums := []int{1, 2, 3, 4}\n    sum(nums...)\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "",
          "docs_rendered": "",
          "code": "$ go run variadic-functions.go \n[1 2] 3\n[1 2 3] 6\n[1 2 3 4] 10",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run variadic-functions.go \n\u003cspan class=\"go\"\u003e[1 2] 3\u003c/span\u003e\n\u003cspan class=\"go\"\u003e[1 2 3] 6\u003c/span\u003e\n\u003cspan class=\"go\"\u003e[1 2 3 4] 10\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Another key aspect of functions in Go is their ability\nto form closures, which we'll look at next.",
          "docs_rendered": "\u003cp\u003eAnother key aspect of functions in Go is their ability\nto form closures, which we\u0026rsquo;ll look at next.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "closures",
    "Name": "Closures",
    "GoCode": "// Go supports [_anonymous functions_](http://en.wikipedia.org/wiki/Anonymous_function),\n// which can form \u003ca href=\"http://en.wikipedia.org/wiki/Closure_(computer_science)\"\u003e\u003cem\u003eclosures\u003c/em\u003e\u003c/a\u003e.\n// Anonymous functions are useful when you want to define\n// a function inline without having to name it.\n\npackage main\n\nimport \"fmt\"\n\n// This function `intSeq` returns another function, which\n// we define anonymously in the body of `intSeq`. The\n// returned function _closes over_ the variable `i` to\n// form a closure.\nfunc intSeq() func() int {\n\ti := 0\n\treturn func() int {\n\t\ti++\n\t\treturn i\n\t}\n}\n\nfunc main() {\n\n\t// We call `intSeq`, assigning the result (a function)\n\t// to `nextInt`. This function value captures its\n\t// own `i` value, which will be updated each time\n\t// we call `nextInt`.\n\tnextInt := intSeq()\n\n\t// See the effect of the closure by calling `nextInt`\n\t// a few times.\n\tfmt.Println(nextInt())\n\tfmt.Println(nextInt())\n\tfmt.Println(nextInt())\n\n\t// To confirm that the state is unique to that\n\t// particular function, create and test a new one.\n\tnewInts := intSeq()\n\tfmt.Println(newInts())\n}\n",
    "GoCodeHash": "6713bdbb6de0d7d484422517dd77316c8b9f0a7a",
    "URLHash": "66Lgw9iIIch",
    "Segs": [
      [
        {
          "docs": "Go supports [_anonymous functions_](http://en.wikipedia.org/wiki/Anonymous_function),\nwhich can form \u003ca href=\"http://en.wikipedia.org/wiki/Closure_(computer_science)\"\u003e\u003cem\u003eclosures\u003c/em\u003e\u003c/a\u003e.\nAnonymous functions are useful when you want to define\na function inline without having to name it.",
          "docs_rendered": "\u003cp\u003eGo supports \u003ca href=\"http://en.wikipedia.org/wiki/Anonymous_function\"\u003e\u003cem\u003eanonymous functions\u003c/em\u003e\u003c/a\u003e,\nwhich can form \u003ca href=\"http://en.wikipedia.org/wiki/Closure_(computer_science)\"\u003e\u003cem\u003eclosures\u003c/em\u003e\u003c/a\u003e.\nAnonymous functions are useful when you want to define\na function inline without having to name it.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import \"fmt\"",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import \"fmt\"\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "This function `intSeq` returns another function, which\nwe define anonymously in the body of `intSeq`. The\nreturned function _closes over_ the variable `i` to\nform a closure.",
          "docs_rendered": "\u003cp\u003eThis function \u003ccode\u003eintSeq\u003c/code\u003e returns another function, which\nwe define anonymously in the body of \u003ccode\u003eintSeq\u003c/code\u003e. The\nreturned function \u003cem\u003ecloses over\u003c/em\u003e the variable \u003ccode\u003ei\u003c/code\u003e to\nform a closure.\u003c/p\u003e\n",
          "code": "\nfunc intSeq() func() int {\n    i := 0\n    return func() int {\n        i++\n        return i\n    }\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003eintSeq\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func intSeq() func() int {\n    i := 0\n    return func() int {\n        i++\n        return i\n    }\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "We call `intSeq`, assigning the result (a function)\nto `nextInt`. This function value captures its\nown `i` value, which will be updated each time\nwe call `nextInt`.",
          "docs_rendered": "\u003cp\u003eWe call \u003ccode\u003eintSeq\u003c/code\u003e, assigning the result (a function)\nto \u003ccode\u003enextInt\u003c/code\u003e. This function value captures its\nown \u003ccode\u003ei\u003c/code\u003e value, which will be updated each time\nwe call \u003ccode\u003enextInt\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n    nextInt := intSeq()",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003enextInt\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eintSeq\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    nextInt := intSeq()\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "See the effect of the closure by calling `nextInt`\na few times.",
          "docs_rendered": "\u003cp\u003eSee the effect of the closure by calling \u003ccode\u003enextInt\u003c/code\u003e\na few times.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(nextInt())\n    fmt.Println(nextInt())\n    fmt.Println(nextInt())",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enextInt\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enextInt\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enextInt\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(nextInt())\n    fmt.Println(nextInt())\n    fmt.Println(nextInt())\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "To confirm that the state is unique to that\nparticular function, create and test a new one.",
          "docs_rendered": "\u003cp\u003eTo confirm that the state is unique to that\nparticular function, create and test a new one.\u003c/p\u003e\n",
          "code": "\n    newInts := intSeq()\n    fmt.Println(newInts())\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003enewInts\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eintSeq\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enewInts\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    newInts := intSeq()\n    fmt.Println(newInts())\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "",
          "docs_rendered": "",
          "code": "$ go run closures.go\n1\n2\n3\n1",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run closures.go\n\u003cspan class=\"go\"\u003e1\u003c/span\u003e\n\u003cspan class=\"go\"\u003e2\u003c/span\u003e\n\u003cspan class=\"go\"\u003e3\u003c/span\u003e\n\u003cspan class=\"go\"\u003e1\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "The last feature of functions we'll look at for now is\nrecursion.",
          "docs_rendered": "\u003cp\u003eThe last feature of functions we\u0026rsquo;ll look at for now is\nrecursion.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "recursion",
    "Name": "Recursion",
    "GoCode": "// Go supports\n// \u003ca href=\"http://en.wikipedia.org/wiki/Recursion_(computer_science)\"\u003e\u003cem\u003erecursive functions\u003c/em\u003e\u003c/a\u003e.\n// Here's a classic factorial example.\n\npackage main\n\nimport \"fmt\"\n\n// This `fact` function calls itself until it reaches the\n// base case of `fact(0)`.\nfunc fact(n int) int {\n\tif n == 0 {\n\t\treturn 1\n\t}\n\treturn n * fact(n-1)\n}\n\nfunc main() {\n\tfmt.Println(fact(7))\n}\n",
    "GoCodeHash": "9bfb2f870007082835a3c0efaac9aa1c3bc2c15c",
    "URLHash": "smWim1q9ofu",
    "Segs": [
      [
        {
          "docs": "Go supports\n\u003ca href=\"http://en.wikipedia.org/wiki/Recursion_(computer_science)\"\u003e\u003cem\u003erecursive functions\u003c/em\u003e\u003c/a\u003e.\nHere's a classic factorial example.",
          "docs_rendered": "\u003cp\u003eGo supports\n\u003ca href=\"http://en.wikipedia.org/wiki/Recursion_(computer_science)\"\u003e\u003cem\u003erecursive functions\u003c/em\u003e\u003c/a\u003e.\nHere\u0026rsquo;s a classic factorial example.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import \"fmt\"",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import \"fmt\"\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "This `fact` function calls itself until it reaches the\nbase case of `fact(0)`.",
          "docs_rendered": "\u003cp\u003eThis \u003ccode\u003efact\u003c/code\u003e function calls itself until it reaches the\nbase case of \u003ccode\u003efact(0)\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\nfunc fact(n int) int {\n    if n == 0 {\n        return 1\n    }\n    return n * fact(n-1)\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003efact\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nx\"\u003efact\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func fact(n int) int {\n    if n == 0 {\n        return 1\n    }\n    return n * fact(n-1)\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {\n    fmt.Println(fact(7))\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efact\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n    fmt.Println(fact(7))\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "",
          "docs_rendered": "",
          "code": "$ go run recursion.go \n5040",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run recursion.go \n\u003cspan class=\"go\"\u003e5040\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "pointers",
    "Name": "Pointers",
    "GoCode": "// Go supports \u003cem\u003e\u003ca href=\"http://en.wikipedia.org/wiki/Pointer_(computer_programming)\"\u003epointers\u003c/a\u003e\u003c/em\u003e,\n// allowing you to pass references to values and records\n// within your program.\n\npackage main\n\nimport \"fmt\"\n\n// We'll show how pointers work in contrast to values with\n// 2 functions: `zeroval` and `zeroptr`. `zeroval` has an\n// `int` parameter, so arguments will be passed to it by\n// value. `zeroval` will get a copy of `ival` distinct\n// from the one in the calling function.\nfunc zeroval(ival int) {\n\tival = 0\n}\n\n// `zeroptr` in contrast has an `*int` parameter, meaning\n// that it takes an `int` pointer. The `*iptr` code in the\n// function body then _dereferences_ the pointer from its\n// memory address to the current value at that address.\n// Assigning a value to a dereferenced pointer changes the\n// value at the referenced address.\nfunc zeroptr(iptr *int) {\n\t*iptr = 0\n}\n\nfunc main() {\n\ti := 1\n\tfmt.Println(\"initial:\", i)\n\n\tzeroval(i)\n\tfmt.Println(\"zeroval:\", i)\n\n\t// The `\u0026i` syntax gives the memory address of `i`,\n\t// i.e. a pointer to `i`.\n\tzeroptr(\u0026i)\n\tfmt.Println(\"zeroptr:\", i)\n\n\t// Pointers can be printed too.\n\tfmt.Println(\"pointer:\", \u0026i)\n}\n",
    "GoCodeHash": "c727916063ddc3e99199cd24bfbde37ff301c0b4",
    "URLHash": "oimmXypnAcs",
    "Segs": [
      [
        {
          "docs": "Go supports \u003cem\u003e\u003ca href=\"http://en.wikipedia.org/wiki/Pointer_(computer_programming)\"\u003epointers\u003c/a\u003e\u003c/em\u003e,\nallowing you to pass references to values and records\nwithin your program.",
          "docs_rendered": "\u003cp\u003eGo supports \u003cem\u003e\u003ca href=\"http://en.wikipedia.org/wiki/Pointer_(computer_programming)\"\u003epointers\u003c/a\u003e\u003c/em\u003e,\nallowing you to pass references to values and records\nwithin your program.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import \"fmt\"",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import \"fmt\"\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "We'll show how pointers work in contrast to values with\n2 functions: `zeroval` and `zeroptr`. `zeroval` has an\n`int` parameter, so arguments will be passed to it by\nvalue. `zeroval` will get a copy of `ival` distinct\nfrom the one in the calling function.",
          "docs_rendered": "\u003cp\u003eWe\u0026rsquo;ll show how pointers work in contrast to values with\n2 functions: \u003ccode\u003ezeroval\u003c/code\u003e and \u003ccode\u003ezeroptr\u003c/code\u003e. \u003ccode\u003ezeroval\u003c/code\u003e has an\n\u003ccode\u003eint\u003c/code\u003e parameter, so arguments will be passed to it by\nvalue. \u003ccode\u003ezeroval\u003c/code\u003e will get a copy of \u003ccode\u003eival\u003c/code\u003e distinct\nfrom the one in the calling function.\u003c/p\u003e\n",
          "code": "\nfunc zeroval(ival int) {\n    ival = 0\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003ezeroval\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eival\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eival\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func zeroval(ival int) {\n    ival = 0\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "`zeroptr` in contrast has an `*int` parameter, meaning\nthat it takes an `int` pointer. The `*iptr` code in the\nfunction body then _dereferences_ the pointer from its\nmemory address to the current value at that address.\nAssigning a value to a dereferenced pointer changes the\nvalue at the referenced address.",
          "docs_rendered": "\u003cp\u003e\u003ccode\u003ezeroptr\u003c/code\u003e in contrast has an \u003ccode\u003e*int\u003c/code\u003e parameter, meaning\nthat it takes an \u003ccode\u003eint\u003c/code\u003e pointer. The \u003ccode\u003e*iptr\u003c/code\u003e code in the\nfunction body then \u003cem\u003edereferences\u003c/em\u003e the pointer from its\nmemory address to the current value at that address.\nAssigning a value to a dereferenced pointer changes the\nvalue at the referenced address.\u003c/p\u003e\n",
          "code": "\nfunc zeroptr(iptr *int) {\n    *iptr = 0\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003ezeroptr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eiptr\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003eiptr\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func zeroptr(iptr *int) {\n    *iptr = 0\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {\n    i := 1\n    fmt.Println(\"initial:\", i)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;initial:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n    i := 1\n    fmt.Println(\"initial:\", i)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "    zeroval(i)\n    fmt.Println(\"zeroval:\", i)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ezeroval\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;zeroval:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    zeroval(i)\n    fmt.Println(\"zeroval:\", i)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "The `\u0026i` syntax gives the memory address of `i`,\ni.e. a pointer to `i`.",
          "docs_rendered": "\u003cp\u003eThe \u003ccode\u003e\u0026amp;i\u003c/code\u003e syntax gives the memory address of \u003ccode\u003ei\u003c/code\u003e,\ni.e. a pointer to \u003ccode\u003ei\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n    zeroptr(\u0026i)\n    fmt.Println(\"zeroptr:\", i)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ezeroptr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;zeroptr:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    zeroptr(\u0026i)\n    fmt.Println(\"zeroptr:\", i)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Pointers can be printed too.",
          "docs_rendered": "\u003cp\u003ePointers can be printed too.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(\"pointer:\", \u0026i)\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;pointer:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(\"pointer:\", \u0026i)\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "`zeroval` doesn't change the `i` in `main`, but\n`zeroptr` does because it has a reference to\nthe memory address for that variable.",
          "docs_rendered": "\u003cp\u003e\u003ccode\u003ezeroval\u003c/code\u003e doesn\u0026rsquo;t change the \u003ccode\u003ei\u003c/code\u003e in \u003ccode\u003emain\u003c/code\u003e, but\n\u003ccode\u003ezeroptr\u003c/code\u003e does because it has a reference to\nthe memory address for that variable.\u003c/p\u003e\n",
          "code": "\n$ go run pointers.go\ninitial: 1\nzeroval: 1\nzeroptr: 0\npointer: 0x42131100",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run pointers.go\n\u003cspan class=\"go\"\u003einitial: 1\u003c/span\u003e\n\u003cspan class=\"go\"\u003ezeroval: 1\u003c/span\u003e\n\u003cspan class=\"go\"\u003ezeroptr: 0\u003c/span\u003e\n\u003cspan class=\"go\"\u003epointer: 0x42131100\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "structs",
    "Name": "Structs",
    "GoCode": "// Go's _structs_ are typed collections of fields.\n// They're useful for grouping data together to form\n// records.\n\npackage main\n\nimport \"fmt\"\n\n// This `person` struct type has `name` and `age` fields.\ntype person struct {\n\tname string\n\tage  int\n}\n\n// `newPerson` constructs a new person struct with the given name.\nfunc newPerson(name string) *person {\n\t// You can safely return a pointer to local variable\n\t// as a local variable will survive the scope of the function.\n\tp := person{name: name}\n\tp.age = 42\n\treturn \u0026p\n}\n\nfunc main() {\n\n\t// This syntax creates a new struct.\n\tfmt.Println(person{\"Bob\", 20})\n\n\t// You can name the fields when initializing a struct.\n\tfmt.Println(person{name: \"Alice\", age: 30})\n\n\t// Omitted fields will be zero-valued.\n\tfmt.Println(person{name: \"Fred\"})\n\n\t// An `\u0026` prefix yields a pointer to the struct.\n\tfmt.Println(\u0026person{name: \"Ann\", age: 40})\n\n\t// It's idiomatic to encapsulate new struct creation in constructor functions\n\tfmt.Println(newPerson(\"Jon\"))\n\n\t// Access struct fields with a dot.\n\ts := person{name: \"Sean\", age: 50}\n\tfmt.Println(s.name)\n\n\t// You can also use dots with struct pointers - the\n\t// pointers are automatically dereferenced.\n\tsp := \u0026s\n\tfmt.Println(sp.age)\n\n\t// Structs are mutable.\n\tsp.age = 51\n\tfmt.Println(sp.age)\n}\n",
    "GoCodeHash": "f1dcc357b5e20c3aa3a97df8245efe4aea7940d6",
    "URLHash": "n7jt1x3iw4Z",
    "Segs": [
      [
        {
          "docs": "Go's _structs_ are typed collections of fields.\nThey're useful for grouping data together to form\nrecords.",
          "docs_rendered": "\u003cp\u003eGo\u0026rsquo;s \u003cem\u003estructs\u003c/em\u003e are typed collections of fields.\nThey\u0026rsquo;re useful for grouping data together to form\nrecords.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import \"fmt\"",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import \"fmt\"\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "This `person` struct type has `name` and `age` fields.",
          "docs_rendered": "\u003cp\u003eThis \u003ccode\u003eperson\u003c/code\u003e struct type has \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003eage\u003c/code\u003e fields.\u003c/p\u003e\n",
          "code": "\ntype person struct {\n    name string\n    age  int\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003etype\u003c/span\u003e \u003cspan class=\"nx\"\u003eperson\u003c/span\u003e \u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ename\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eage\u003c/span\u003e  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "type person struct {\n    name string\n    age  int\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "`newPerson` constructs a new person struct with the given name.",
          "docs_rendered": "\u003cp\u003e\u003ccode\u003enewPerson\u003c/code\u003e constructs a new person struct with the given name.\u003c/p\u003e\n",
          "code": "\nfunc newPerson(name string) *person {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003enewPerson\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ename\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003eperson\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func newPerson(name string) *person {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "You can safely return a pointer to local variable\nas a local variable will survive the scope of the function.",
          "docs_rendered": "\u003cp\u003eYou can safely return a pointer to local variable\nas a local variable will survive the scope of the function.\u003c/p\u003e\n",
          "code": "\n    p := person{name: name}\n    p.age = 42\n    return \u0026p\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eperson\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eage\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    p := person{name: name}\n    p.age = 42\n    return \u0026p\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "This syntax creates a new struct.",
          "docs_rendered": "\u003cp\u003eThis syntax creates a new struct.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(person{\"Bob\", 20})",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eperson\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Bob\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e20\u003c/span\u003e\u003cspan class=\"p\"\u003e})\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(person{\"Bob\", 20})\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "You can name the fields when initializing a struct.",
          "docs_rendered": "\u003cp\u003eYou can name the fields when initializing a struct.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(person{name: \"Alice\", age: 30})",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eperson\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;Alice\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eage\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e30\u003c/span\u003e\u003cspan class=\"p\"\u003e})\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(person{name: \"Alice\", age: 30})\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Omitted fields will be zero-valued.",
          "docs_rendered": "\u003cp\u003eOmitted fields will be zero-valued.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(person{name: \"Fred\"})",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eperson\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;Fred\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e})\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(person{name: \"Fred\"})\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "An `\u0026` prefix yields a pointer to the struct.",
          "docs_rendered": "\u003cp\u003eAn \u003ccode\u003e\u0026amp;\u003c/code\u003e prefix yields a pointer to the struct.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(\u0026person{name: \"Ann\", age: 40})",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003eperson\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;Ann\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eage\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e40\u003c/span\u003e\u003cspan class=\"p\"\u003e})\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(\u0026person{name: \"Ann\", age: 40})\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "It's idiomatic to encapsulate new struct creation in constructor functions",
          "docs_rendered": "\u003cp\u003eIt\u0026rsquo;s idiomatic to encapsulate new struct creation in constructor functions\u003c/p\u003e\n",
          "code": "\n    fmt.Println(newPerson(\"Jon\"))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enewPerson\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Jon\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(newPerson(\"Jon\"))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Access struct fields with a dot.",
          "docs_rendered": "\u003cp\u003eAccess struct fields with a dot.\u003c/p\u003e\n",
          "code": "\n    s := person{name: \"Sean\", age: 50}\n    fmt.Println(s.name)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003es\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eperson\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;Sean\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eage\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e50\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    s := person{name: \"Sean\", age: 50}\n    fmt.Println(s.name)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "You can also use dots with struct pointers - the\npointers are automatically dereferenced.",
          "docs_rendered": "\u003cp\u003eYou can also use dots with struct pointers - the\npointers are automatically dereferenced.\u003c/p\u003e\n",
          "code": "\n    sp := \u0026s\n    fmt.Println(sp.age)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003esp\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003es\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eage\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    sp := \u0026s\n    fmt.Println(sp.age)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Structs are mutable.",
          "docs_rendered": "\u003cp\u003eStructs are mutable.\u003c/p\u003e\n",
          "code": "\n    sp.age = 51\n    fmt.Println(sp.age)\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003esp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eage\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e51\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eage\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    sp.age = 51\n    fmt.Println(sp.age)\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "",
          "docs_rendered": "",
          "code": "$ go run structs.go\n{Bob 20}\n{Alice 30}\n{Fred 0}\n\u0026{Ann 40}\n\u0026{Jon 42}\nSean\n50\n51",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run structs.go\n\u003cspan class=\"go\"\u003e{Bob 20}\u003c/span\u003e\n\u003cspan class=\"go\"\u003e{Alice 30}\u003c/span\u003e\n\u003cspan class=\"go\"\u003e{Fred 0}\u003c/span\u003e\n\u003cspan class=\"go\"\u003e\u0026amp;{Ann 40}\u003c/span\u003e\n\u003cspan class=\"go\"\u003e\u0026amp;{Jon 42}\u003c/span\u003e\n\u003cspan class=\"go\"\u003eSean\u003c/span\u003e\n\u003cspan class=\"go\"\u003e50\u003c/span\u003e\n\u003cspan class=\"go\"\u003e51\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "methods",
    "Name": "Methods",
    "GoCode": "// Go supports _methods_ defined on struct types.\n\npackage main\n\nimport \"fmt\"\n\ntype rect struct {\n\twidth, height int\n}\n\n// This `area` method has a _receiver type_ of `*rect`.\nfunc (r *rect) area() int {\n\treturn r.width * r.height\n}\n\n// Methods can be defined for either pointer or value\n// receiver types. Here's an example of a value receiver.\nfunc (r rect) perim() int {\n\treturn 2*r.width + 2*r.height\n}\n\nfunc main() {\n\tr := rect{width: 10, height: 5}\n\n\t// Here we call the 2 methods defined for our struct.\n\tfmt.Println(\"area: \", r.area())\n\tfmt.Println(\"perim:\", r.perim())\n\n\t// Go automatically handles conversion between values\n\t// and pointers for method calls. You may want to use\n\t// a pointer receiver type to avoid copying on method\n\t// calls or to allow the method to mutate the\n\t// receiving struct.\n\trp := \u0026r\n\tfmt.Println(\"area: \", rp.area())\n\tfmt.Println(\"perim:\", rp.perim())\n}\n",
    "GoCodeHash": "8c5af60ad04b3e9baa62a85924f829711abe94d4",
    "URLHash": "4wmDCAydC1e",
    "Segs": [
      [
        {
          "docs": "Go supports _methods_ defined on struct types.",
          "docs_rendered": "\u003cp\u003eGo supports \u003cem\u003emethods\u003c/em\u003e defined on struct types.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import \"fmt\"",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import \"fmt\"\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "type rect struct {\n    width, height int\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003etype\u003c/span\u003e \u003cspan class=\"nx\"\u003erect\u003c/span\u003e \u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ewidth\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eheight\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "type rect struct {\n    width, height int\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "This `area` method has a _receiver type_ of `*rect`.",
          "docs_rendered": "\u003cp\u003eThis \u003ccode\u003earea\u003c/code\u003e method has a \u003cem\u003ereceiver type\u003c/em\u003e of \u003ccode\u003e*rect\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\nfunc (r *rect) area() int {\n    return r.width * r.height\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003erect\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nx\"\u003earea\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ewidth\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nx\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eheight\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func (r *rect) area() int {\n    return r.width * r.height\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Methods can be defined for either pointer or value\nreceiver types. Here's an example of a value receiver.",
          "docs_rendered": "\u003cp\u003eMethods can be defined for either pointer or value\nreceiver types. Here\u0026rsquo;s an example of a value receiver.\u003c/p\u003e\n",
          "code": "\nfunc (r rect) perim() int {\n    return 2*r.width + 2*r.height\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003er\u003c/span\u003e \u003cspan class=\"nx\"\u003erect\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nx\"\u003eperim\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ewidth\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eheight\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func (r rect) perim() int {\n    return 2*r.width + 2*r.height\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {\n    r := rect{width: 10, height: 5}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003erect\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003ewidth\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eheight\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n    r := rect{width: 10, height: 5}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Here we call the 2 methods defined for our struct.",
          "docs_rendered": "\u003cp\u003eHere we call the 2 methods defined for our struct.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(\"area: \", r.area())\n    fmt.Println(\"perim:\", r.perim())",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;area: \u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003earea\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;perim:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eperim\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(\"area: \", r.area())\n    fmt.Println(\"perim:\", r.perim())\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Go automatically handles conversion between values\nand pointers for method calls. You may want to use\na pointer receiver type to avoid copying on method\ncalls or to allow the method to mutate the\nreceiving struct.",
          "docs_rendered": "\u003cp\u003eGo automatically handles conversion between values\nand pointers for method calls. You may want to use\na pointer receiver type to avoid copying on method\ncalls or to allow the method to mutate the\nreceiving struct.\u003c/p\u003e\n",
          "code": "\n    rp := \u0026r\n    fmt.Println(\"area: \", rp.area())\n    fmt.Println(\"perim:\", rp.perim())\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003erp\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003er\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;area: \u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003erp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003earea\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;perim:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003erp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eperim\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    rp := \u0026r\n    fmt.Println(\"area: \", rp.area())\n    fmt.Println(\"perim:\", rp.perim())\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "",
          "docs_rendered": "",
          "code": "$ go run methods.go \narea:  50\nperim: 30\narea:  50\nperim: 30",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run methods.go \n\u003cspan class=\"go\"\u003earea:  50\u003c/span\u003e\n\u003cspan class=\"go\"\u003eperim: 30\u003c/span\u003e\n\u003cspan class=\"go\"\u003earea:  50\u003c/span\u003e\n\u003cspan class=\"go\"\u003eperim: 30\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Next we'll look at Go's mechanism for grouping and\nnaming related sets of methods: interfaces.",
          "docs_rendered": "\u003cp\u003eNext we\u0026rsquo;ll look at Go\u0026rsquo;s mechanism for grouping and\nnaming related sets of methods: interfaces.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "interfaces",
    "Name": "Interfaces",
    "GoCode": "// _Interfaces_ are named collections of method\n// signatures.\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\n// Here's a basic interface for geometric shapes.\ntype geometry interface {\n\tarea() float64\n\tperim() float64\n}\n\n// For our example we'll implement this interface on\n// `rect` and `circle` types.\ntype rect struct {\n\twidth, height float64\n}\ntype circle struct {\n\tradius float64\n}\n\n// To implement an interface in Go, we just need to\n// implement all the methods in the interface. Here we\n// implement `geometry` on `rect`s.\nfunc (r rect) area() float64 {\n\treturn r.width * r.height\n}\nfunc (r rect) perim() float64 {\n\treturn 2*r.width + 2*r.height\n}\n\n// The implementation for `circle`s.\nfunc (c circle) area() float64 {\n\treturn math.Pi * c.radius * c.radius\n}\nfunc (c circle) perim() float64 {\n\treturn 2 * math.Pi * c.radius\n}\n\n// If a variable has an interface type, then we can call\n// methods that are in the named interface. Here's a\n// generic `measure` function taking advantage of this\n// to work on any `geometry`.\nfunc measure(g geometry) {\n\tfmt.Println(g)\n\tfmt.Println(g.area())\n\tfmt.Println(g.perim())\n}\n\nfunc main() {\n\tr := rect{width: 3, height: 4}\n\tc := circle{radius: 5}\n\n\t// The `circle` and `rect` struct types both\n\t// implement the `geometry` interface so we can use\n\t// instances of\n\t// these structs as arguments to `measure`.\n\tmeasure(r)\n\tmeasure(c)\n}\n",
    "GoCodeHash": "d4ea9541521cfee94107ba9331d0dabb1f9f16c1",
    "URLHash": "XJASG4MxBQr",
    "Segs": [
      [
        {
          "docs": "_Interfaces_ are named collections of method\nsignatures.",
          "docs_rendered": "\u003cp\u003e\u003cem\u003eInterfaces\u003c/em\u003e are named collections of method\nsignatures.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"fmt\"\n    \"math\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;math\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"fmt\"\n    \"math\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Here's a basic interface for geometric shapes.",
          "docs_rendered": "\u003cp\u003eHere\u0026rsquo;s a basic interface for geometric shapes.\u003c/p\u003e\n",
          "code": "\ntype geometry interface {\n    area() float64\n    perim() float64\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003etype\u003c/span\u003e \u003cspan class=\"nx\"\u003egeometry\u003c/span\u003e \u003cspan class=\"kd\"\u003einterface\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003earea\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kt\"\u003efloat64\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eperim\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kt\"\u003efloat64\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "type geometry interface {\n    area() float64\n    perim() float64\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "For our example we'll implement this interface on\n`rect` and `circle` types.",
          "docs_rendered": "\u003cp\u003eFor our example we\u0026rsquo;ll implement this interface on\n\u003ccode\u003erect\u003c/code\u003e and \u003ccode\u003ecircle\u003c/code\u003e types.\u003c/p\u003e\n",
          "code": "\ntype rect struct {\n    width, height float64\n}\ntype circle struct {\n    radius float64\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003etype\u003c/span\u003e \u003cspan class=\"nx\"\u003erect\u003c/span\u003e \u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ewidth\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eheight\u003c/span\u003e \u003cspan class=\"kt\"\u003efloat64\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"kd\"\u003etype\u003c/span\u003e \u003cspan class=\"nx\"\u003ecircle\u003c/span\u003e \u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eradius\u003c/span\u003e \u003cspan class=\"kt\"\u003efloat64\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "type rect struct {\n    width, height float64\n}\ntype circle struct {\n    radius float64\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "To implement an interface in Go, we just need to\nimplement all the methods in the interface. Here we\nimplement `geometry` on `rect`s.",
          "docs_rendered": "\u003cp\u003eTo implement an interface in Go, we just need to\nimplement all the methods in the interface. Here we\nimplement \u003ccode\u003egeometry\u003c/code\u003e on \u003ccode\u003erect\u003c/code\u003es.\u003c/p\u003e\n",
          "code": "\nfunc (r rect) area() float64 {\n    return r.width * r.height\n}\nfunc (r rect) perim() float64 {\n    return 2*r.width + 2*r.height\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003er\u003c/span\u003e \u003cspan class=\"nx\"\u003erect\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nx\"\u003earea\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kt\"\u003efloat64\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ewidth\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nx\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eheight\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003er\u003c/span\u003e \u003cspan class=\"nx\"\u003erect\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nx\"\u003eperim\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kt\"\u003efloat64\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ewidth\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eheight\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func (r rect) area() float64 {\n    return r.width * r.height\n}\nfunc (r rect) perim() float64 {\n    return 2*r.width + 2*r.height\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "The implementation for `circle`s.",
          "docs_rendered": "\u003cp\u003eThe implementation for \u003ccode\u003ecircle\u003c/code\u003es.\u003c/p\u003e\n",
          "code": "\nfunc (c circle) area() float64 {\n    return math.Pi * c.radius * c.radius\n}\nfunc (c circle) perim() float64 {\n    return 2 * math.Pi * c.radius\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ec\u003c/span\u003e \u003cspan class=\"nx\"\u003ecircle\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nx\"\u003earea\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kt\"\u003efloat64\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003emath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePi\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nx\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eradius\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nx\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eradius\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ec\u003c/span\u003e \u003cspan class=\"nx\"\u003ecircle\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nx\"\u003eperim\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kt\"\u003efloat64\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nx\"\u003emath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePi\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nx\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eradius\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func (c circle) area() float64 {\n    return math.Pi * c.radius * c.radius\n}\nfunc (c circle) perim() float64 {\n    return 2 * math.Pi * c.radius\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "If a variable has an interface type, then we can call\nmethods that are in the named interface. Here's a\ngeneric `measure` function taking advantage of this\nto work on any `geometry`.",
          "docs_rendered": "\u003cp\u003eIf a variable has an interface type, then we can call\nmethods that are in the named interface. Here\u0026rsquo;s a\ngeneric \u003ccode\u003emeasure\u003c/code\u003e function taking advantage of this\nto work on any \u003ccode\u003egeometry\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\nfunc measure(g geometry) {\n    fmt.Println(g)\n    fmt.Println(g.area())\n    fmt.Println(g.perim())\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emeasure\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eg\u003c/span\u003e \u003cspan class=\"nx\"\u003egeometry\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eg\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003earea\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eperim\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func measure(g geometry) {\n    fmt.Println(g)\n    fmt.Println(g.area())\n    fmt.Println(g.perim())\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {\n    r := rect{width: 3, height: 4}\n    c := circle{radius: 5}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003erect\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003ewidth\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eheight\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003ecircle\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003eradius\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n    r := rect{width: 3, height: 4}\n    c := circle{radius: 5}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "The `circle` and `rect` struct types both\nimplement the `geometry` interface so we can use\ninstances of\nthese structs as arguments to `measure`.",
          "docs_rendered": "\u003cp\u003eThe \u003ccode\u003ecircle\u003c/code\u003e and \u003ccode\u003erect\u003c/code\u003e struct types both\nimplement the \u003ccode\u003egeometry\u003c/code\u003e interface so we can use\ninstances of\nthese structs as arguments to \u003ccode\u003emeasure\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n    measure(r)\n    measure(c)\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003emeasure\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003emeasure\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    measure(r)\n    measure(c)\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "",
          "docs_rendered": "",
          "code": "$ go run interfaces.go\n{3 4}\n12\n14\n{5}\n78.53981633974483\n31.41592653589793",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run interfaces.go\n\u003cspan class=\"go\"\u003e{3 4}\u003c/span\u003e\n\u003cspan class=\"go\"\u003e12\u003c/span\u003e\n\u003cspan class=\"go\"\u003e14\u003c/span\u003e\n\u003cspan class=\"go\"\u003e{5}\u003c/span\u003e\n\u003cspan class=\"go\"\u003e78.53981633974483\u003c/span\u003e\n\u003cspan class=\"go\"\u003e31.41592653589793\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "To learn more about Go's interfaces, check out this\n[great blog post](http://jordanorelli.tumblr.com/post/32665860244/how-to-use-interfaces-in-go).",
          "docs_rendered": "\u003cp\u003eTo learn more about Go\u0026rsquo;s interfaces, check out this\n\u003ca href=\"http://jordanorelli.tumblr.com/post/32665860244/how-to-use-interfaces-in-go\"\u003egreat blog post\u003c/a\u003e.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "errors",
    "Name": "Errors",
    "GoCode": "// In Go it's idiomatic to communicate errors via an\n// explicit, separate return value. This contrasts with\n// the exceptions used in languages like Java and Ruby and\n// the overloaded single result / error value sometimes\n// used in C. Go's approach makes it easy to see which\n// functions return errors and to handle them using the\n// same language constructs employed for any other,\n// non-error tasks.\n\npackage main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n)\n\n// By convention, errors are the last return value and\n// have type `error`, a built-in interface.\nfunc f1(arg int) (int, error) {\n\tif arg == 42 {\n\n\t\t// `errors.New` constructs a basic `error` value\n\t\t// with the given error message.\n\t\treturn -1, errors.New(\"can't work with 42\")\n\n\t}\n\n\t// A `nil` value in the error position indicates that\n\t// there was no error.\n\treturn arg + 3, nil\n}\n\n// It's possible to use custom types as `error`s by\n// implementing the `Error()` method on them. Here's a\n// variant on the example above that uses a custom type\n// to explicitly represent an argument error.\ntype argError struct {\n\targ  int\n\tprob string\n}\n\nfunc (e *argError) Error() string {\n\treturn fmt.Sprintf(\"%d - %s\", e.arg, e.prob)\n}\n\nfunc f2(arg int) (int, error) {\n\tif arg == 42 {\n\n\t\t// In this case we use `\u0026argError` syntax to build\n\t\t// a new struct, supplying values for the two\n\t\t// fields `arg` and `prob`.\n\t\treturn -1, \u0026argError{arg, \"can't work with it\"}\n\t}\n\treturn arg + 3, nil\n}\n\nfunc main() {\n\n\t// The two loops below test out each of our\n\t// error-returning functions. Note that the use of an\n\t// inline error check on the `if` line is a common\n\t// idiom in Go code.\n\tfor _, i := range []int{7, 42} {\n\t\tif r, e := f1(i); e != nil {\n\t\t\tfmt.Println(\"f1 failed:\", e)\n\t\t} else {\n\t\t\tfmt.Println(\"f1 worked:\", r)\n\t\t}\n\t}\n\tfor _, i := range []int{7, 42} {\n\t\tif r, e := f2(i); e != nil {\n\t\t\tfmt.Println(\"f2 failed:\", e)\n\t\t} else {\n\t\t\tfmt.Println(\"f2 worked:\", r)\n\t\t}\n\t}\n\n\t// If you want to programmatically use the data in\n\t// a custom error, you'll need to get the error as an\n\t// instance of the custom error type via type\n\t// assertion.\n\t_, e := f2(42)\n\tif ae, ok := e.(*argError); ok {\n\t\tfmt.Println(ae.arg)\n\t\tfmt.Println(ae.prob)\n\t}\n}\n",
    "GoCodeHash": "00affa44cc98f14c2b10934a4187c9445fac0fe6",
    "URLHash": "NiJOpCPO3L0",
    "Segs": [
      [
        {
          "docs": "In Go it's idiomatic to communicate errors via an\nexplicit, separate return value. This contrasts with\nthe exceptions used in languages like Java and Ruby and\nthe overloaded single result / error value sometimes\nused in C. Go's approach makes it easy to see which\nfunctions return errors and to handle them using the\nsame language constructs employed for any other,\nnon-error tasks.",
          "docs_rendered": "\u003cp\u003eIn Go it\u0026rsquo;s idiomatic to communicate errors via an\nexplicit, separate return value. This contrasts with\nthe exceptions used in languages like Java and Ruby and\nthe overloaded single result / error value sometimes\nused in C. Go\u0026rsquo;s approach makes it easy to see which\nfunctions return errors and to handle them using the\nsame language constructs employed for any other,\nnon-error tasks.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"errors\"\n    \"fmt\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;errors\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"errors\"\n    \"fmt\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "By convention, errors are the last return value and\nhave type `error`, a built-in interface.",
          "docs_rendered": "\u003cp\u003eBy convention, errors are the last return value and\nhave type \u003ccode\u003eerror\u003c/code\u003e, a built-in interface.\u003c/p\u003e\n",
          "code": "\nfunc f1(arg int) (int, error) {\n    if arg == 42 {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003ef1\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003earg\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003earg\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func f1(arg int) (int, error) {\n    if arg == 42 {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "`errors.New` constructs a basic `error` value\nwith the given error message.",
          "docs_rendered": "\u003cp\u003e\u003ccode\u003eerrors.New\u003c/code\u003e constructs a basic \u003ccode\u003eerror\u003c/code\u003e value\nwith the given error message.\u003c/p\u003e\n",
          "code": "\n        return -1, errors.New(\"can't work with 42\")",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerrors\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eNew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;can\u0026#39;t work with 42\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "        return -1, errors.New(\"can't work with 42\")\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "    }",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    }\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "A `nil` value in the error position indicates that\nthere was no error.",
          "docs_rendered": "\u003cp\u003eA \u003ccode\u003enil\u003c/code\u003e value in the error position indicates that\nthere was no error.\u003c/p\u003e\n",
          "code": "\n    return arg + 3, nil\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003earg\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    return arg + 3, nil\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "It's possible to use custom types as `error`s by\nimplementing the `Error()` method on them. Here's a\nvariant on the example above that uses a custom type\nto explicitly represent an argument error.",
          "docs_rendered": "\u003cp\u003eIt\u0026rsquo;s possible to use custom types as \u003ccode\u003eerror\u003c/code\u003es by\nimplementing the \u003ccode\u003eError()\u003c/code\u003e method on them. Here\u0026rsquo;s a\nvariant on the example above that uses a custom type\nto explicitly represent an argument error.\u003c/p\u003e\n",
          "code": "\ntype argError struct {\n    arg  int\n    prob string\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003etype\u003c/span\u003e \u003cspan class=\"nx\"\u003eargError\u003c/span\u003e \u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003earg\u003c/span\u003e  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eprob\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "type argError struct {\n    arg  int\n    prob string\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func (e *argError) Error() string {\n    return fmt.Sprintf(\"%d - %s\", e.arg, e.prob)\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003eargError\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nx\"\u003eError\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;%d - %s\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003earg\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eprob\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func (e *argError) Error() string {\n    return fmt.Sprintf(\"%d - %s\", e.arg, e.prob)\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func f2(arg int) (int, error) {\n    if arg == 42 {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003ef2\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003earg\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003earg\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func f2(arg int) (int, error) {\n    if arg == 42 {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "In this case we use `\u0026argError` syntax to build\na new struct, supplying values for the two\nfields `arg` and `prob`.",
          "docs_rendered": "\u003cp\u003eIn this case we use \u003ccode\u003e\u0026amp;argError\u003c/code\u003e syntax to build\na new struct, supplying values for the two\nfields \u003ccode\u003earg\u003c/code\u003e and \u003ccode\u003eprob\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n        return -1, \u0026argError{arg, \"can't work with it\"}\n    }\n    return arg + 3, nil\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003eargError\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003earg\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;can\u0026#39;t work with it\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003earg\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "        return -1, \u0026argError{arg, \"can't work with it\"}\n    }\n    return arg + 3, nil\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "The two loops below test out each of our\nerror-returning functions. Note that the use of an\ninline error check on the `if` line is a common\nidiom in Go code.",
          "docs_rendered": "\u003cp\u003eThe two loops below test out each of our\nerror-returning functions. Note that the use of an\ninline error check on the \u003ccode\u003eif\u003c/code\u003e line is a common\nidiom in Go code.\u003c/p\u003e\n",
          "code": "\n    for _, i := range []int{7, 42} {\n        if r, e := f1(i); e != nil {\n            fmt.Println(\"f1 failed:\", e)\n        } else {\n            fmt.Println(\"f1 worked:\", r)\n        }\n    }\n    for _, i := range []int{7, 42} {\n        if r, e := f2(i); e != nil {\n            fmt.Println(\"f2 failed:\", e)\n        } else {\n            fmt.Println(\"f2 worked:\", r)\n        }\n    }",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"k\"\u003erange\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003ef1\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"nx\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;f1 failed:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;f1 worked:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"k\"\u003erange\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003ef2\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"nx\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;f2 failed:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;f2 worked:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    for _, i := range []int{7, 42} {\n        if r, e := f1(i); e != nil {\n            fmt.Println(\"f1 failed:\", e)\n        } else {\n            fmt.Println(\"f1 worked:\", r)\n        }\n    }\n    for _, i := range []int{7, 42} {\n        if r, e := f2(i); e != nil {\n            fmt.Println(\"f2 failed:\", e)\n        } else {\n            fmt.Println(\"f2 worked:\", r)\n        }\n    }\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "If you want to programmatically use the data in\na custom error, you'll need to get the error as an\ninstance of the custom error type via type\nassertion.",
          "docs_rendered": "\u003cp\u003eIf you want to programmatically use the data in\na custom error, you\u0026rsquo;ll need to get the error as an\ninstance of the custom error type via type\nassertion.\u003c/p\u003e\n",
          "code": "\n    _, e := f2(42)\n    if ae, ok := e.(*argError); ok {\n        fmt.Println(ae.arg)\n        fmt.Println(ae.prob)\n    }\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003ef2\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003eae\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eok\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e.(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003eargError\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"nx\"\u003eok\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eae\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003earg\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eae\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eprob\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    _, e := f2(42)\n    if ae, ok := e.(*argError); ok {\n        fmt.Println(ae.arg)\n        fmt.Println(ae.prob)\n    }\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "",
          "docs_rendered": "",
          "code": "$ go run errors.go\nf1 worked: 10\nf1 failed: can't work with 42\nf2 worked: 10\nf2 failed: 42 - can't work with it\n42\ncan't work with it",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run errors.go\n\u003cspan class=\"go\"\u003ef1 worked: 10\u003c/span\u003e\n\u003cspan class=\"go\"\u003ef1 failed: can\u0026#39;t work with 42\u003c/span\u003e\n\u003cspan class=\"go\"\u003ef2 worked: 10\u003c/span\u003e\n\u003cspan class=\"go\"\u003ef2 failed: 42 - can\u0026#39;t work with it\u003c/span\u003e\n\u003cspan class=\"go\"\u003e42\u003c/span\u003e\n\u003cspan class=\"go\"\u003ecan\u0026#39;t work with it\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "See this [great post](http://blog.golang.org/2011/07/error-handling-and-go.html)\non the Go blog for more on error handling.",
          "docs_rendered": "\u003cp\u003eSee this \u003ca href=\"http://blog.golang.org/2011/07/error-handling-and-go.html\"\u003egreat post\u003c/a\u003e\non the Go blog for more on error handling.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "goroutines",
    "Name": "Goroutines",
    "GoCode": "// A _goroutine_ is a lightweight thread of execution.\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc f(from string) {\n\tfor i := 0; i \u003c 3; i++ {\n\t\tfmt.Println(from, \":\", i)\n\t}\n}\n\nfunc main() {\n\n\t// Suppose we have a function call `f(s)`. Here's how\n\t// we'd call that in the usual way, running it\n\t// synchronously.\n\tf(\"direct\")\n\n\t// To invoke this function in a goroutine, use\n\t// `go f(s)`. This new goroutine will execute\n\t// concurrently with the calling one.\n\tgo f(\"goroutine\")\n\n\t// You can also start a goroutine for an anonymous\n\t// function call.\n\tgo func(msg string) {\n\t\tfmt.Println(msg)\n\t}(\"going\")\n\n\t// Our two function calls are running asynchronously in\n\t// separate goroutines now. Wait for them to finish\n\t// (for a more robust approach, use a [WaitGroup](waitgroups)).\n\ttime.Sleep(time.Second)\n\tfmt.Println(\"done\")\n}\n",
    "GoCodeHash": "08aa2b9e426724e07ec83162eb6892648ccc7fd5",
    "URLHash": "I7scqRijEJt",
    "Segs": [
      [
        {
          "docs": "A _goroutine_ is a lightweight thread of execution.",
          "docs_rendered": "\u003cp\u003eA \u003cem\u003egoroutine\u003c/em\u003e is a lightweight thread of execution.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"fmt\"\n    \"time\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;time\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"fmt\"\n    \"time\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func f(from string) {\n    for i := 0; i \u003c 3; i++ {\n        fmt.Println(from, \":\", i)\n    }\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func f(from string) {\n    for i := 0; i \u003c 3; i++ {\n        fmt.Println(from, \":\", i)\n    }\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Suppose we have a function call `f(s)`. Here's how\nwe'd call that in the usual way, running it\nsynchronously.",
          "docs_rendered": "\u003cp\u003eSuppose we have a function call \u003ccode\u003ef(s)\u003c/code\u003e. Here\u0026rsquo;s how\nwe\u0026rsquo;d call that in the usual way, running it\nsynchronously.\u003c/p\u003e\n",
          "code": "\n    f(\"direct\")",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;direct\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    f(\"direct\")\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "To invoke this function in a goroutine, use\n`go f(s)`. This new goroutine will execute\nconcurrently with the calling one.",
          "docs_rendered": "\u003cp\u003eTo invoke this function in a goroutine, use\n\u003ccode\u003ego f(s)\u003c/code\u003e. This new goroutine will execute\nconcurrently with the calling one.\u003c/p\u003e\n",
          "code": "\n    go f(\"goroutine\")",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"nx\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;goroutine\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    go f(\"goroutine\")\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "You can also start a goroutine for an anonymous\nfunction call.",
          "docs_rendered": "\u003cp\u003eYou can also start a goroutine for an anonymous\nfunction call.\u003c/p\u003e\n",
          "code": "\n    go func(msg string) {\n        fmt.Println(msg)\n    }(\"going\")",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003emsg\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;going\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    go func(msg string) {\n        fmt.Println(msg)\n    }(\"going\")\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Our two function calls are running asynchronously in\nseparate goroutines now. Wait for them to finish\n(for a more robust approach, use a [WaitGroup](waitgroups)).",
          "docs_rendered": "\u003cp\u003eOur two function calls are running asynchronously in\nseparate goroutines now. Wait for them to finish\n(for a more robust approach, use a \u003ca href=\"waitgroups\"\u003eWaitGroup\u003c/a\u003e).\u003c/p\u003e\n",
          "code": "\n    time.Sleep(time.Second)\n    fmt.Println(\"done\")\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSleep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSecond\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;done\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    time.Sleep(time.Second)\n    fmt.Println(\"done\")\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "When we run this program, we see the output of the\nblocking call first, then the interleaved output of the\ntwo goroutines. This interleaving reflects the\ngoroutines being run concurrently by the Go runtime.",
          "docs_rendered": "\u003cp\u003eWhen we run this program, we see the output of the\nblocking call first, then the interleaved output of the\ntwo goroutines. This interleaving reflects the\ngoroutines being run concurrently by the Go runtime.\u003c/p\u003e\n",
          "code": "\n$ go run goroutines.go\ndirect : 0\ndirect : 1\ndirect : 2\ngoroutine : 0\ngoing\ngoroutine : 1\ngoroutine : 2\ndone",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run goroutines.go\n\u003cspan class=\"go\"\u003edirect : 0\u003c/span\u003e\n\u003cspan class=\"go\"\u003edirect : 1\u003c/span\u003e\n\u003cspan class=\"go\"\u003edirect : 2\u003c/span\u003e\n\u003cspan class=\"go\"\u003egoroutine : 0\u003c/span\u003e\n\u003cspan class=\"go\"\u003egoing\u003c/span\u003e\n\u003cspan class=\"go\"\u003egoroutine : 1\u003c/span\u003e\n\u003cspan class=\"go\"\u003egoroutine : 2\u003c/span\u003e\n\u003cspan class=\"go\"\u003edone\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Next we'll look at a complement to goroutines in\nconcurrent Go programs: channels.",
          "docs_rendered": "\u003cp\u003eNext we\u0026rsquo;ll look at a complement to goroutines in\nconcurrent Go programs: channels.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "channels",
    "Name": "Channels",
    "GoCode": "// _Channels_ are the pipes that connect concurrent\n// goroutines. You can send values into channels from one\n// goroutine and receive those values into another\n// goroutine.\n\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\n\t// Create a new channel with `make(chan val-type)`.\n\t// Channels are typed by the values they convey.\n\tmessages := make(chan string)\n\n\t// _Send_ a value into a channel using the `channel \u003c-`\n\t// syntax. Here we send `\"ping\"`  to the `messages`\n\t// channel we made above, from a new goroutine.\n\tgo func() { messages \u003c- \"ping\" }()\n\n\t// The `\u003c-channel` syntax _receives_ a value from the\n\t// channel. Here we'll receive the `\"ping\"` message\n\t// we sent above and print it out.\n\tmsg := \u003c-messages\n\tfmt.Println(msg)\n}\n",
    "GoCodeHash": "4fa3a8956f7f1ded57e8dc72827329aef8497e18",
    "URLHash": "MaLY7AiAkHM",
    "Segs": [
      [
        {
          "docs": "_Channels_ are the pipes that connect concurrent\ngoroutines. You can send values into channels from one\ngoroutine and receive those values into another\ngoroutine.",
          "docs_rendered": "\u003cp\u003e\u003cem\u003eChannels\u003c/em\u003e are the pipes that connect concurrent\ngoroutines. You can send values into channels from one\ngoroutine and receive those values into another\ngoroutine.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import \"fmt\"",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import \"fmt\"\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Create a new channel with `make(chan val-type)`.\nChannels are typed by the values they convey.",
          "docs_rendered": "\u003cp\u003eCreate a new channel with \u003ccode\u003emake(chan val-type)\u003c/code\u003e.\nChannels are typed by the values they convey.\u003c/p\u003e\n",
          "code": "\n    messages := make(chan string)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003emessages\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003echan\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    messages := make(chan string)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "_Send_ a value into a channel using the `channel \u003c-`\nsyntax. Here we send `\"ping\"`  to the `messages`\nchannel we made above, from a new goroutine.",
          "docs_rendered": "\u003cp\u003e\u003cem\u003eSend\u003c/em\u003e a value into a channel using the \u003ccode\u003echannel \u0026lt;-\u003c/code\u003e\nsyntax. Here we send \u003ccode\u003e\u0026quot;ping\u0026quot;\u003c/code\u003e  to the \u003ccode\u003emessages\u003c/code\u003e\nchannel we made above, from a new goroutine.\u003c/p\u003e\n",
          "code": "\n    go func() { messages \u003c- \"ping\" }()",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nx\"\u003emessages\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;ping\u0026quot;\u003c/span\u003e \u003cspan class=\"p\"\u003e}()\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    go func() { messages \u003c- \"ping\" }()\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "The `\u003c-channel` syntax _receives_ a value from the\nchannel. Here we'll receive the `\"ping\"` message\nwe sent above and print it out.",
          "docs_rendered": "\u003cp\u003eThe \u003ccode\u003e\u0026lt;-channel\u003c/code\u003e syntax \u003cem\u003ereceives\u003c/em\u003e a value from the\nchannel. Here we\u0026rsquo;ll receive the \u003ccode\u003e\u0026quot;ping\u0026quot;\u003c/code\u003e message\nwe sent above and print it out.\u003c/p\u003e\n",
          "code": "\n    msg := \u003c-messages\n    fmt.Println(msg)\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003emsg\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan class=\"nx\"\u003emessages\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    msg := \u003c-messages\n    fmt.Println(msg)\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "When we run the program the `\"ping\"` message is\nsuccessfully passed from one goroutine to another via\nour channel.",
          "docs_rendered": "\u003cp\u003eWhen we run the program the \u003ccode\u003e\u0026quot;ping\u0026quot;\u003c/code\u003e message is\nsuccessfully passed from one goroutine to another via\nour channel.\u003c/p\u003e\n",
          "code": "\n$ go run channels.go \nping",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run channels.go \n\u003cspan class=\"go\"\u003eping\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "By default sends and receives block until both the\nsender and receiver are ready. This property allowed\nus to wait at the end of our program for the `\"ping\"`\nmessage without having to use any other synchronization.",
          "docs_rendered": "\u003cp\u003eBy default sends and receives block until both the\nsender and receiver are ready. This property allowed\nus to wait at the end of our program for the \u003ccode\u003e\u0026quot;ping\u0026quot;\u003c/code\u003e\nmessage without having to use any other synchronization.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "channel-buffering",
    "Name": "Channel Buffering",
    "GoCode": "// By default channels are _unbuffered_, meaning that they\n// will only accept sends (`chan \u003c-`) if there is a\n// corresponding receive (`\u003c- chan`) ready to receive the\n// sent value. _Buffered channels_ accept a limited\n// number of  values without a corresponding receiver for\n// those values.\n\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\n\t// Here we `make` a channel of strings buffering up to\n\t// 2 values.\n\tmessages := make(chan string, 2)\n\n\t// Because this channel is buffered, we can send these\n\t// values into the channel without a corresponding\n\t// concurrent receive.\n\tmessages \u003c- \"buffered\"\n\tmessages \u003c- \"channel\"\n\n\t// Later we can receive these two values as usual.\n\tfmt.Println(\u003c-messages)\n\tfmt.Println(\u003c-messages)\n}\n",
    "GoCodeHash": "558f4f1140a52e1804636f5720a10de0b37ebddb",
    "URLHash": "3BRCdRnRszb",
    "Segs": [
      [
        {
          "docs": "By default channels are _unbuffered_, meaning that they\nwill only accept sends (`chan \u003c-`) if there is a\ncorresponding receive (`\u003c- chan`) ready to receive the\nsent value. _Buffered channels_ accept a limited\nnumber of  values without a corresponding receiver for\nthose values.",
          "docs_rendered": "\u003cp\u003eBy default channels are \u003cem\u003eunbuffered\u003c/em\u003e, meaning that they\nwill only accept sends (\u003ccode\u003echan \u0026lt;-\u003c/code\u003e) if there is a\ncorresponding receive (\u003ccode\u003e\u0026lt;- chan\u003c/code\u003e) ready to receive the\nsent value. \u003cem\u003eBuffered channels\u003c/em\u003e accept a limited\nnumber of  values without a corresponding receiver for\nthose values.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import \"fmt\"",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import \"fmt\"\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Here we `make` a channel of strings buffering up to\n2 values.",
          "docs_rendered": "\u003cp\u003eHere we \u003ccode\u003emake\u003c/code\u003e a channel of strings buffering up to\n2 values.\u003c/p\u003e\n",
          "code": "\n    messages := make(chan string, 2)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003emessages\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003echan\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    messages := make(chan string, 2)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Because this channel is buffered, we can send these\nvalues into the channel without a corresponding\nconcurrent receive.",
          "docs_rendered": "\u003cp\u003eBecause this channel is buffered, we can send these\nvalues into the channel without a corresponding\nconcurrent receive.\u003c/p\u003e\n",
          "code": "\n    messages \u003c- \"buffered\"\n    messages \u003c- \"channel\"",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003emessages\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;buffered\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003emessages\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;channel\u0026quot;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    messages \u003c- \"buffered\"\n    messages \u003c- \"channel\"\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Later we can receive these two values as usual.",
          "docs_rendered": "\u003cp\u003eLater we can receive these two values as usual.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(\u003c-messages)\n    fmt.Println(\u003c-messages)\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan class=\"nx\"\u003emessages\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan class=\"nx\"\u003emessages\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(\u003c-messages)\n    fmt.Println(\u003c-messages)\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "",
          "docs_rendered": "",
          "code": "$ go run channel-buffering.go \nbuffered\nchannel",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run channel-buffering.go \n\u003cspan class=\"go\"\u003ebuffered\u003c/span\u003e\n\u003cspan class=\"go\"\u003echannel\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "channel-synchronization",
    "Name": "Channel Synchronization",
    "GoCode": "// We can use channels to synchronize execution\n// across goroutines. Here's an example of using a\n// blocking receive to wait for a goroutine to finish.\n// When waiting for multiple goroutines to finish,\n// you may prefer to use a [WaitGroup](waitgroups).\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\n// This is the function we'll run in a goroutine. The\n// `done` channel will be used to notify another\n// goroutine that this function's work is done.\nfunc worker(done chan bool) {\n\tfmt.Print(\"working...\")\n\ttime.Sleep(time.Second)\n\tfmt.Println(\"done\")\n\n\t// Send a value to notify that we're done.\n\tdone \u003c- true\n}\n\nfunc main() {\n\n\t// Start a worker goroutine, giving it the channel to\n\t// notify on.\n\tdone := make(chan bool, 1)\n\tgo worker(done)\n\n\t// Block until we receive a notification from the\n\t// worker on the channel.\n\t\u003c-done\n}\n",
    "GoCodeHash": "aa83d53fdee417727ec9a7cd90172d34c15a28c2",
    "URLHash": "Nw-1DzIGk5f",
    "Segs": [
      [
        {
          "docs": "We can use channels to synchronize execution\nacross goroutines. Here's an example of using a\nblocking receive to wait for a goroutine to finish.\nWhen waiting for multiple goroutines to finish,\nyou may prefer to use a [WaitGroup](waitgroups).",
          "docs_rendered": "\u003cp\u003eWe can use channels to synchronize execution\nacross goroutines. Here\u0026rsquo;s an example of using a\nblocking receive to wait for a goroutine to finish.\nWhen waiting for multiple goroutines to finish,\nyou may prefer to use a \u003ca href=\"waitgroups\"\u003eWaitGroup\u003c/a\u003e.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"fmt\"\n    \"time\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;time\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"fmt\"\n    \"time\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "This is the function we'll run in a goroutine. The\n`done` channel will be used to notify another\ngoroutine that this function's work is done.",
          "docs_rendered": "\u003cp\u003eThis is the function we\u0026rsquo;ll run in a goroutine. The\n\u003ccode\u003edone\u003c/code\u003e channel will be used to notify another\ngoroutine that this function\u0026rsquo;s work is done.\u003c/p\u003e\n",
          "code": "\nfunc worker(done chan bool) {\n    fmt.Print(\"working...\")\n    time.Sleep(time.Second)\n    fmt.Println(\"done\")",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003eworker\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003edone\u003c/span\u003e \u003cspan class=\"kd\"\u003echan\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;working...\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSleep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSecond\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;done\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func worker(done chan bool) {\n    fmt.Print(\"working...\")\n    time.Sleep(time.Second)\n    fmt.Println(\"done\")\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Send a value to notify that we're done.",
          "docs_rendered": "\u003cp\u003eSend a value to notify that we\u0026rsquo;re done.\u003c/p\u003e\n",
          "code": "\n    done \u003c- true\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003edone\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    done \u003c- true\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Start a worker goroutine, giving it the channel to\nnotify on.",
          "docs_rendered": "\u003cp\u003eStart a worker goroutine, giving it the channel to\nnotify on.\u003c/p\u003e\n",
          "code": "\n    done := make(chan bool, 1)\n    go worker(done)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003edone\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003echan\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"nx\"\u003eworker\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003edone\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    done := make(chan bool, 1)\n    go worker(done)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Block until we receive a notification from the\nworker on the channel.",
          "docs_rendered": "\u003cp\u003eBlock until we receive a notification from the\nworker on the channel.\u003c/p\u003e\n",
          "code": "\n    \u003c-done\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan class=\"nx\"\u003edone\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    \u003c-done\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "",
          "docs_rendered": "",
          "code": "$ go run channel-synchronization.go      \nworking...done                  ",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run channel-synchronization.go      \n\u003cspan class=\"go\"\u003eworking...done                  \u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "If you removed the `\u003c- done` line from this program, the\nprogram would exit before the `worker` even\nstarted.",
          "docs_rendered": "\u003cp\u003eIf you removed the \u003ccode\u003e\u0026lt;- done\u003c/code\u003e line from this program, the\nprogram would exit before the \u003ccode\u003eworker\u003c/code\u003e even\nstarted.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "channel-directions",
    "Name": "Channel Directions",
    "GoCode": "// When using channels as function parameters, you can\n// specify if a channel is meant to only send or receive\n// values. This specificity increases the type-safety of\n// the program.\n\npackage main\n\nimport \"fmt\"\n\n// This `ping` function only accepts a channel for sending\n// values. It would be a compile-time error to try to\n// receive on this channel.\nfunc ping(pings chan\u003c- string, msg string) {\n\tpings \u003c- msg\n}\n\n// The `pong` function accepts one channel for receives\n// (`pings`) and a second for sends (`pongs`).\nfunc pong(pings \u003c-chan string, pongs chan\u003c- string) {\n\tmsg := \u003c-pings\n\tpongs \u003c- msg\n}\n\nfunc main() {\n\tpings := make(chan string, 1)\n\tpongs := make(chan string, 1)\n\tping(pings, \"passed message\")\n\tpong(pings, pongs)\n\tfmt.Println(\u003c-pongs)\n}\n",
    "GoCodeHash": "d1b1580f72c3c101ea46480e6c2361f4f96b049a",
    "URLHash": "mjNJDHwUH4R",
    "Segs": [
      [
        {
          "docs": "When using channels as function parameters, you can\nspecify if a channel is meant to only send or receive\nvalues. This specificity increases the type-safety of\nthe program.",
          "docs_rendered": "\u003cp\u003eWhen using channels as function parameters, you can\nspecify if a channel is meant to only send or receive\nvalues. This specificity increases the type-safety of\nthe program.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import \"fmt\"",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import \"fmt\"\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "This `ping` function only accepts a channel for sending\nvalues. It would be a compile-time error to try to\nreceive on this channel.",
          "docs_rendered": "\u003cp\u003eThis \u003ccode\u003eping\u003c/code\u003e function only accepts a channel for sending\nvalues. It would be a compile-time error to try to\nreceive on this channel.\u003c/p\u003e\n",
          "code": "\nfunc ping(pings chan\u003c- string, msg string) {\n    pings \u003c- msg\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003eping\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003epings\u003c/span\u003e \u003cspan class=\"kd\"\u003echan\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003emsg\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003epings\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"nx\"\u003emsg\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func ping(pings chan\u003c- string, msg string) {\n    pings \u003c- msg\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "The `pong` function accepts one channel for receives\n(`pings`) and a second for sends (`pongs`).",
          "docs_rendered": "\u003cp\u003eThe \u003ccode\u003epong\u003c/code\u003e function accepts one channel for receives\n(\u003ccode\u003epings\u003c/code\u003e) and a second for sends (\u003ccode\u003epongs\u003c/code\u003e).\u003c/p\u003e\n",
          "code": "\nfunc pong(pings \u003c-chan string, pongs chan\u003c- string) {\n    msg := \u003c-pings\n    pongs \u003c- msg\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003epong\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003epings\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan class=\"kd\"\u003echan\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003epongs\u003c/span\u003e \u003cspan class=\"kd\"\u003echan\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003emsg\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan class=\"nx\"\u003epings\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003epongs\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"nx\"\u003emsg\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func pong(pings \u003c-chan string, pongs chan\u003c- string) {\n    msg := \u003c-pings\n    pongs \u003c- msg\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {\n    pings := make(chan string, 1)\n    pongs := make(chan string, 1)\n    ping(pings, \"passed message\")\n    pong(pings, pongs)\n    fmt.Println(\u003c-pongs)\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003epings\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003echan\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003epongs\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003echan\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eping\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003epings\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;passed message\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003epong\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003epings\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003epongs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan class=\"nx\"\u003epongs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n    pings := make(chan string, 1)\n    pongs := make(chan string, 1)\n    ping(pings, \"passed message\")\n    pong(pings, pongs)\n    fmt.Println(\u003c-pongs)\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "",
          "docs_rendered": "",
          "code": "$ go run channel-directions.go\npassed message",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run channel-directions.go\n\u003cspan class=\"go\"\u003epassed message\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "select",
    "Name": "Select",
    "GoCode": "// Go's _select_ lets you wait on multiple channel\n// operations. Combining goroutines and channels with\n// select is a powerful feature of Go.\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\n\t// For our example we'll select across two channels.\n\tc1 := make(chan string)\n\tc2 := make(chan string)\n\n\t// Each channel will receive a value after some amount\n\t// of time, to simulate e.g. blocking RPC operations\n\t// executing in concurrent goroutines.\n\tgo func() {\n\t\ttime.Sleep(1 * time.Second)\n\t\tc1 \u003c- \"one\"\n\t}()\n\tgo func() {\n\t\ttime.Sleep(2 * time.Second)\n\t\tc2 \u003c- \"two\"\n\t}()\n\n\t// We'll use `select` to await both of these values\n\t// simultaneously, printing each one as it arrives.\n\tfor i := 0; i \u003c 2; i++ {\n\t\tselect {\n\t\tcase msg1 := \u003c-c1:\n\t\t\tfmt.Println(\"received\", msg1)\n\t\tcase msg2 := \u003c-c2:\n\t\t\tfmt.Println(\"received\", msg2)\n\t\t}\n\t}\n}\n",
    "GoCodeHash": "33fe111b666efb3243c9cbd0ba12b2e795d90fab",
    "URLHash": "FzONhs4-tae",
    "Segs": [
      [
        {
          "docs": "Go's _select_ lets you wait on multiple channel\noperations. Combining goroutines and channels with\nselect is a powerful feature of Go.",
          "docs_rendered": "\u003cp\u003eGo\u0026rsquo;s \u003cem\u003eselect\u003c/em\u003e lets you wait on multiple channel\noperations. Combining goroutines and channels with\nselect is a powerful feature of Go.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"fmt\"\n    \"time\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;time\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"fmt\"\n    \"time\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "For our example we'll select across two channels.",
          "docs_rendered": "\u003cp\u003eFor our example we\u0026rsquo;ll select across two channels.\u003c/p\u003e\n",
          "code": "\n    c1 := make(chan string)\n    c2 := make(chan string)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ec1\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003echan\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ec2\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003echan\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    c1 := make(chan string)\n    c2 := make(chan string)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Each channel will receive a value after some amount\nof time, to simulate e.g. blocking RPC operations\nexecuting in concurrent goroutines.",
          "docs_rendered": "\u003cp\u003eEach channel will receive a value after some amount\nof time, to simulate e.g. blocking RPC operations\nexecuting in concurrent goroutines.\u003c/p\u003e\n",
          "code": "\n    go func() {\n        time.Sleep(1 * time.Second)\n        c1 \u003c- \"one\"\n    }()\n    go func() {\n        time.Sleep(2 * time.Second)\n        c2 \u003c- \"two\"\n    }()",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSleep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSecond\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003ec1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;one\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}()\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSleep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSecond\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003ec2\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;two\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}()\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    go func() {\n        time.Sleep(1 * time.Second)\n        c1 \u003c- \"one\"\n    }()\n    go func() {\n        time.Sleep(2 * time.Second)\n        c2 \u003c- \"two\"\n    }()\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "We'll use `select` to await both of these values\nsimultaneously, printing each one as it arrives.",
          "docs_rendered": "\u003cp\u003eWe\u0026rsquo;ll use \u003ccode\u003eselect\u003c/code\u003e to await both of these values\nsimultaneously, printing each one as it arrives.\u003c/p\u003e\n",
          "code": "\n    for i := 0; i \u003c 2; i++ {\n        select {\n        case msg1 := \u003c-c1:\n            fmt.Println(\"received\", msg1)\n        case msg2 := \u003c-c2:\n            fmt.Println(\"received\", msg2)\n        }\n    }\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eselect\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"nx\"\u003emsg1\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan class=\"nx\"\u003ec1\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;received\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003emsg1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"nx\"\u003emsg2\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan class=\"nx\"\u003ec2\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;received\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003emsg2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    for i := 0; i \u003c 2; i++ {\n        select {\n        case msg1 := \u003c-c1:\n            fmt.Println(\"received\", msg1)\n        case msg2 := \u003c-c2:\n            fmt.Println(\"received\", msg2)\n        }\n    }\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "We receive the values `\"one\"` and then `\"two\"` as\nexpected.",
          "docs_rendered": "\u003cp\u003eWe receive the values \u003ccode\u003e\u0026quot;one\u0026quot;\u003c/code\u003e and then \u003ccode\u003e\u0026quot;two\u0026quot;\u003c/code\u003e as\nexpected.\u003c/p\u003e\n",
          "code": "\n$ time go run select.go \nreceived one\nreceived two",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e \u003cspan class=\"nb\"\u003etime\u003c/span\u003e go run \u003cspan class=\"k\"\u003eselect\u003c/span\u003e.go \n\u003cspan class=\"go\"\u003ereceived one\u003c/span\u003e\n\u003cspan class=\"go\"\u003ereceived two\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Note that the total execution time is only ~2 seconds\nsince both the 1 and 2 second `Sleeps` execute\nconcurrently.",
          "docs_rendered": "\u003cp\u003eNote that the total execution time is only ~2 seconds\nsince both the 1 and 2 second \u003ccode\u003eSleeps\u003c/code\u003e execute\nconcurrently.\u003c/p\u003e\n",
          "code": "\nreal    0m2.245s",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"go\"\u003ereal    0m2.245s\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "timeouts",
    "Name": "Timeouts",
    "GoCode": "// _Timeouts_ are important for programs that connect to\n// external resources or that otherwise need to bound\n// execution time. Implementing timeouts in Go is easy and\n// elegant thanks to channels and `select`.\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\n\t// For our example, suppose we're executing an external\n\t// call that returns its result on a channel `c1`\n\t// after 2s. Note that the channel is buffered, so the\n\t// send in the goroutine is nonblocking. This is a\n\t// common pattern to prevent goroutine leaks in case the\n\t// channel is never read.\n\tc1 := make(chan string, 1)\n\tgo func() {\n\t\ttime.Sleep(2 * time.Second)\n\t\tc1 \u003c- \"result 1\"\n\t}()\n\n\t// Here's the `select` implementing a timeout.\n\t// `res := \u003c-c1` awaits the result and `\u003c-Time.After`\n\t// awaits a value to be sent after the timeout of\n\t// 1s. Since `select` proceeds with the first\n\t// receive that's ready, we'll take the timeout case\n\t// if the operation takes more than the allowed 1s.\n\tselect {\n\tcase res := \u003c-c1:\n\t\tfmt.Println(res)\n\tcase \u003c-time.After(1 * time.Second):\n\t\tfmt.Println(\"timeout 1\")\n\t}\n\n\t// If we allow a longer timeout of 3s, then the receive\n\t// from `c2` will succeed and we'll print the result.\n\tc2 := make(chan string, 1)\n\tgo func() {\n\t\ttime.Sleep(2 * time.Second)\n\t\tc2 \u003c- \"result 2\"\n\t}()\n\tselect {\n\tcase res := \u003c-c2:\n\t\tfmt.Println(res)\n\tcase \u003c-time.After(3 * time.Second):\n\t\tfmt.Println(\"timeout 2\")\n\t}\n}\n",
    "GoCodeHash": "fb913ae361c41095a39bb3fa0c5e9dcd54ec840e",
    "URLHash": "4oOz0j29MJ6",
    "Segs": [
      [
        {
          "docs": "_Timeouts_ are important for programs that connect to\nexternal resources or that otherwise need to bound\nexecution time. Implementing timeouts in Go is easy and\nelegant thanks to channels and `select`.",
          "docs_rendered": "\u003cp\u003e\u003cem\u003eTimeouts\u003c/em\u003e are important for programs that connect to\nexternal resources or that otherwise need to bound\nexecution time. Implementing timeouts in Go is easy and\nelegant thanks to channels and \u003ccode\u003eselect\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"fmt\"\n    \"time\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;time\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"fmt\"\n    \"time\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "For our example, suppose we're executing an external\ncall that returns its result on a channel `c1`\nafter 2s. Note that the channel is buffered, so the\nsend in the goroutine is nonblocking. This is a\ncommon pattern to prevent goroutine leaks in case the\nchannel is never read.",
          "docs_rendered": "\u003cp\u003eFor our example, suppose we\u0026rsquo;re executing an external\ncall that returns its result on a channel \u003ccode\u003ec1\u003c/code\u003e\nafter 2s. Note that the channel is buffered, so the\nsend in the goroutine is nonblocking. This is a\ncommon pattern to prevent goroutine leaks in case the\nchannel is never read.\u003c/p\u003e\n",
          "code": "\n    c1 := make(chan string, 1)\n    go func() {\n        time.Sleep(2 * time.Second)\n        c1 \u003c- \"result 1\"\n    }()",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ec1\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003echan\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSleep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSecond\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003ec1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;result 1\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}()\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    c1 := make(chan string, 1)\n    go func() {\n        time.Sleep(2 * time.Second)\n        c1 \u003c- \"result 1\"\n    }()\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Here's the `select` implementing a timeout.\n`res := \u003c-c1` awaits the result and `\u003c-Time.After`\nawaits a value to be sent after the timeout of\n1s. Since `select` proceeds with the first\nreceive that's ready, we'll take the timeout case\nif the operation takes more than the allowed 1s.",
          "docs_rendered": "\u003cp\u003eHere\u0026rsquo;s the \u003ccode\u003eselect\u003c/code\u003e implementing a timeout.\n\u003ccode\u003eres := \u0026lt;-c1\u003c/code\u003e awaits the result and \u003ccode\u003e\u0026lt;-Time.After\u003c/code\u003e\nawaits a value to be sent after the timeout of\n1s. Since \u003ccode\u003eselect\u003c/code\u003e proceeds with the first\nreceive that\u0026rsquo;s ready, we\u0026rsquo;ll take the timeout case\nif the operation takes more than the allowed 1s.\u003c/p\u003e\n",
          "code": "\n    select {\n    case res := \u003c-c1:\n        fmt.Println(res)\n    case \u003c-time.After(1 * time.Second):\n        fmt.Println(\"timeout 1\")\n    }",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003eselect\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"nx\"\u003eres\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan class=\"nx\"\u003ec1\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eAfter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSecond\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;timeout 1\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    select {\n    case res := \u003c-c1:\n        fmt.Println(res)\n    case \u003c-time.After(1 * time.Second):\n        fmt.Println(\"timeout 1\")\n    }\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "If we allow a longer timeout of 3s, then the receive\nfrom `c2` will succeed and we'll print the result.",
          "docs_rendered": "\u003cp\u003eIf we allow a longer timeout of 3s, then the receive\nfrom \u003ccode\u003ec2\u003c/code\u003e will succeed and we\u0026rsquo;ll print the result.\u003c/p\u003e\n",
          "code": "\n    c2 := make(chan string, 1)\n    go func() {\n        time.Sleep(2 * time.Second)\n        c2 \u003c- \"result 2\"\n    }()\n    select {\n    case res := \u003c-c2:\n        fmt.Println(res)\n    case \u003c-time.After(3 * time.Second):\n        fmt.Println(\"timeout 2\")\n    }\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ec2\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003echan\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSleep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSecond\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003ec2\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;result 2\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}()\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eselect\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"nx\"\u003eres\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan class=\"nx\"\u003ec2\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eAfter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSecond\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;timeout 2\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    c2 := make(chan string, 1)\n    go func() {\n        time.Sleep(2 * time.Second)\n        c2 \u003c- \"result 2\"\n    }()\n    select {\n    case res := \u003c-c2:\n        fmt.Println(res)\n    case \u003c-time.After(3 * time.Second):\n        fmt.Println(\"timeout 2\")\n    }\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "Running this program shows the first operation timing\nout and the second succeeding.",
          "docs_rendered": "\u003cp\u003eRunning this program shows the first operation timing\nout and the second succeeding.\u003c/p\u003e\n",
          "code": "\n$ go run timeouts.go \ntimeout 1\nresult 2",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run timeouts.go \n\u003cspan class=\"go\"\u003etimeout 1\u003c/span\u003e\n\u003cspan class=\"go\"\u003eresult 2\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "non-blocking-channel-operations",
    "Name": "Non-Blocking Channel Operations",
    "GoCode": "// Basic sends and receives on channels are blocking.\n// However, we can use `select` with a `default` clause to\n// implement _non-blocking_ sends, receives, and even\n// non-blocking multi-way `select`s.\n\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tmessages := make(chan string)\n\tsignals := make(chan bool)\n\n\t// Here's a non-blocking receive. If a value is\n\t// available on `messages` then `select` will take\n\t// the `\u003c-messages` `case` with that value. If not\n\t// it will immediately take the `default` case.\n\tselect {\n\tcase msg := \u003c-messages:\n\t\tfmt.Println(\"received message\", msg)\n\tdefault:\n\t\tfmt.Println(\"no message received\")\n\t}\n\n\t// A non-blocking send works similarly. Here `msg`\n\t// cannot be sent to the `messages` channel, because\n\t// the channel has no buffer and there is no receiver.\n\t// Therefore the `default` case is selected.\n\tmsg := \"hi\"\n\tselect {\n\tcase messages \u003c- msg:\n\t\tfmt.Println(\"sent message\", msg)\n\tdefault:\n\t\tfmt.Println(\"no message sent\")\n\t}\n\n\t// We can use multiple `case`s above the `default`\n\t// clause to implement a multi-way non-blocking\n\t// select. Here we attempt non-blocking receives\n\t// on both `messages` and `signals`.\n\tselect {\n\tcase msg := \u003c-messages:\n\t\tfmt.Println(\"received message\", msg)\n\tcase sig := \u003c-signals:\n\t\tfmt.Println(\"received signal\", sig)\n\tdefault:\n\t\tfmt.Println(\"no activity\")\n\t}\n}\n",
    "GoCodeHash": "40588abf859a0280d8c71b79732e869eb2da9291",
    "URLHash": "TFv6-7OVNVq",
    "Segs": [
      [
        {
          "docs": "Basic sends and receives on channels are blocking.\nHowever, we can use `select` with a `default` clause to\nimplement _non-blocking_ sends, receives, and even\nnon-blocking multi-way `select`s.",
          "docs_rendered": "\u003cp\u003eBasic sends and receives on channels are blocking.\nHowever, we can use \u003ccode\u003eselect\u003c/code\u003e with a \u003ccode\u003edefault\u003c/code\u003e clause to\nimplement \u003cem\u003enon-blocking\u003c/em\u003e sends, receives, and even\nnon-blocking multi-way \u003ccode\u003eselect\u003c/code\u003es.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import \"fmt\"",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import \"fmt\"\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {\n    messages := make(chan string)\n    signals := make(chan bool)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003emessages\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003echan\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003esignals\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003echan\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n    messages := make(chan string)\n    signals := make(chan bool)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Here's a non-blocking receive. If a value is\navailable on `messages` then `select` will take\nthe `\u003c-messages` `case` with that value. If not\nit will immediately take the `default` case.",
          "docs_rendered": "\u003cp\u003eHere\u0026rsquo;s a non-blocking receive. If a value is\navailable on \u003ccode\u003emessages\u003c/code\u003e then \u003ccode\u003eselect\u003c/code\u003e will take\nthe \u003ccode\u003e\u0026lt;-messages\u003c/code\u003e \u003ccode\u003ecase\u003c/code\u003e with that value. If not\nit will immediately take the \u003ccode\u003edefault\u003c/code\u003e case.\u003c/p\u003e\n",
          "code": "\n    select {\n    case msg := \u003c-messages:\n        fmt.Println(\"received message\", msg)\n    default:\n        fmt.Println(\"no message received\")\n    }",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003eselect\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"nx\"\u003emsg\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan class=\"nx\"\u003emessages\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;received message\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;no message received\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    select {\n    case msg := \u003c-messages:\n        fmt.Println(\"received message\", msg)\n    default:\n        fmt.Println(\"no message received\")\n    }\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "A non-blocking send works similarly. Here `msg`\ncannot be sent to the `messages` channel, because\nthe channel has no buffer and there is no receiver.\nTherefore the `default` case is selected.",
          "docs_rendered": "\u003cp\u003eA non-blocking send works similarly. Here \u003ccode\u003emsg\u003c/code\u003e\ncannot be sent to the \u003ccode\u003emessages\u003c/code\u003e channel, because\nthe channel has no buffer and there is no receiver.\nTherefore the \u003ccode\u003edefault\u003c/code\u003e case is selected.\u003c/p\u003e\n",
          "code": "\n    msg := \"hi\"\n    select {\n    case messages \u003c- msg:\n        fmt.Println(\"sent message\", msg)\n    default:\n        fmt.Println(\"no message sent\")\n    }",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003emsg\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;hi\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eselect\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"nx\"\u003emessages\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"nx\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;sent message\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;no message sent\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    msg := \"hi\"\n    select {\n    case messages \u003c- msg:\n        fmt.Println(\"sent message\", msg)\n    default:\n        fmt.Println(\"no message sent\")\n    }\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "We can use multiple `case`s above the `default`\nclause to implement a multi-way non-blocking\nselect. Here we attempt non-blocking receives\non both `messages` and `signals`.",
          "docs_rendered": "\u003cp\u003eWe can use multiple \u003ccode\u003ecase\u003c/code\u003es above the \u003ccode\u003edefault\u003c/code\u003e\nclause to implement a multi-way non-blocking\nselect. Here we attempt non-blocking receives\non both \u003ccode\u003emessages\u003c/code\u003e and \u003ccode\u003esignals\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n    select {\n    case msg := \u003c-messages:\n        fmt.Println(\"received message\", msg)\n    case sig := \u003c-signals:\n        fmt.Println(\"received signal\", sig)\n    default:\n        fmt.Println(\"no activity\")\n    }\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003eselect\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"nx\"\u003emsg\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan class=\"nx\"\u003emessages\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;received message\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"nx\"\u003esig\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan class=\"nx\"\u003esignals\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;received signal\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003esig\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;no activity\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    select {\n    case msg := \u003c-messages:\n        fmt.Println(\"received message\", msg)\n    case sig := \u003c-signals:\n        fmt.Println(\"received signal\", sig)\n    default:\n        fmt.Println(\"no activity\")\n    }\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "",
          "docs_rendered": "",
          "code": "$ go run non-blocking-channel-operations.go \nno message received\nno message sent\nno activity",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run non-blocking-channel-operations.go \n\u003cspan class=\"go\"\u003eno message received\u003c/span\u003e\n\u003cspan class=\"go\"\u003eno message sent\u003c/span\u003e\n\u003cspan class=\"go\"\u003eno activity\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "closing-channels",
    "Name": "Closing Channels",
    "GoCode": "// _Closing_ a channel indicates that no more values\n// will be sent on it. This can be useful to communicate\n// completion to the channel's receivers.\n\npackage main\n\nimport \"fmt\"\n\n// In this example we'll use a `jobs` channel to\n// communicate work to be done from the `main()` goroutine\n// to a worker goroutine. When we have no more jobs for\n// the worker we'll `close` the `jobs` channel.\nfunc main() {\n\tjobs := make(chan int, 5)\n\tdone := make(chan bool)\n\n\t// Here's the worker goroutine. It repeatedly receives\n\t// from `jobs` with `j, more := \u003c-jobs`. In this\n\t// special 2-value form of receive, the `more` value\n\t// will be `false` if `jobs` has been `close`d and all\n\t// values in the channel have already been received.\n\t// We use this to notify on `done` when we've worked\n\t// all our jobs.\n\tgo func() {\n\t\tfor {\n\t\t\tj, more := \u003c-jobs\n\t\t\tif more {\n\t\t\t\tfmt.Println(\"received job\", j)\n\t\t\t} else {\n\t\t\t\tfmt.Println(\"received all jobs\")\n\t\t\t\tdone \u003c- true\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\n\t// This sends 3 jobs to the worker over the `jobs`\n\t// channel, then closes it.\n\tfor j := 1; j \u003c= 3; j++ {\n\t\tjobs \u003c- j\n\t\tfmt.Println(\"sent job\", j)\n\t}\n\tclose(jobs)\n\tfmt.Println(\"sent all jobs\")\n\n\t// We await the worker using the\n\t// [synchronization](channel-synchronization) approach\n\t// we saw earlier.\n\t\u003c-done\n}\n",
    "GoCodeHash": "8f26c901e0f14df2ca40329a354c3ac86a5c3a07",
    "URLHash": "vCvRjcMq7p3",
    "Segs": [
      [
        {
          "docs": "_Closing_ a channel indicates that no more values\nwill be sent on it. This can be useful to communicate\ncompletion to the channel's receivers.",
          "docs_rendered": "\u003cp\u003e\u003cem\u003eClosing\u003c/em\u003e a channel indicates that no more values\nwill be sent on it. This can be useful to communicate\ncompletion to the channel\u0026rsquo;s receivers.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import \"fmt\"",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import \"fmt\"\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "In this example we'll use a `jobs` channel to\ncommunicate work to be done from the `main()` goroutine\nto a worker goroutine. When we have no more jobs for\nthe worker we'll `close` the `jobs` channel.",
          "docs_rendered": "\u003cp\u003eIn this example we\u0026rsquo;ll use a \u003ccode\u003ejobs\u003c/code\u003e channel to\ncommunicate work to be done from the \u003ccode\u003emain()\u003c/code\u003e goroutine\nto a worker goroutine. When we have no more jobs for\nthe worker we\u0026rsquo;ll \u003ccode\u003eclose\u003c/code\u003e the \u003ccode\u003ejobs\u003c/code\u003e channel.\u003c/p\u003e\n",
          "code": "\nfunc main() {\n    jobs := make(chan int, 5)\n    done := make(chan bool)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ejobs\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003echan\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003edone\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003echan\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n    jobs := make(chan int, 5)\n    done := make(chan bool)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Here's the worker goroutine. It repeatedly receives\nfrom `jobs` with `j, more := \u003c-jobs`. In this\nspecial 2-value form of receive, the `more` value\nwill be `false` if `jobs` has been `close`d and all\nvalues in the channel have already been received.\nWe use this to notify on `done` when we've worked\nall our jobs.",
          "docs_rendered": "\u003cp\u003eHere\u0026rsquo;s the worker goroutine. It repeatedly receives\nfrom \u003ccode\u003ejobs\u003c/code\u003e with \u003ccode\u003ej, more := \u0026lt;-jobs\u003c/code\u003e. In this\nspecial 2-value form of receive, the \u003ccode\u003emore\u003c/code\u003e value\nwill be \u003ccode\u003efalse\u003c/code\u003e if \u003ccode\u003ejobs\u003c/code\u003e has been \u003ccode\u003eclose\u003c/code\u003ed and all\nvalues in the channel have already been received.\nWe use this to notify on \u003ccode\u003edone\u003c/code\u003e when we\u0026rsquo;ve worked\nall our jobs.\u003c/p\u003e\n",
          "code": "\n    go func() {\n        for {\n            j, more := \u003c-jobs\n            if more {\n                fmt.Println(\"received job\", j)\n            } else {\n                fmt.Println(\"received all jobs\")\n                done \u003c- true\n                return\n            }\n        }\n    }()",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"nx\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003emore\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan class=\"nx\"\u003ejobs\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003emore\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;received job\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;received all jobs\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"nx\"\u003edone\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}()\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    go func() {\n        for {\n            j, more := \u003c-jobs\n            if more {\n                fmt.Println(\"received job\", j)\n            } else {\n                fmt.Println(\"received all jobs\")\n                done \u003c- true\n                return\n            }\n        }\n    }()\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "This sends 3 jobs to the worker over the `jobs`\nchannel, then closes it.",
          "docs_rendered": "\u003cp\u003eThis sends 3 jobs to the worker over the \u003ccode\u003ejobs\u003c/code\u003e\nchannel, then closes it.\u003c/p\u003e\n",
          "code": "\n    for j := 1; j \u003c= 3; j++ {\n        jobs \u003c- j\n        fmt.Println(\"sent job\", j)\n    }\n    close(jobs)\n    fmt.Println(\"sent all jobs\")",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003ejobs\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;sent job\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ejobs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;sent all jobs\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    for j := 1; j \u003c= 3; j++ {\n        jobs \u003c- j\n        fmt.Println(\"sent job\", j)\n    }\n    close(jobs)\n    fmt.Println(\"sent all jobs\")\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "We await the worker using the\n[synchronization](channel-synchronization) approach\nwe saw earlier.",
          "docs_rendered": "\u003cp\u003eWe await the worker using the\n\u003ca href=\"channel-synchronization\"\u003esynchronization\u003c/a\u003e approach\nwe saw earlier.\u003c/p\u003e\n",
          "code": "\n    \u003c-done\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan class=\"nx\"\u003edone\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    \u003c-done\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "",
          "docs_rendered": "",
          "code": "$ go run closing-channels.go \nsent job 1\nreceived job 1\nsent job 2\nreceived job 2\nsent job 3\nreceived job 3\nsent all jobs\nreceived all jobs",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run closing-channels.go \n\u003cspan class=\"go\"\u003esent job 1\u003c/span\u003e\n\u003cspan class=\"go\"\u003ereceived job 1\u003c/span\u003e\n\u003cspan class=\"go\"\u003esent job 2\u003c/span\u003e\n\u003cspan class=\"go\"\u003ereceived job 2\u003c/span\u003e\n\u003cspan class=\"go\"\u003esent job 3\u003c/span\u003e\n\u003cspan class=\"go\"\u003ereceived job 3\u003c/span\u003e\n\u003cspan class=\"go\"\u003esent all jobs\u003c/span\u003e\n\u003cspan class=\"go\"\u003ereceived all jobs\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "The idea of closed channels leads naturally to our next\nexample: `range` over channels.",
          "docs_rendered": "\u003cp\u003eThe idea of closed channels leads naturally to our next\nexample: \u003ccode\u003erange\u003c/code\u003e over channels.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "range-over-channels",
    "Name": "Range over Channels",
    "GoCode": "// In a [previous](range) example we saw how `for` and\n// `range` provide iteration over basic data structures.\n// We can also use this syntax to iterate over\n// values received from a channel.\n\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\n\t// We'll iterate over 2 values in the `queue` channel.\n\tqueue := make(chan string, 2)\n\tqueue \u003c- \"one\"\n\tqueue \u003c- \"two\"\n\tclose(queue)\n\n\t// This `range` iterates over each element as it's\n\t// received from `queue`. Because we `close`d the\n\t// channel above, the iteration terminates after\n\t// receiving the 2 elements.\n\tfor elem := range queue {\n\t\tfmt.Println(elem)\n\t}\n}\n",
    "GoCodeHash": "1812ab409c07ea4209106ee4c0d2eb597fccd717",
    "URLHash": "yQMclmwOYs9",
    "Segs": [
      [
        {
          "docs": "In a [previous](range) example we saw how `for` and\n`range` provide iteration over basic data structures.\nWe can also use this syntax to iterate over\nvalues received from a channel.",
          "docs_rendered": "\u003cp\u003eIn a \u003ca href=\"range\"\u003eprevious\u003c/a\u003e example we saw how \u003ccode\u003efor\u003c/code\u003e and\n\u003ccode\u003erange\u003c/code\u003e provide iteration over basic data structures.\nWe can also use this syntax to iterate over\nvalues received from a channel.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import \"fmt\"",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import \"fmt\"\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "We'll iterate over 2 values in the `queue` channel.",
          "docs_rendered": "\u003cp\u003eWe\u0026rsquo;ll iterate over 2 values in the \u003ccode\u003equeue\u003c/code\u003e channel.\u003c/p\u003e\n",
          "code": "\n    queue := make(chan string, 2)\n    queue \u003c- \"one\"\n    queue \u003c- \"two\"\n    close(queue)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003equeue\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003echan\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003equeue\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;one\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003equeue\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;two\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003equeue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    queue := make(chan string, 2)\n    queue \u003c- \"one\"\n    queue \u003c- \"two\"\n    close(queue)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "This `range` iterates over each element as it's\nreceived from `queue`. Because we `close`d the\nchannel above, the iteration terminates after\nreceiving the 2 elements.",
          "docs_rendered": "\u003cp\u003eThis \u003ccode\u003erange\u003c/code\u003e iterates over each element as it\u0026rsquo;s\nreceived from \u003ccode\u003equeue\u003c/code\u003e. Because we \u003ccode\u003eclose\u003c/code\u003ed the\nchannel above, the iteration terminates after\nreceiving the 2 elements.\u003c/p\u003e\n",
          "code": "\n    for elem := range queue {\n        fmt.Println(elem)\n    }\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003eelem\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"k\"\u003erange\u003c/span\u003e \u003cspan class=\"nx\"\u003equeue\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eelem\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    for elem := range queue {\n        fmt.Println(elem)\n    }\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "",
          "docs_rendered": "",
          "code": "$ go run range-over-channels.go\none\ntwo",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run range-over-channels.go\n\u003cspan class=\"go\"\u003eone\u003c/span\u003e\n\u003cspan class=\"go\"\u003etwo\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "This example also showed that it's possible to close\na non-empty channel but still have the remaining\nvalues be received.",
          "docs_rendered": "\u003cp\u003eThis example also showed that it\u0026rsquo;s possible to close\na non-empty channel but still have the remaining\nvalues be received.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "timers",
    "Name": "Timers",
    "GoCode": "// We often want to execute Go code at some point in the\n// future, or repeatedly at some interval. Go's built-in\n// _timer_ and _ticker_ features make both of these tasks\n// easy. We'll look first at timers and then\n// at [tickers](tickers).\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\n\t// Timers represent a single event in the future. You\n\t// tell the timer how long you want to wait, and it\n\t// provides a channel that will be notified at that\n\t// time. This timer will wait 2 seconds.\n\ttimer1 := time.NewTimer(2 * time.Second)\n\n\t// The `\u003c-timer1.C` blocks on the timer's channel `C`\n\t// until it sends a value indicating that the timer\n\t// fired.\n\t\u003c-timer1.C\n\tfmt.Println(\"Timer 1 fired\")\n\n\t// If you just wanted to wait, you could have used\n\t// `time.Sleep`. One reason a timer may be useful is\n\t// that you can cancel the timer before it fires.\n\t// Here's an example of that.\n\ttimer2 := time.NewTimer(time.Second)\n\tgo func() {\n\t\t\u003c-timer2.C\n\t\tfmt.Println(\"Timer 2 fired\")\n\t}()\n\tstop2 := timer2.Stop()\n\tif stop2 {\n\t\tfmt.Println(\"Timer 2 stopped\")\n\t}\n\n\t// Give the `timer2` enough time to fire, if it ever\n\t// was going to, to show it is in fact stopped.\n\ttime.Sleep(2 * time.Second)\n}\n",
    "GoCodeHash": "36cae12a3ca529e473d7839e9573c3e0a202c2de",
    "URLHash": "gF7VLRz3URM",
    "Segs": [
      [
        {
          "docs": "We often want to execute Go code at some point in the\nfuture, or repeatedly at some interval. Go's built-in\n_timer_ and _ticker_ features make both of these tasks\neasy. We'll look first at timers and then\nat [tickers](tickers).",
          "docs_rendered": "\u003cp\u003eWe often want to execute Go code at some point in the\nfuture, or repeatedly at some interval. Go\u0026rsquo;s built-in\n\u003cem\u003etimer\u003c/em\u003e and \u003cem\u003eticker\u003c/em\u003e features make both of these tasks\neasy. We\u0026rsquo;ll look first at timers and then\nat \u003ca href=\"tickers\"\u003etickers\u003c/a\u003e.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"fmt\"\n    \"time\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;time\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"fmt\"\n    \"time\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Timers represent a single event in the future. You\ntell the timer how long you want to wait, and it\nprovides a channel that will be notified at that\ntime. This timer will wait 2 seconds.",
          "docs_rendered": "\u003cp\u003eTimers represent a single event in the future. You\ntell the timer how long you want to wait, and it\nprovides a channel that will be notified at that\ntime. This timer will wait 2 seconds.\u003c/p\u003e\n",
          "code": "\n    timer1 := time.NewTimer(2 * time.Second)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003etimer1\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eNewTimer\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSecond\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    timer1 := time.NewTimer(2 * time.Second)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "The `\u003c-timer1.C` blocks on the timer's channel `C`\nuntil it sends a value indicating that the timer\nfired.",
          "docs_rendered": "\u003cp\u003eThe \u003ccode\u003e\u0026lt;-timer1.C\u003c/code\u003e blocks on the timer\u0026rsquo;s channel \u003ccode\u003eC\u003c/code\u003e\nuntil it sends a value indicating that the timer\nfired.\u003c/p\u003e\n",
          "code": "\n    \u003c-timer1.C\n    fmt.Println(\"Timer 1 fired\")",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan class=\"nx\"\u003etimer1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eC\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Timer 1 fired\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    \u003c-timer1.C\n    fmt.Println(\"Timer 1 fired\")\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "If you just wanted to wait, you could have used\n`time.Sleep`. One reason a timer may be useful is\nthat you can cancel the timer before it fires.\nHere's an example of that.",
          "docs_rendered": "\u003cp\u003eIf you just wanted to wait, you could have used\n\u003ccode\u003etime.Sleep\u003c/code\u003e. One reason a timer may be useful is\nthat you can cancel the timer before it fires.\nHere\u0026rsquo;s an example of that.\u003c/p\u003e\n",
          "code": "\n    timer2 := time.NewTimer(time.Second)\n    go func() {\n        \u003c-timer2.C\n        fmt.Println(\"Timer 2 fired\")\n    }()\n    stop2 := timer2.Stop()\n    if stop2 {\n        fmt.Println(\"Timer 2 stopped\")\n    }",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003etimer2\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eNewTimer\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSecond\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan class=\"nx\"\u003etimer2\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eC\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Timer 2 fired\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}()\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003estop2\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003etimer2\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eStop\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003estop2\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Timer 2 stopped\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    timer2 := time.NewTimer(time.Second)\n    go func() {\n        \u003c-timer2.C\n        fmt.Println(\"Timer 2 fired\")\n    }()\n    stop2 := timer2.Stop()\n    if stop2 {\n        fmt.Println(\"Timer 2 stopped\")\n    }\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Give the `timer2` enough time to fire, if it ever\nwas going to, to show it is in fact stopped.",
          "docs_rendered": "\u003cp\u003eGive the \u003ccode\u003etimer2\u003c/code\u003e enough time to fire, if it ever\nwas going to, to show it is in fact stopped.\u003c/p\u003e\n",
          "code": "\n    time.Sleep(2 * time.Second)\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSleep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSecond\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    time.Sleep(2 * time.Second)\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "The first timer will fire ~2s after we start the\nprogram, but the second should be stopped before it has\na chance to fire.",
          "docs_rendered": "\u003cp\u003eThe first timer will fire ~2s after we start the\nprogram, but the second should be stopped before it has\na chance to fire.\u003c/p\u003e\n",
          "code": "\n$ go run timers.go\nTimer 1 fired\nTimer 2 stopped",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run timers.go\n\u003cspan class=\"go\"\u003eTimer 1 fired\u003c/span\u003e\n\u003cspan class=\"go\"\u003eTimer 2 stopped\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "tickers",
    "Name": "Tickers",
    "GoCode": "// [Timers](timers) are for when you want to do\n// something once in the future - _tickers_ are for when\n// you want to do something repeatedly at regular\n// intervals. Here's an example of a ticker that ticks\n// periodically until we stop it.\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\n\t// Tickers use a similar mechanism to timers: a\n\t// channel that is sent values. Here we'll use the\n\t// `select` builtin on the channel to await the\n\t// values as they arrive every 500ms.\n\tticker := time.NewTicker(500 * time.Millisecond)\n\tdone := make(chan bool)\n\n\tgo func() {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase \u003c-done:\n\t\t\t\treturn\n\t\t\tcase t := \u003c-ticker.C:\n\t\t\t\tfmt.Println(\"Tick at\", t)\n\t\t\t}\n\t\t}\n\t}()\n\n\t// Tickers can be stopped like timers. Once a ticker\n\t// is stopped it won't receive any more values on its\n\t// channel. We'll stop ours after 1600ms.\n\ttime.Sleep(1600 * time.Millisecond)\n\tticker.Stop()\n\tdone \u003c- true\n\tfmt.Println(\"Ticker stopped\")\n}\n",
    "GoCodeHash": "432b3be0884cead3f01b9cce0868ac6146e7864e",
    "URLHash": "gs6zoJP-Pl9",
    "Segs": [
      [
        {
          "docs": "[Timers](timers) are for when you want to do\nsomething once in the future - _tickers_ are for when\nyou want to do something repeatedly at regular\nintervals. Here's an example of a ticker that ticks\nperiodically until we stop it.",
          "docs_rendered": "\u003cp\u003e\u003ca href=\"timers\"\u003eTimers\u003c/a\u003e are for when you want to do\nsomething once in the future - \u003cem\u003etickers\u003c/em\u003e are for when\nyou want to do something repeatedly at regular\nintervals. Here\u0026rsquo;s an example of a ticker that ticks\nperiodically until we stop it.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"fmt\"\n    \"time\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;time\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"fmt\"\n    \"time\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Tickers use a similar mechanism to timers: a\nchannel that is sent values. Here we'll use the\n`select` builtin on the channel to await the\nvalues as they arrive every 500ms.",
          "docs_rendered": "\u003cp\u003eTickers use a similar mechanism to timers: a\nchannel that is sent values. Here we\u0026rsquo;ll use the\n\u003ccode\u003eselect\u003c/code\u003e builtin on the channel to await the\nvalues as they arrive every 500ms.\u003c/p\u003e\n",
          "code": "\n    ticker := time.NewTicker(500 * time.Millisecond)\n    done := make(chan bool)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003eticker\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eNewTicker\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e500\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eMillisecond\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003edone\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003echan\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    ticker := time.NewTicker(500 * time.Millisecond)\n    done := make(chan bool)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "    go func() {\n        for {\n            select {\n            case \u003c-done:\n                return\n            case t := \u003c-ticker.C:\n                fmt.Println(\"Tick at\", t)\n            }\n        }\n    }()",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eselect\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan class=\"nx\"\u003edone\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"nx\"\u003et\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan class=\"nx\"\u003eticker\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eC\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n                \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Tick at\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}()\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    go func() {\n        for {\n            select {\n            case \u003c-done:\n                return\n            case t := \u003c-ticker.C:\n                fmt.Println(\"Tick at\", t)\n            }\n        }\n    }()\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Tickers can be stopped like timers. Once a ticker\nis stopped it won't receive any more values on its\nchannel. We'll stop ours after 1600ms.",
          "docs_rendered": "\u003cp\u003eTickers can be stopped like timers. Once a ticker\nis stopped it won\u0026rsquo;t receive any more values on its\nchannel. We\u0026rsquo;ll stop ours after 1600ms.\u003c/p\u003e\n",
          "code": "\n    time.Sleep(1600 * time.Millisecond)\n    ticker.Stop()\n    done \u003c- true\n    fmt.Println(\"Ticker stopped\")\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSleep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1600\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eMillisecond\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eticker\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eStop\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003edone\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Ticker stopped\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    time.Sleep(1600 * time.Millisecond)\n    ticker.Stop()\n    done \u003c- true\n    fmt.Println(\"Ticker stopped\")\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "When we run this program the ticker should tick 3 times\nbefore we stop it.",
          "docs_rendered": "\u003cp\u003eWhen we run this program the ticker should tick 3 times\nbefore we stop it.\u003c/p\u003e\n",
          "code": "\n$ go run tickers.go\nTick at 2012-09-23 11:29:56.487625 -0700 PDT\nTick at 2012-09-23 11:29:56.988063 -0700 PDT\nTick at 2012-09-23 11:29:57.488076 -0700 PDT\nTicker stopped",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run tickers.go\n\u003cspan class=\"go\"\u003eTick at 2012-09-23 11:29:56.487625 -0700 PDT\u003c/span\u003e\n\u003cspan class=\"go\"\u003eTick at 2012-09-23 11:29:56.988063 -0700 PDT\u003c/span\u003e\n\u003cspan class=\"go\"\u003eTick at 2012-09-23 11:29:57.488076 -0700 PDT\u003c/span\u003e\n\u003cspan class=\"go\"\u003eTicker stopped\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "worker-pools",
    "Name": "Worker Pools",
    "GoCode": "// In this example we'll look at how to implement\n// a _worker pool_ using goroutines and channels.\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\n// Here's the worker, of which we'll run several\n// concurrent instances. These workers will receive\n// work on the `jobs` channel and send the corresponding\n// results on `results`. We'll sleep a second per job to\n// simulate an expensive task.\nfunc worker(id int, jobs \u003c-chan int, results chan\u003c- int) {\n\tfor j := range jobs {\n\t\tfmt.Println(\"worker\", id, \"started  job\", j)\n\t\ttime.Sleep(time.Second)\n\t\tfmt.Println(\"worker\", id, \"finished job\", j)\n\t\tresults \u003c- j * 2\n\t}\n}\n\nfunc main() {\n\n\t// In order to use our pool of workers we need to send\n\t// them work and collect their results. We make 2\n\t// channels for this.\n\tconst numJobs = 5\n\tjobs := make(chan int, numJobs)\n\tresults := make(chan int, numJobs)\n\n\t// This starts up 3 workers, initially blocked\n\t// because there are no jobs yet.\n\tfor w := 1; w \u003c= 3; w++ {\n\t\tgo worker(w, jobs, results)\n\t}\n\n\t// Here we send 5 `jobs` and then `close` that\n\t// channel to indicate that's all the work we have.\n\tfor j := 1; j \u003c= numJobs; j++ {\n\t\tjobs \u003c- j\n\t}\n\tclose(jobs)\n\n\t// Finally we collect all the results of the work.\n\t// This also ensures that the worker goroutines have\n\t// finished. An alternative way to wait for multiple\n\t// goroutines is to use a [WaitGroup](waitgroups).\n\tfor a := 1; a \u003c= numJobs; a++ {\n\t\t\u003c-results\n\t}\n}\n",
    "GoCodeHash": "f6fd187061dfd0ae5ae8243efa3a6fcfa0777c84",
    "URLHash": "hiSJJsYZJKL",
    "Segs": [
      [
        {
          "docs": "In this example we'll look at how to implement\na _worker pool_ using goroutines and channels.",
          "docs_rendered": "\u003cp\u003eIn this example we\u0026rsquo;ll look at how to implement\na \u003cem\u003eworker pool\u003c/em\u003e using goroutines and channels.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"fmt\"\n    \"time\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;time\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"fmt\"\n    \"time\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Here's the worker, of which we'll run several\nconcurrent instances. These workers will receive\nwork on the `jobs` channel and send the corresponding\nresults on `results`. We'll sleep a second per job to\nsimulate an expensive task.",
          "docs_rendered": "\u003cp\u003eHere\u0026rsquo;s the worker, of which we\u0026rsquo;ll run several\nconcurrent instances. These workers will receive\nwork on the \u003ccode\u003ejobs\u003c/code\u003e channel and send the corresponding\nresults on \u003ccode\u003eresults\u003c/code\u003e. We\u0026rsquo;ll sleep a second per job to\nsimulate an expensive task.\u003c/p\u003e\n",
          "code": "\nfunc worker(id int, jobs \u003c-chan int, results chan\u003c- int) {\n    for j := range jobs {\n        fmt.Println(\"worker\", id, \"started  job\", j)\n        time.Sleep(time.Second)\n        fmt.Println(\"worker\", id, \"finished job\", j)\n        results \u003c- j * 2\n    }\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003eworker\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eid\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ejobs\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan class=\"kd\"\u003echan\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eresults\u003c/span\u003e \u003cspan class=\"kd\"\u003echan\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"k\"\u003erange\u003c/span\u003e \u003cspan class=\"nx\"\u003ejobs\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;worker\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eid\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;started  job\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSleep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSecond\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;worker\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eid\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;finished job\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003eresults\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func worker(id int, jobs \u003c-chan int, results chan\u003c- int) {\n    for j := range jobs {\n        fmt.Println(\"worker\", id, \"started  job\", j)\n        time.Sleep(time.Second)\n        fmt.Println(\"worker\", id, \"finished job\", j)\n        results \u003c- j * 2\n    }\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "In order to use our pool of workers we need to send\nthem work and collect their results. We make 2\nchannels for this.",
          "docs_rendered": "\u003cp\u003eIn order to use our pool of workers we need to send\nthem work and collect their results. We make 2\nchannels for this.\u003c/p\u003e\n",
          "code": "\n    const numJobs = 5\n    jobs := make(chan int, numJobs)\n    results := make(chan int, numJobs)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003enumJobs\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ejobs\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003echan\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003enumJobs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eresults\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003echan\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003enumJobs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    const numJobs = 5\n    jobs := make(chan int, numJobs)\n    results := make(chan int, numJobs)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "This starts up 3 workers, initially blocked\nbecause there are no jobs yet.",
          "docs_rendered": "\u003cp\u003eThis starts up 3 workers, initially blocked\nbecause there are no jobs yet.\u003c/p\u003e\n",
          "code": "\n    for w := 1; w \u003c= 3; w++ {\n        go worker(w, jobs, results)\n    }",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ew\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ew\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ew\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"nx\"\u003eworker\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ew\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ejobs\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eresults\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    for w := 1; w \u003c= 3; w++ {\n        go worker(w, jobs, results)\n    }\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Here we send 5 `jobs` and then `close` that\nchannel to indicate that's all the work we have.",
          "docs_rendered": "\u003cp\u003eHere we send 5 \u003ccode\u003ejobs\u003c/code\u003e and then \u003ccode\u003eclose\u003c/code\u003e that\nchannel to indicate that\u0026rsquo;s all the work we have.\u003c/p\u003e\n",
          "code": "\n    for j := 1; j \u003c= numJobs; j++ {\n        jobs \u003c- j\n    }\n    close(jobs)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"nx\"\u003enumJobs\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003ejobs\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ejobs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    for j := 1; j \u003c= numJobs; j++ {\n        jobs \u003c- j\n    }\n    close(jobs)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Finally we collect all the results of the work.\nThis also ensures that the worker goroutines have\nfinished. An alternative way to wait for multiple\ngoroutines is to use a [WaitGroup](waitgroups).",
          "docs_rendered": "\u003cp\u003eFinally we collect all the results of the work.\nThis also ensures that the worker goroutines have\nfinished. An alternative way to wait for multiple\ngoroutines is to use a \u003ca href=\"waitgroups\"\u003eWaitGroup\u003c/a\u003e.\u003c/p\u003e\n",
          "code": "\n    for a := 1; a \u003c= numJobs; a++ {\n        \u003c-results\n    }\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"nx\"\u003enumJobs\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan class=\"nx\"\u003eresults\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    for a := 1; a \u003c= numJobs; a++ {\n        \u003c-results\n    }\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "Our running program shows the 5 jobs being executed by\nvarious workers. The program only takes about 2 seconds\ndespite doing about 5 seconds of total work because\nthere are 3 workers operating concurrently.",
          "docs_rendered": "\u003cp\u003eOur running program shows the 5 jobs being executed by\nvarious workers. The program only takes about 2 seconds\ndespite doing about 5 seconds of total work because\nthere are 3 workers operating concurrently.\u003c/p\u003e\n",
          "code": "\n$ time go run worker-pools.go \nworker 1 started  job 1\nworker 2 started  job 2\nworker 3 started  job 3\nworker 1 finished job 1\nworker 1 started  job 4\nworker 2 finished job 2\nworker 2 started  job 5\nworker 3 finished job 3\nworker 1 finished job 4\nworker 2 finished job 5",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e \u003cspan class=\"nb\"\u003etime\u003c/span\u003e go run worker-pools.go \n\u003cspan class=\"go\"\u003eworker 1 started  job 1\u003c/span\u003e\n\u003cspan class=\"go\"\u003eworker 2 started  job 2\u003c/span\u003e\n\u003cspan class=\"go\"\u003eworker 3 started  job 3\u003c/span\u003e\n\u003cspan class=\"go\"\u003eworker 1 finished job 1\u003c/span\u003e\n\u003cspan class=\"go\"\u003eworker 1 started  job 4\u003c/span\u003e\n\u003cspan class=\"go\"\u003eworker 2 finished job 2\u003c/span\u003e\n\u003cspan class=\"go\"\u003eworker 2 started  job 5\u003c/span\u003e\n\u003cspan class=\"go\"\u003eworker 3 finished job 3\u003c/span\u003e\n\u003cspan class=\"go\"\u003eworker 1 finished job 4\u003c/span\u003e\n\u003cspan class=\"go\"\u003eworker 2 finished job 5\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "real    0m2.358s",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"go\"\u003ereal    0m2.358s\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "waitgroups",
    "Name": "WaitGroups",
    "GoCode": "// To wait for multiple goroutines to finish, we can\n// use a *wait group*.\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sync\"\n\t\"time\"\n)\n\n// This is the function we'll run in every goroutine.\n// Note that a WaitGroup must be passed to functions by\n// pointer.\nfunc worker(id int, wg *sync.WaitGroup) {\n\t// On return, notify the WaitGroup that we're done.\n\tdefer wg.Done()\n\n\tfmt.Printf(\"Worker %d starting\\n\", id)\n\n\t// Sleep to simulate an expensive task.\n\ttime.Sleep(time.Second)\n\tfmt.Printf(\"Worker %d done\\n\", id)\n}\n\nfunc main() {\n\n\t// This WaitGroup is used to wait for all the\n\t// goroutines launched here to finish.\n\tvar wg sync.WaitGroup\n\n\t// Launch several goroutines and increment the WaitGroup\n\t// counter for each.\n\tfor i := 1; i \u003c= 5; i++ {\n\t\twg.Add(1)\n\t\tgo worker(i, \u0026wg)\n\t}\n\n\t// Block until the WaitGroup counter goes back to 0;\n\t// all the workers notified they're done.\n\twg.Wait()\n}\n",
    "GoCodeHash": "fd77f5122e6df1669c0a2e0d2c4dfbd30631c21f",
    "URLHash": "7mWXl0yVe6I",
    "Segs": [
      [
        {
          "docs": "To wait for multiple goroutines to finish, we can\nuse a *wait group*.",
          "docs_rendered": "\u003cp\u003eTo wait for multiple goroutines to finish, we can\nuse a \u003cem\u003ewait group\u003c/em\u003e.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"fmt\"\n    \"sync\"\n    \"time\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;sync\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;time\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"fmt\"\n    \"sync\"\n    \"time\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "This is the function we'll run in every goroutine.\nNote that a WaitGroup must be passed to functions by\npointer.",
          "docs_rendered": "\u003cp\u003eThis is the function we\u0026rsquo;ll run in every goroutine.\nNote that a WaitGroup must be passed to functions by\npointer.\u003c/p\u003e\n",
          "code": "\nfunc worker(id int, wg *sync.WaitGroup) {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003eworker\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eid\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ewg\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003esync\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eWaitGroup\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func worker(id int, wg *sync.WaitGroup) {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "On return, notify the WaitGroup that we're done.",
          "docs_rendered": "\u003cp\u003eOn return, notify the WaitGroup that we\u0026rsquo;re done.\u003c/p\u003e\n",
          "code": "\n    defer wg.Done()",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003edefer\u003c/span\u003e \u003cspan class=\"nx\"\u003ewg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eDone\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    defer wg.Done()\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "    fmt.Printf(\"Worker %d starting\\n\", id)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Worker %d starting\\n\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eid\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Printf(\"Worker %d starting\\n\", id)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Sleep to simulate an expensive task.",
          "docs_rendered": "\u003cp\u003eSleep to simulate an expensive task.\u003c/p\u003e\n",
          "code": "\n    time.Sleep(time.Second)\n    fmt.Printf(\"Worker %d done\\n\", id)\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSleep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSecond\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Worker %d done\\n\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eid\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    time.Sleep(time.Second)\n    fmt.Printf(\"Worker %d done\\n\", id)\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "This WaitGroup is used to wait for all the\ngoroutines launched here to finish.",
          "docs_rendered": "\u003cp\u003eThis WaitGroup is used to wait for all the\ngoroutines launched here to finish.\u003c/p\u003e\n",
          "code": "\n    var wg sync.WaitGroup",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003ewg\u003c/span\u003e \u003cspan class=\"nx\"\u003esync\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eWaitGroup\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    var wg sync.WaitGroup\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Launch several goroutines and increment the WaitGroup\ncounter for each.",
          "docs_rendered": "\u003cp\u003eLaunch several goroutines and increment the WaitGroup\ncounter for each.\u003c/p\u003e\n",
          "code": "\n    for i := 1; i \u003c= 5; i++ {\n        wg.Add(1)\n        go worker(i, \u0026wg)\n    }",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003ewg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eAdd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"nx\"\u003eworker\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003ewg\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    for i := 1; i \u003c= 5; i++ {\n        wg.Add(1)\n        go worker(i, \u0026wg)\n    }\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Block until the WaitGroup counter goes back to 0;\nall the workers notified they're done.",
          "docs_rendered": "\u003cp\u003eBlock until the WaitGroup counter goes back to 0;\nall the workers notified they\u0026rsquo;re done.\u003c/p\u003e\n",
          "code": "\n    wg.Wait()\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ewg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eWait\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    wg.Wait()\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "",
          "docs_rendered": "",
          "code": "$ go run waitgroups.go\nWorker 5 starting\nWorker 3 starting\nWorker 4 starting\nWorker 1 starting\nWorker 2 starting\nWorker 4 done\nWorker 1 done\nWorker 2 done\nWorker 5 done\nWorker 3 done",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run waitgroups.go\n\u003cspan class=\"go\"\u003eWorker 5 starting\u003c/span\u003e\n\u003cspan class=\"go\"\u003eWorker 3 starting\u003c/span\u003e\n\u003cspan class=\"go\"\u003eWorker 4 starting\u003c/span\u003e\n\u003cspan class=\"go\"\u003eWorker 1 starting\u003c/span\u003e\n\u003cspan class=\"go\"\u003eWorker 2 starting\u003c/span\u003e\n\u003cspan class=\"go\"\u003eWorker 4 done\u003c/span\u003e\n\u003cspan class=\"go\"\u003eWorker 1 done\u003c/span\u003e\n\u003cspan class=\"go\"\u003eWorker 2 done\u003c/span\u003e\n\u003cspan class=\"go\"\u003eWorker 5 done\u003c/span\u003e\n\u003cspan class=\"go\"\u003eWorker 3 done\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "The order of workers starting up and finishing\nis likely to be different for each invocation.",
          "docs_rendered": "\u003cp\u003eThe order of workers starting up and finishing\nis likely to be different for each invocation.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "rate-limiting",
    "Name": "Rate Limiting",
    "GoCode": "// \u003cem\u003e[Rate limiting](http://en.wikipedia.org/wiki/Rate_limiting)\u003c/em\u003e\n// is an important mechanism for controlling resource\n// utilization and maintaining quality of service. Go\n// elegantly supports rate limiting with goroutines,\n// channels, and [tickers](tickers).\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\n\t// First we'll look at basic rate limiting. Suppose\n\t// we want to limit our handling of incoming requests.\n\t// We'll serve these requests off a channel of the\n\t// same name.\n\trequests := make(chan int, 5)\n\tfor i := 1; i \u003c= 5; i++ {\n\t\trequests \u003c- i\n\t}\n\tclose(requests)\n\n\t// This `limiter` channel will receive a value\n\t// every 200 milliseconds. This is the regulator in\n\t// our rate limiting scheme.\n\tlimiter := time.Tick(200 * time.Millisecond)\n\n\t// By blocking on a receive from the `limiter` channel\n\t// before serving each request, we limit ourselves to\n\t// 1 request every 200 milliseconds.\n\tfor req := range requests {\n\t\t\u003c-limiter\n\t\tfmt.Println(\"request\", req, time.Now())\n\t}\n\n\t// We may want to allow short bursts of requests in\n\t// our rate limiting scheme while preserving the\n\t// overall rate limit. We can accomplish this by\n\t// buffering our limiter channel. This `burstyLimiter`\n\t// channel will allow bursts of up to 3 events.\n\tburstyLimiter := make(chan time.Time, 3)\n\n\t// Fill up the channel to represent allowed bursting.\n\tfor i := 0; i \u003c 3; i++ {\n\t\tburstyLimiter \u003c- time.Now()\n\t}\n\n\t// Every 200 milliseconds we'll try to add a new\n\t// value to `burstyLimiter`, up to its limit of 3.\n\tgo func() {\n\t\tfor t := range time.Tick(200 * time.Millisecond) {\n\t\t\tburstyLimiter \u003c- t\n\t\t}\n\t}()\n\n\t// Now simulate 5 more incoming requests. The first\n\t// 3 of these will benefit from the burst capability\n\t// of `burstyLimiter`.\n\tburstyRequests := make(chan int, 5)\n\tfor i := 1; i \u003c= 5; i++ {\n\t\tburstyRequests \u003c- i\n\t}\n\tclose(burstyRequests)\n\tfor req := range burstyRequests {\n\t\t\u003c-burstyLimiter\n\t\tfmt.Println(\"request\", req, time.Now())\n\t}\n}\n",
    "GoCodeHash": "c2d4dd4c2121e61395db186e3f15ce8cb3acf643",
    "URLHash": "20c_m1AtOEI",
    "Segs": [
      [
        {
          "docs": "\u003cem\u003e[Rate limiting](http://en.wikipedia.org/wiki/Rate_limiting)\u003c/em\u003e\nis an important mechanism for controlling resource\nutilization and maintaining quality of service. Go\nelegantly supports rate limiting with goroutines,\nchannels, and [tickers](tickers).",
          "docs_rendered": "\u003cp\u003e\u003cem\u003e\u003ca href=\"http://en.wikipedia.org/wiki/Rate_limiting\"\u003eRate limiting\u003c/a\u003e\u003c/em\u003e\nis an important mechanism for controlling resource\nutilization and maintaining quality of service. Go\nelegantly supports rate limiting with goroutines,\nchannels, and \u003ca href=\"tickers\"\u003etickers\u003c/a\u003e.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"fmt\"\n    \"time\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;time\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"fmt\"\n    \"time\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "First we'll look at basic rate limiting. Suppose\nwe want to limit our handling of incoming requests.\nWe'll serve these requests off a channel of the\nsame name.",
          "docs_rendered": "\u003cp\u003eFirst we\u0026rsquo;ll look at basic rate limiting. Suppose\nwe want to limit our handling of incoming requests.\nWe\u0026rsquo;ll serve these requests off a channel of the\nsame name.\u003c/p\u003e\n",
          "code": "\n    requests := make(chan int, 5)\n    for i := 1; i \u003c= 5; i++ {\n        requests \u003c- i\n    }\n    close(requests)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003erequests\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003echan\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003erequests\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003erequests\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    requests := make(chan int, 5)\n    for i := 1; i \u003c= 5; i++ {\n        requests \u003c- i\n    }\n    close(requests)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "This `limiter` channel will receive a value\nevery 200 milliseconds. This is the regulator in\nour rate limiting scheme.",
          "docs_rendered": "\u003cp\u003eThis \u003ccode\u003elimiter\u003c/code\u003e channel will receive a value\nevery 200 milliseconds. This is the regulator in\nour rate limiting scheme.\u003c/p\u003e\n",
          "code": "\n    limiter := time.Tick(200 * time.Millisecond)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003elimiter\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eTick\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e200\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eMillisecond\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    limiter := time.Tick(200 * time.Millisecond)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "By blocking on a receive from the `limiter` channel\nbefore serving each request, we limit ourselves to\n1 request every 200 milliseconds.",
          "docs_rendered": "\u003cp\u003eBy blocking on a receive from the \u003ccode\u003elimiter\u003c/code\u003e channel\nbefore serving each request, we limit ourselves to\n1 request every 200 milliseconds.\u003c/p\u003e\n",
          "code": "\n    for req := range requests {\n        \u003c-limiter\n        fmt.Println(\"request\", req, time.Now())\n    }",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ereq\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"k\"\u003erange\u003c/span\u003e \u003cspan class=\"nx\"\u003erequests\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan class=\"nx\"\u003elimiter\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;request\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ereq\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eNow\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    for req := range requests {\n        \u003c-limiter\n        fmt.Println(\"request\", req, time.Now())\n    }\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "We may want to allow short bursts of requests in\nour rate limiting scheme while preserving the\noverall rate limit. We can accomplish this by\nbuffering our limiter channel. This `burstyLimiter`\nchannel will allow bursts of up to 3 events.",
          "docs_rendered": "\u003cp\u003eWe may want to allow short bursts of requests in\nour rate limiting scheme while preserving the\noverall rate limit. We can accomplish this by\nbuffering our limiter channel. This \u003ccode\u003eburstyLimiter\u003c/code\u003e\nchannel will allow bursts of up to 3 events.\u003c/p\u003e\n",
          "code": "\n    burstyLimiter := make(chan time.Time, 3)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003eburstyLimiter\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003echan\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eTime\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    burstyLimiter := make(chan time.Time, 3)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Fill up the channel to represent allowed bursting.",
          "docs_rendered": "\u003cp\u003eFill up the channel to represent allowed bursting.\u003c/p\u003e\n",
          "code": "\n    for i := 0; i \u003c 3; i++ {\n        burstyLimiter \u003c- time.Now()\n    }",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003eburstyLimiter\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eNow\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    for i := 0; i \u003c 3; i++ {\n        burstyLimiter \u003c- time.Now()\n    }\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Every 200 milliseconds we'll try to add a new\nvalue to `burstyLimiter`, up to its limit of 3.",
          "docs_rendered": "\u003cp\u003eEvery 200 milliseconds we\u0026rsquo;ll try to add a new\nvalue to \u003ccode\u003eburstyLimiter\u003c/code\u003e, up to its limit of 3.\u003c/p\u003e\n",
          "code": "\n    go func() {\n        for t := range time.Tick(200 * time.Millisecond) {\n            burstyLimiter \u003c- t\n        }\n    }()",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003et\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"k\"\u003erange\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eTick\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e200\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eMillisecond\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"nx\"\u003eburstyLimiter\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"nx\"\u003et\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}()\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    go func() {\n        for t := range time.Tick(200 * time.Millisecond) {\n            burstyLimiter \u003c- t\n        }\n    }()\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Now simulate 5 more incoming requests. The first\n3 of these will benefit from the burst capability\nof `burstyLimiter`.",
          "docs_rendered": "\u003cp\u003eNow simulate 5 more incoming requests. The first\n3 of these will benefit from the burst capability\nof \u003ccode\u003eburstyLimiter\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n    burstyRequests := make(chan int, 5)\n    for i := 1; i \u003c= 5; i++ {\n        burstyRequests \u003c- i\n    }\n    close(burstyRequests)\n    for req := range burstyRequests {\n        \u003c-burstyLimiter\n        fmt.Println(\"request\", req, time.Now())\n    }\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003eburstyRequests\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003echan\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003eburstyRequests\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eburstyRequests\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ereq\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"k\"\u003erange\u003c/span\u003e \u003cspan class=\"nx\"\u003eburstyRequests\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan class=\"nx\"\u003eburstyLimiter\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;request\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ereq\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eNow\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    burstyRequests := make(chan int, 5)\n    for i := 1; i \u003c= 5; i++ {\n        burstyRequests \u003c- i\n    }\n    close(burstyRequests)\n    for req := range burstyRequests {\n        \u003c-burstyLimiter\n        fmt.Println(\"request\", req, time.Now())\n    }\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "Running our program we see the first batch of requests\nhandled once every ~200 milliseconds as desired.",
          "docs_rendered": "\u003cp\u003eRunning our program we see the first batch of requests\nhandled once every ~200 milliseconds as desired.\u003c/p\u003e\n",
          "code": "\n$ go run rate-limiting.go\nrequest 1 2012-10-19 00:38:18.687438 +0000 UTC\nrequest 2 2012-10-19 00:38:18.887471 +0000 UTC\nrequest 3 2012-10-19 00:38:19.087238 +0000 UTC\nrequest 4 2012-10-19 00:38:19.287338 +0000 UTC\nrequest 5 2012-10-19 00:38:19.487331 +0000 UTC",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run rate-limiting.go\n\u003cspan class=\"go\"\u003erequest 1 2012-10-19 00:38:18.687438 +0000 UTC\u003c/span\u003e\n\u003cspan class=\"go\"\u003erequest 2 2012-10-19 00:38:18.887471 +0000 UTC\u003c/span\u003e\n\u003cspan class=\"go\"\u003erequest 3 2012-10-19 00:38:19.087238 +0000 UTC\u003c/span\u003e\n\u003cspan class=\"go\"\u003erequest 4 2012-10-19 00:38:19.287338 +0000 UTC\u003c/span\u003e\n\u003cspan class=\"go\"\u003erequest 5 2012-10-19 00:38:19.487331 +0000 UTC\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "For the second batch of requests we serve the first\n3 immediately because of the burstable rate limiting,\nthen serve the remaining 2 with ~200ms delays each.",
          "docs_rendered": "\u003cp\u003eFor the second batch of requests we serve the first\n3 immediately because of the burstable rate limiting,\nthen serve the remaining 2 with ~200ms delays each.\u003c/p\u003e\n",
          "code": "\nrequest 1 2012-10-19 00:38:20.487578 +0000 UTC\nrequest 2 2012-10-19 00:38:20.487645 +0000 UTC\nrequest 3 2012-10-19 00:38:20.487676 +0000 UTC\nrequest 4 2012-10-19 00:38:20.687483 +0000 UTC\nrequest 5 2012-10-19 00:38:20.887542 +0000 UTC",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"go\"\u003erequest 1 2012-10-19 00:38:20.487578 +0000 UTC\u003c/span\u003e\n\u003cspan class=\"go\"\u003erequest 2 2012-10-19 00:38:20.487645 +0000 UTC\u003c/span\u003e\n\u003cspan class=\"go\"\u003erequest 3 2012-10-19 00:38:20.487676 +0000 UTC\u003c/span\u003e\n\u003cspan class=\"go\"\u003erequest 4 2012-10-19 00:38:20.687483 +0000 UTC\u003c/span\u003e\n\u003cspan class=\"go\"\u003erequest 5 2012-10-19 00:38:20.887542 +0000 UTC\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "atomic-counters",
    "Name": "Atomic Counters",
    "GoCode": "// The primary mechanism for managing state in Go is\n// communication over channels. We saw this for example\n// with [worker pools](worker-pools). There are a few other\n// options for managing state though. Here we'll\n// look at using the `sync/atomic` package for _atomic\n// counters_ accessed by multiple goroutines.\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sync\"\n\t\"sync/atomic\"\n)\n\nfunc main() {\n\n\t// We'll use an unsigned integer to represent our\n\t// (always-positive) counter.\n\tvar ops uint64\n\n\t// A WaitGroup will help us wait for all goroutines\n\t// to finish their work.\n\tvar wg sync.WaitGroup\n\n\t// We'll start 50 goroutines that each increment the\n\t// counter exactly 1000 times.\n\tfor i := 0; i \u003c 50; i++ {\n\t\twg.Add(1)\n\n\t\tgo func() {\n\t\t\tfor c := 0; c \u003c 1000; c++ {\n\t\t\t\t// To atomically increment the counter we\n\t\t\t\t// use `AddUint64`, giving it the memory\n\t\t\t\t// address of our `ops` counter with the\n\t\t\t\t// `\u0026` syntax.\n\t\t\t\tatomic.AddUint64(\u0026ops, 1)\n\t\t\t}\n\t\t\twg.Done()\n\t\t}()\n\t}\n\n\t// Wait until all the goroutines are done.\n\twg.Wait()\n\n\t// It's safe to access `ops` now because we know\n\t// no other goroutine is writing to it. Reading\n\t// atomics safely while they are being updated is\n\t// also possible, using functions like\n\t// `atomic.LoadUint64`.\n\tfmt.Println(\"ops:\", ops)\n}\n",
    "GoCodeHash": "7b491b40d56a77b01d8e2bd08366de081a4e8d99",
    "URLHash": "j-14agntvEO",
    "Segs": [
      [
        {
          "docs": "The primary mechanism for managing state in Go is\ncommunication over channels. We saw this for example\nwith [worker pools](worker-pools). There are a few other\noptions for managing state though. Here we'll\nlook at using the `sync/atomic` package for _atomic\ncounters_ accessed by multiple goroutines.",
          "docs_rendered": "\u003cp\u003eThe primary mechanism for managing state in Go is\ncommunication over channels. We saw this for example\nwith \u003ca href=\"worker-pools\"\u003eworker pools\u003c/a\u003e. There are a few other\noptions for managing state though. Here we\u0026rsquo;ll\nlook at using the \u003ccode\u003esync/atomic\u003c/code\u003e package for \u003cem\u003eatomic\ncounters\u003c/em\u003e accessed by multiple goroutines.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"fmt\"\n    \"sync\"\n    \"sync/atomic\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;sync\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;sync/atomic\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"fmt\"\n    \"sync\"\n    \"sync/atomic\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "We'll use an unsigned integer to represent our\n(always-positive) counter.",
          "docs_rendered": "\u003cp\u003eWe\u0026rsquo;ll use an unsigned integer to represent our\n(always-positive) counter.\u003c/p\u003e\n",
          "code": "\n    var ops uint64",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003eops\u003c/span\u003e \u003cspan class=\"kt\"\u003euint64\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    var ops uint64\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "A WaitGroup will help us wait for all goroutines\nto finish their work.",
          "docs_rendered": "\u003cp\u003eA WaitGroup will help us wait for all goroutines\nto finish their work.\u003c/p\u003e\n",
          "code": "\n    var wg sync.WaitGroup",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003ewg\u003c/span\u003e \u003cspan class=\"nx\"\u003esync\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eWaitGroup\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    var wg sync.WaitGroup\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "We'll start 50 goroutines that each increment the\ncounter exactly 1000 times.",
          "docs_rendered": "\u003cp\u003eWe\u0026rsquo;ll start 50 goroutines that each increment the\ncounter exactly 1000 times.\u003c/p\u003e\n",
          "code": "\n    for i := 0; i \u003c 50; i++ {\n        wg.Add(1)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e50\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003ewg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eAdd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    for i := 0; i \u003c 50; i++ {\n        wg.Add(1)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "\nTo atomically increment the counter we\nuse `AddUint64`, giving it the memory\naddress of our `ops` counter with the\n`\u0026` syntax.",
          "docs_rendered": "\u003cp\u003eTo atomically increment the counter we\nuse \u003ccode\u003eAddUint64\u003c/code\u003e, giving it the memory\naddress of our \u003ccode\u003eops\u003c/code\u003e counter with the\n\u003ccode\u003e\u0026amp;\u003c/code\u003e syntax.\u003c/p\u003e\n",
          "code": "        go func() {\n            for c := 0; c \u003c 1000; c++ {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e        \u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ec\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e1000\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ec\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "        go func() {\n            for c := 0; c \u003c 1000; c++ {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "                atomic.AddUint64(\u0026ops, 1)\n            }\n            wg.Done()\n        }()\n    }",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e                \u003cspan class=\"nx\"\u003eatomic\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eAddUint64\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003eops\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n            \u003cspan class=\"nx\"\u003ewg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eDone\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}()\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "                atomic.AddUint64(\u0026ops, 1)\n            }\n            wg.Done()\n        }()\n    }\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Wait until all the goroutines are done.",
          "docs_rendered": "\u003cp\u003eWait until all the goroutines are done.\u003c/p\u003e\n",
          "code": "\n    wg.Wait()",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ewg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eWait\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    wg.Wait()\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "It's safe to access `ops` now because we know\nno other goroutine is writing to it. Reading\natomics safely while they are being updated is\nalso possible, using functions like\n`atomic.LoadUint64`.",
          "docs_rendered": "\u003cp\u003eIt\u0026rsquo;s safe to access \u003ccode\u003eops\u003c/code\u003e now because we know\nno other goroutine is writing to it. Reading\natomics safely while they are being updated is\nalso possible, using functions like\n\u003ccode\u003eatomic.LoadUint64\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(\"ops:\", ops)\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;ops:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eops\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(\"ops:\", ops)\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "We expect to get exactly 50,000 operations. Had we\nused the non-atomic `ops++` to increment the counter,\nwe'd likely get a different number, changing between\nruns, because the goroutines would interfere with\neach other. Moreover, we'd get data race failures\nwhen running with the `-race` flag.",
          "docs_rendered": "\u003cp\u003eWe expect to get exactly 50,000 operations. Had we\nused the non-atomic \u003ccode\u003eops++\u003c/code\u003e to increment the counter,\nwe\u0026rsquo;d likely get a different number, changing between\nruns, because the goroutines would interfere with\neach other. Moreover, we\u0026rsquo;d get data race failures\nwhen running with the \u003ccode\u003e-race\u003c/code\u003e flag.\u003c/p\u003e\n",
          "code": "\n$ go run atomic-counters.go\nops: 50000",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run atomic-counters.go\n\u003cspan class=\"go\"\u003eops: 50000\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Next we'll look at mutexes, another tool for managing\nstate.",
          "docs_rendered": "\u003cp\u003eNext we\u0026rsquo;ll look at mutexes, another tool for managing\nstate.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "mutexes",
    "Name": "Mutexes",
    "GoCode": "// In the previous example we saw how to manage simple\n// counter state using [atomic operations](atomic-counters).\n// For more complex state we can use a \u003cem\u003e[mutex](http://en.wikipedia.org/wiki/Mutual_exclusion)\u003c/em\u003e\n// to safely access data across multiple goroutines.\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"sync\"\n\t\"sync/atomic\"\n\t\"time\"\n)\n\nfunc main() {\n\n\t// For our example the `state` will be a map.\n\tvar state = make(map[int]int)\n\n\t// This `mutex` will synchronize access to `state`.\n\tvar mutex = \u0026sync.Mutex{}\n\n\t// We'll keep track of how many read and write\n\t// operations we do.\n\tvar readOps uint64\n\tvar writeOps uint64\n\n\t// Here we start 100 goroutines to execute repeated\n\t// reads against the state, once per millisecond in\n\t// each goroutine.\n\tfor r := 0; r \u003c 100; r++ {\n\t\tgo func() {\n\t\t\ttotal := 0\n\t\t\tfor {\n\n\t\t\t\t// For each read we pick a key to access,\n\t\t\t\t// `Lock()` the `mutex` to ensure\n\t\t\t\t// exclusive access to the `state`, read\n\t\t\t\t// the value at the chosen key,\n\t\t\t\t// `Unlock()` the mutex, and increment\n\t\t\t\t// the `readOps` count.\n\t\t\t\tkey := rand.Intn(5)\n\t\t\t\tmutex.Lock()\n\t\t\t\ttotal += state[key]\n\t\t\t\tmutex.Unlock()\n\t\t\t\tatomic.AddUint64(\u0026readOps, 1)\n\n\t\t\t\t// Wait a bit between reads.\n\t\t\t\ttime.Sleep(time.Millisecond)\n\t\t\t}\n\t\t}()\n\t}\n\n\t// We'll also start 10 goroutines to simulate writes,\n\t// using the same pattern we did for reads.\n\tfor w := 0; w \u003c 10; w++ {\n\t\tgo func() {\n\t\t\tfor {\n\t\t\t\tkey := rand.Intn(5)\n\t\t\t\tval := rand.Intn(100)\n\t\t\t\tmutex.Lock()\n\t\t\t\tstate[key] = val\n\t\t\t\tmutex.Unlock()\n\t\t\t\tatomic.AddUint64(\u0026writeOps, 1)\n\t\t\t\ttime.Sleep(time.Millisecond)\n\t\t\t}\n\t\t}()\n\t}\n\n\t// Let the 10 goroutines work on the `state` and\n\t// `mutex` for a second.\n\ttime.Sleep(time.Second)\n\n\t// Take and report final operation counts.\n\treadOpsFinal := atomic.LoadUint64(\u0026readOps)\n\tfmt.Println(\"readOps:\", readOpsFinal)\n\twriteOpsFinal := atomic.LoadUint64(\u0026writeOps)\n\tfmt.Println(\"writeOps:\", writeOpsFinal)\n\n\t// With a final lock of `state`, show how it ended up.\n\tmutex.Lock()\n\tfmt.Println(\"state:\", state)\n\tmutex.Unlock()\n}\n",
    "GoCodeHash": "7cb6349117087c78ddb71c240e988ec8281c8952",
    "URLHash": "0WEmOOjoCjp",
    "Segs": [
      [
        {
          "docs": "In the previous example we saw how to manage simple\ncounter state using [atomic operations](atomic-counters).\nFor more complex state we can use a \u003cem\u003e[mutex](http://en.wikipedia.org/wiki/Mutual_exclusion)\u003c/em\u003e\nto safely access data across multiple goroutines.",
          "docs_rendered": "\u003cp\u003eIn the previous example we saw how to manage simple\ncounter state using \u003ca href=\"atomic-counters\"\u003eatomic operations\u003c/a\u003e.\nFor more complex state we can use a \u003cem\u003e\u003ca href=\"http://en.wikipedia.org/wiki/Mutual_exclusion\"\u003emutex\u003c/a\u003e\u003c/em\u003e\nto safely access data across multiple goroutines.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"fmt\"\n    \"math/rand\"\n    \"sync\"\n    \"sync/atomic\"\n    \"time\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;math/rand\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;sync\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;sync/atomic\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;time\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"fmt\"\n    \"math/rand\"\n    \"sync\"\n    \"sync/atomic\"\n    \"time\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "For our example the `state` will be a map.",
          "docs_rendered": "\u003cp\u003eFor our example the \u003ccode\u003estate\u003c/code\u003e will be a map.\u003c/p\u003e\n",
          "code": "\n    var state = make(map[int]int)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003estate\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    var state = make(map[int]int)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "This `mutex` will synchronize access to `state`.",
          "docs_rendered": "\u003cp\u003eThis \u003ccode\u003emutex\u003c/code\u003e will synchronize access to \u003ccode\u003estate\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n    var mutex = \u0026sync.Mutex{}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003emutex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003esync\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eMutex\u003c/span\u003e\u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    var mutex = \u0026sync.Mutex{}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "We'll keep track of how many read and write\noperations we do.",
          "docs_rendered": "\u003cp\u003eWe\u0026rsquo;ll keep track of how many read and write\noperations we do.\u003c/p\u003e\n",
          "code": "\n    var readOps uint64\n    var writeOps uint64",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003ereadOps\u003c/span\u003e \u003cspan class=\"kt\"\u003euint64\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003ewriteOps\u003c/span\u003e \u003cspan class=\"kt\"\u003euint64\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    var readOps uint64\n    var writeOps uint64\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Here we start 100 goroutines to execute repeated\nreads against the state, once per millisecond in\neach goroutine.",
          "docs_rendered": "\u003cp\u003eHere we start 100 goroutines to execute repeated\nreads against the state, once per millisecond in\neach goroutine.\u003c/p\u003e\n",
          "code": "\n    for r := 0; r \u003c 100; r++ {\n        go func() {\n            total := 0\n            for {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003er\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"nx\"\u003etotal\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n            \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    for r := 0; r \u003c 100; r++ {\n        go func() {\n            total := 0\n            for {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "For each read we pick a key to access,\n`Lock()` the `mutex` to ensure\nexclusive access to the `state`, read\nthe value at the chosen key,\n`Unlock()` the mutex, and increment\nthe `readOps` count.",
          "docs_rendered": "\u003cp\u003eFor each read we pick a key to access,\n\u003ccode\u003eLock()\u003c/code\u003e the \u003ccode\u003emutex\u003c/code\u003e to ensure\nexclusive access to the \u003ccode\u003estate\u003c/code\u003e, read\nthe value at the chosen key,\n\u003ccode\u003eUnlock()\u003c/code\u003e the mutex, and increment\nthe \u003ccode\u003ereadOps\u003c/code\u003e count.\u003c/p\u003e\n",
          "code": "\n                key := rand.Intn(5)\n                mutex.Lock()\n                total += state[key]\n                mutex.Unlock()\n                atomic.AddUint64(\u0026readOps, 1)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e                \u003cspan class=\"nx\"\u003ekey\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003erand\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eIntn\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"nx\"\u003emutex\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eLock\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n                \u003cspan class=\"nx\"\u003etotal\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"nx\"\u003estate\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n                \u003cspan class=\"nx\"\u003emutex\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eUnlock\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n                \u003cspan class=\"nx\"\u003eatomic\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eAddUint64\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003ereadOps\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "                key := rand.Intn(5)\n                mutex.Lock()\n                total += state[key]\n                mutex.Unlock()\n                atomic.AddUint64(\u0026readOps, 1)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Wait a bit between reads.",
          "docs_rendered": "\u003cp\u003eWait a bit between reads.\u003c/p\u003e\n",
          "code": "\n                time.Sleep(time.Millisecond)\n            }\n        }()\n    }",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e                \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSleep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eMillisecond\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}()\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "                time.Sleep(time.Millisecond)\n            }\n        }()\n    }\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "We'll also start 10 goroutines to simulate writes,\nusing the same pattern we did for reads.",
          "docs_rendered": "\u003cp\u003eWe\u0026rsquo;ll also start 10 goroutines to simulate writes,\nusing the same pattern we did for reads.\u003c/p\u003e\n",
          "code": "\n    for w := 0; w \u003c 10; w++ {\n        go func() {\n            for {\n                key := rand.Intn(5)\n                val := rand.Intn(100)\n                mutex.Lock()\n                state[key] = val\n                mutex.Unlock()\n                atomic.AddUint64(\u0026writeOps, 1)\n                time.Sleep(time.Millisecond)\n            }\n        }()\n    }",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ew\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ew\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ew\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"nx\"\u003ekey\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003erand\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eIntn\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"nx\"\u003eval\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003erand\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eIntn\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"nx\"\u003emutex\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eLock\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n                \u003cspan class=\"nx\"\u003estate\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eval\u003c/span\u003e\n                \u003cspan class=\"nx\"\u003emutex\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eUnlock\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n                \u003cspan class=\"nx\"\u003eatomic\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eAddUint64\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003ewriteOps\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSleep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eMillisecond\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}()\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    for w := 0; w \u003c 10; w++ {\n        go func() {\n            for {\n                key := rand.Intn(5)\n                val := rand.Intn(100)\n                mutex.Lock()\n                state[key] = val\n                mutex.Unlock()\n                atomic.AddUint64(\u0026writeOps, 1)\n                time.Sleep(time.Millisecond)\n            }\n        }()\n    }\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Let the 10 goroutines work on the `state` and\n`mutex` for a second.",
          "docs_rendered": "\u003cp\u003eLet the 10 goroutines work on the \u003ccode\u003estate\u003c/code\u003e and\n\u003ccode\u003emutex\u003c/code\u003e for a second.\u003c/p\u003e\n",
          "code": "\n    time.Sleep(time.Second)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSleep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSecond\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    time.Sleep(time.Second)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Take and report final operation counts.",
          "docs_rendered": "\u003cp\u003eTake and report final operation counts.\u003c/p\u003e\n",
          "code": "\n    readOpsFinal := atomic.LoadUint64(\u0026readOps)\n    fmt.Println(\"readOps:\", readOpsFinal)\n    writeOpsFinal := atomic.LoadUint64(\u0026writeOps)\n    fmt.Println(\"writeOps:\", writeOpsFinal)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ereadOpsFinal\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eatomic\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eLoadUint64\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003ereadOps\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;readOps:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ereadOpsFinal\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ewriteOpsFinal\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eatomic\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eLoadUint64\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003ewriteOps\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;writeOps:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ewriteOpsFinal\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    readOpsFinal := atomic.LoadUint64(\u0026readOps)\n    fmt.Println(\"readOps:\", readOpsFinal)\n    writeOpsFinal := atomic.LoadUint64(\u0026writeOps)\n    fmt.Println(\"writeOps:\", writeOpsFinal)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "With a final lock of `state`, show how it ended up.",
          "docs_rendered": "\u003cp\u003eWith a final lock of \u003ccode\u003estate\u003c/code\u003e, show how it ended up.\u003c/p\u003e\n",
          "code": "\n    mutex.Lock()\n    fmt.Println(\"state:\", state)\n    mutex.Unlock()\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003emutex\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eLock\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;state:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003estate\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003emutex\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eUnlock\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    mutex.Lock()\n    fmt.Println(\"state:\", state)\n    mutex.Unlock()\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "Running the program shows that we executed about\n90,000 total operations against our `mutex`-synchronized\n`state`.",
          "docs_rendered": "\u003cp\u003eRunning the program shows that we executed about\n90,000 total operations against our \u003ccode\u003emutex\u003c/code\u003e-synchronized\n\u003ccode\u003estate\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n$ go run mutexes.go\nreadOps: 83285\nwriteOps: 8320\nstate: map[1:97 4:53 0:33 2:15 3:2]",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run mutexes.go\n\u003cspan class=\"go\"\u003ereadOps: 83285\u003c/span\u003e\n\u003cspan class=\"go\"\u003ewriteOps: 8320\u003c/span\u003e\n\u003cspan class=\"go\"\u003estate: map[1:97 4:53 0:33 2:15 3:2]\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Next we'll look at implementing this same state\nmanagement task using only goroutines and channels.",
          "docs_rendered": "\u003cp\u003eNext we\u0026rsquo;ll look at implementing this same state\nmanagement task using only goroutines and channels.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "stateful-goroutines",
    "Name": "Stateful Goroutines",
    "GoCode": "// In the previous example we used explicit locking with\n// [mutexes](mutexes) to synchronize access to shared state\n// across multiple goroutines. Another option is to use the\n// built-in synchronization features of  goroutines and\n// channels to achieve the same result. This channel-based\n// approach aligns with Go's ideas of sharing memory by\n// communicating and having each piece of data owned\n// by exactly 1 goroutine.\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"sync/atomic\"\n\t\"time\"\n)\n\n// In this example our state will be owned by a single\n// goroutine. This will guarantee that the data is never\n// corrupted with concurrent access. In order to read or\n// write that state, other goroutines will send messages\n// to the owning goroutine and receive corresponding\n// replies. These `readOp` and `writeOp` `struct`s\n// encapsulate those requests and a way for the owning\n// goroutine to respond.\ntype readOp struct {\n\tkey  int\n\tresp chan int\n}\ntype writeOp struct {\n\tkey  int\n\tval  int\n\tresp chan bool\n}\n\nfunc main() {\n\n\t// As before we'll count how many operations we perform.\n\tvar readOps uint64\n\tvar writeOps uint64\n\n\t// The `reads` and `writes` channels will be used by\n\t// other goroutines to issue read and write requests,\n\t// respectively.\n\treads := make(chan readOp)\n\twrites := make(chan writeOp)\n\n\t// Here is the goroutine that owns the `state`, which\n\t// is a map as in the previous example but now private\n\t// to the stateful goroutine. This goroutine repeatedly\n\t// selects on the `reads` and `writes` channels,\n\t// responding to requests as they arrive. A response\n\t// is executed by first performing the requested\n\t// operation and then sending a value on the response\n\t// channel `resp` to indicate success (and the desired\n\t// value in the case of `reads`).\n\tgo func() {\n\t\tvar state = make(map[int]int)\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase read := \u003c-reads:\n\t\t\t\tread.resp \u003c- state[read.key]\n\t\t\tcase write := \u003c-writes:\n\t\t\t\tstate[write.key] = write.val\n\t\t\t\twrite.resp \u003c- true\n\t\t\t}\n\t\t}\n\t}()\n\n\t// This starts 100 goroutines to issue reads to the\n\t// state-owning goroutine via the `reads` channel.\n\t// Each read requires constructing a `readOp`, sending\n\t// it over the `reads` channel, and the receiving the\n\t// result over the provided `resp` channel.\n\tfor r := 0; r \u003c 100; r++ {\n\t\tgo func() {\n\t\t\tfor {\n\t\t\t\tread := readOp{\n\t\t\t\t\tkey:  rand.Intn(5),\n\t\t\t\t\tresp: make(chan int)}\n\t\t\t\treads \u003c- read\n\t\t\t\t\u003c-read.resp\n\t\t\t\tatomic.AddUint64(\u0026readOps, 1)\n\t\t\t\ttime.Sleep(time.Millisecond)\n\t\t\t}\n\t\t}()\n\t}\n\n\t// We start 10 writes as well, using a similar\n\t// approach.\n\tfor w := 0; w \u003c 10; w++ {\n\t\tgo func() {\n\t\t\tfor {\n\t\t\t\twrite := writeOp{\n\t\t\t\t\tkey:  rand.Intn(5),\n\t\t\t\t\tval:  rand.Intn(100),\n\t\t\t\t\tresp: make(chan bool)}\n\t\t\t\twrites \u003c- write\n\t\t\t\t\u003c-write.resp\n\t\t\t\tatomic.AddUint64(\u0026writeOps, 1)\n\t\t\t\ttime.Sleep(time.Millisecond)\n\t\t\t}\n\t\t}()\n\t}\n\n\t// Let the goroutines work for a second.\n\ttime.Sleep(time.Second)\n\n\t// Finally, capture and report the op counts.\n\treadOpsFinal := atomic.LoadUint64(\u0026readOps)\n\tfmt.Println(\"readOps:\", readOpsFinal)\n\twriteOpsFinal := atomic.LoadUint64(\u0026writeOps)\n\tfmt.Println(\"writeOps:\", writeOpsFinal)\n}\n",
    "GoCodeHash": "9c73569ad2e16252b04fe171618db4c5fd09efb7",
    "URLHash": "5mf_P9xqBzk",
    "Segs": [
      [
        {
          "docs": "In the previous example we used explicit locking with\n[mutexes](mutexes) to synchronize access to shared state\nacross multiple goroutines. Another option is to use the\nbuilt-in synchronization features of  goroutines and\nchannels to achieve the same result. This channel-based\napproach aligns with Go's ideas of sharing memory by\ncommunicating and having each piece of data owned\nby exactly 1 goroutine.",
          "docs_rendered": "\u003cp\u003eIn the previous example we used explicit locking with\n\u003ca href=\"mutexes\"\u003emutexes\u003c/a\u003e to synchronize access to shared state\nacross multiple goroutines. Another option is to use the\nbuilt-in synchronization features of  goroutines and\nchannels to achieve the same result. This channel-based\napproach aligns with Go\u0026rsquo;s ideas of sharing memory by\ncommunicating and having each piece of data owned\nby exactly 1 goroutine.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"fmt\"\n    \"math/rand\"\n    \"sync/atomic\"\n    \"time\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;math/rand\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;sync/atomic\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;time\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"fmt\"\n    \"math/rand\"\n    \"sync/atomic\"\n    \"time\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "In this example our state will be owned by a single\ngoroutine. This will guarantee that the data is never\ncorrupted with concurrent access. In order to read or\nwrite that state, other goroutines will send messages\nto the owning goroutine and receive corresponding\nreplies. These `readOp` and `writeOp` `struct`s\nencapsulate those requests and a way for the owning\ngoroutine to respond.",
          "docs_rendered": "\u003cp\u003eIn this example our state will be owned by a single\ngoroutine. This will guarantee that the data is never\ncorrupted with concurrent access. In order to read or\nwrite that state, other goroutines will send messages\nto the owning goroutine and receive corresponding\nreplies. These \u003ccode\u003ereadOp\u003c/code\u003e and \u003ccode\u003ewriteOp\u003c/code\u003e \u003ccode\u003estruct\u003c/code\u003es\nencapsulate those requests and a way for the owning\ngoroutine to respond.\u003c/p\u003e\n",
          "code": "\ntype readOp struct {\n    key  int\n    resp chan int\n}\ntype writeOp struct {\n    key  int\n    val  int\n    resp chan bool\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003etype\u003c/span\u003e \u003cspan class=\"nx\"\u003ereadOp\u003c/span\u003e \u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ekey\u003c/span\u003e  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eresp\u003c/span\u003e \u003cspan class=\"kd\"\u003echan\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"kd\"\u003etype\u003c/span\u003e \u003cspan class=\"nx\"\u003ewriteOp\u003c/span\u003e \u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ekey\u003c/span\u003e  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eval\u003c/span\u003e  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eresp\u003c/span\u003e \u003cspan class=\"kd\"\u003echan\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "type readOp struct {\n    key  int\n    resp chan int\n}\ntype writeOp struct {\n    key  int\n    val  int\n    resp chan bool\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "As before we'll count how many operations we perform.",
          "docs_rendered": "\u003cp\u003eAs before we\u0026rsquo;ll count how many operations we perform.\u003c/p\u003e\n",
          "code": "\n    var readOps uint64\n    var writeOps uint64",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003ereadOps\u003c/span\u003e \u003cspan class=\"kt\"\u003euint64\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003ewriteOps\u003c/span\u003e \u003cspan class=\"kt\"\u003euint64\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    var readOps uint64\n    var writeOps uint64\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "The `reads` and `writes` channels will be used by\nother goroutines to issue read and write requests,\nrespectively.",
          "docs_rendered": "\u003cp\u003eThe \u003ccode\u003ereads\u003c/code\u003e and \u003ccode\u003ewrites\u003c/code\u003e channels will be used by\nother goroutines to issue read and write requests,\nrespectively.\u003c/p\u003e\n",
          "code": "\n    reads := make(chan readOp)\n    writes := make(chan writeOp)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ereads\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003echan\u003c/span\u003e \u003cspan class=\"nx\"\u003ereadOp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ewrites\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003echan\u003c/span\u003e \u003cspan class=\"nx\"\u003ewriteOp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    reads := make(chan readOp)\n    writes := make(chan writeOp)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Here is the goroutine that owns the `state`, which\nis a map as in the previous example but now private\nto the stateful goroutine. This goroutine repeatedly\nselects on the `reads` and `writes` channels,\nresponding to requests as they arrive. A response\nis executed by first performing the requested\noperation and then sending a value on the response\nchannel `resp` to indicate success (and the desired\nvalue in the case of `reads`).",
          "docs_rendered": "\u003cp\u003eHere is the goroutine that owns the \u003ccode\u003estate\u003c/code\u003e, which\nis a map as in the previous example but now private\nto the stateful goroutine. This goroutine repeatedly\nselects on the \u003ccode\u003ereads\u003c/code\u003e and \u003ccode\u003ewrites\u003c/code\u003e channels,\nresponding to requests as they arrive. A response\nis executed by first performing the requested\noperation and then sending a value on the response\nchannel \u003ccode\u003eresp\u003c/code\u003e to indicate success (and the desired\nvalue in the case of \u003ccode\u003ereads\u003c/code\u003e).\u003c/p\u003e\n",
          "code": "\n    go func() {\n        var state = make(map[int]int)\n        for {\n            select {\n            case read := \u003c-reads:\n                read.resp \u003c- state[read.key]\n            case write := \u003c-writes:\n                state[write.key] = write.val\n                write.resp \u003c- true\n            }\n        }\n    }()",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003estate\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eselect\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"nx\"\u003eread\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan class=\"nx\"\u003ereads\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n                \u003cspan class=\"nx\"\u003eread\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eresp\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"nx\"\u003estate\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eread\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"nx\"\u003ewrite\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan class=\"nx\"\u003ewrites\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n                \u003cspan class=\"nx\"\u003estate\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eval\u003c/span\u003e\n                \u003cspan class=\"nx\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eresp\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}()\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    go func() {\n        var state = make(map[int]int)\n        for {\n            select {\n            case read := \u003c-reads:\n                read.resp \u003c- state[read.key]\n            case write := \u003c-writes:\n                state[write.key] = write.val\n                write.resp \u003c- true\n            }\n        }\n    }()\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "This starts 100 goroutines to issue reads to the\nstate-owning goroutine via the `reads` channel.\nEach read requires constructing a `readOp`, sending\nit over the `reads` channel, and the receiving the\nresult over the provided `resp` channel.",
          "docs_rendered": "\u003cp\u003eThis starts 100 goroutines to issue reads to the\nstate-owning goroutine via the \u003ccode\u003ereads\u003c/code\u003e channel.\nEach read requires constructing a \u003ccode\u003ereadOp\u003c/code\u003e, sending\nit over the \u003ccode\u003ereads\u003c/code\u003e channel, and the receiving the\nresult over the provided \u003ccode\u003eresp\u003c/code\u003e channel.\u003c/p\u003e\n",
          "code": "\n    for r := 0; r \u003c 100; r++ {\n        go func() {\n            for {\n                read := readOp{\n                    key:  rand.Intn(5),\n                    resp: make(chan int)}\n                reads \u003c- read\n                \u003c-read.resp\n                atomic.AddUint64(\u0026readOps, 1)\n                time.Sleep(time.Millisecond)\n            }\n        }()\n    }",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003er\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"nx\"\u003eread\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003ereadOp\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e  \u003cspan class=\"nx\"\u003erand\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eIntn\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n                    \u003cspan class=\"nx\"\u003eresp\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003echan\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)}\u003c/span\u003e\n                \u003cspan class=\"nx\"\u003ereads\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"nx\"\u003eread\u003c/span\u003e\n                \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan class=\"nx\"\u003eread\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eresp\u003c/span\u003e\n                \u003cspan class=\"nx\"\u003eatomic\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eAddUint64\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003ereadOps\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSleep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eMillisecond\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}()\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    for r := 0; r \u003c 100; r++ {\n        go func() {\n            for {\n                read := readOp{\n                    key:  rand.Intn(5),\n                    resp: make(chan int)}\n                reads \u003c- read\n                \u003c-read.resp\n                atomic.AddUint64(\u0026readOps, 1)\n                time.Sleep(time.Millisecond)\n            }\n        }()\n    }\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "We start 10 writes as well, using a similar\napproach.",
          "docs_rendered": "\u003cp\u003eWe start 10 writes as well, using a similar\napproach.\u003c/p\u003e\n",
          "code": "\n    for w := 0; w \u003c 10; w++ {\n        go func() {\n            for {\n                write := writeOp{\n                    key:  rand.Intn(5),\n                    val:  rand.Intn(100),\n                    resp: make(chan bool)}\n                writes \u003c- write\n                \u003c-write.resp\n                atomic.AddUint64(\u0026writeOps, 1)\n                time.Sleep(time.Millisecond)\n            }\n        }()\n    }",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ew\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ew\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ew\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"nx\"\u003ewrite\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003ewriteOp\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e  \u003cspan class=\"nx\"\u003erand\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eIntn\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n                    \u003cspan class=\"nx\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e  \u003cspan class=\"nx\"\u003erand\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eIntn\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n                    \u003cspan class=\"nx\"\u003eresp\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003echan\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e\u003cspan class=\"p\"\u003e)}\u003c/span\u003e\n                \u003cspan class=\"nx\"\u003ewrites\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"nx\"\u003ewrite\u003c/span\u003e\n                \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan class=\"nx\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eresp\u003c/span\u003e\n                \u003cspan class=\"nx\"\u003eatomic\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eAddUint64\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003ewriteOps\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSleep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eMillisecond\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}()\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    for w := 0; w \u003c 10; w++ {\n        go func() {\n            for {\n                write := writeOp{\n                    key:  rand.Intn(5),\n                    val:  rand.Intn(100),\n                    resp: make(chan bool)}\n                writes \u003c- write\n                \u003c-write.resp\n                atomic.AddUint64(\u0026writeOps, 1)\n                time.Sleep(time.Millisecond)\n            }\n        }()\n    }\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Let the goroutines work for a second.",
          "docs_rendered": "\u003cp\u003eLet the goroutines work for a second.\u003c/p\u003e\n",
          "code": "\n    time.Sleep(time.Second)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSleep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSecond\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    time.Sleep(time.Second)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Finally, capture and report the op counts.",
          "docs_rendered": "\u003cp\u003eFinally, capture and report the op counts.\u003c/p\u003e\n",
          "code": "\n    readOpsFinal := atomic.LoadUint64(\u0026readOps)\n    fmt.Println(\"readOps:\", readOpsFinal)\n    writeOpsFinal := atomic.LoadUint64(\u0026writeOps)\n    fmt.Println(\"writeOps:\", writeOpsFinal)\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ereadOpsFinal\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eatomic\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eLoadUint64\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003ereadOps\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;readOps:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ereadOpsFinal\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ewriteOpsFinal\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eatomic\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eLoadUint64\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003ewriteOps\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;writeOps:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ewriteOpsFinal\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    readOpsFinal := atomic.LoadUint64(\u0026readOps)\n    fmt.Println(\"readOps:\", readOpsFinal)\n    writeOpsFinal := atomic.LoadUint64(\u0026writeOps)\n    fmt.Println(\"writeOps:\", writeOpsFinal)\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "Running our program shows that the goroutine-based\nstate management example completes about 80,000\ntotal operations.",
          "docs_rendered": "\u003cp\u003eRunning our program shows that the goroutine-based\nstate management example completes about 80,000\ntotal operations.\u003c/p\u003e\n",
          "code": "\n$ go run stateful-goroutines.go\nreadOps: 71708\nwriteOps: 7177",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run stateful-goroutines.go\n\u003cspan class=\"go\"\u003ereadOps: 71708\u003c/span\u003e\n\u003cspan class=\"go\"\u003ewriteOps: 7177\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "For this particular case the goroutine-based approach\nwas a bit more involved than the mutex-based one. It\nmight be useful in certain cases though, for example\nwhere you have other channels involved or when managing\nmultiple such mutexes would be error-prone. You should\nuse whichever approach feels most natural, especially\nwith respect to understanding the correctness of your\nprogram.",
          "docs_rendered": "\u003cp\u003eFor this particular case the goroutine-based approach\nwas a bit more involved than the mutex-based one. It\nmight be useful in certain cases though, for example\nwhere you have other channels involved or when managing\nmultiple such mutexes would be error-prone. You should\nuse whichever approach feels most natural, especially\nwith respect to understanding the correctness of your\nprogram.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "sorting",
    "Name": "Sorting",
    "GoCode": "// Go's `sort` package implements sorting for builtins\n// and user-defined types. We'll look at sorting for\n// builtins first.\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sort\"\n)\n\nfunc main() {\n\n\t// Sort methods are specific to the builtin type;\n\t// here's an example for strings. Note that sorting is\n\t// in-place, so it changes the given slice and doesn't\n\t// return a new one.\n\tstrs := []string{\"c\", \"a\", \"b\"}\n\tsort.Strings(strs)\n\tfmt.Println(\"Strings:\", strs)\n\n\t// An example of sorting `int`s.\n\tints := []int{7, 2, 4}\n\tsort.Ints(ints)\n\tfmt.Println(\"Ints:   \", ints)\n\n\t// We can also use `sort` to check if a slice is\n\t// already in sorted order.\n\ts := sort.IntsAreSorted(ints)\n\tfmt.Println(\"Sorted: \", s)\n}\n",
    "GoCodeHash": "c39a7498686fe1d74f729fd6b21a70bf063abf14",
    "URLHash": "_gY0tANzJ4l",
    "Segs": [
      [
        {
          "docs": "Go's `sort` package implements sorting for builtins\nand user-defined types. We'll look at sorting for\nbuiltins first.",
          "docs_rendered": "\u003cp\u003eGo\u0026rsquo;s \u003ccode\u003esort\u003c/code\u003e package implements sorting for builtins\nand user-defined types. We\u0026rsquo;ll look at sorting for\nbuiltins first.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"fmt\"\n    \"sort\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;sort\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"fmt\"\n    \"sort\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Sort methods are specific to the builtin type;\nhere's an example for strings. Note that sorting is\nin-place, so it changes the given slice and doesn't\nreturn a new one.",
          "docs_rendered": "\u003cp\u003eSort methods are specific to the builtin type;\nhere\u0026rsquo;s an example for strings. Note that sorting is\nin-place, so it changes the given slice and doesn\u0026rsquo;t\nreturn a new one.\u003c/p\u003e\n",
          "code": "\n    strs := []string{\"c\", \"a\", \"b\"}\n    sort.Strings(strs)\n    fmt.Println(\"Strings:\", strs)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003estrs\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;c\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;a\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;b\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003esort\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eStrings\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estrs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Strings:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003estrs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    strs := []string{\"c\", \"a\", \"b\"}\n    sort.Strings(strs)\n    fmt.Println(\"Strings:\", strs)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "An example of sorting `int`s.",
          "docs_rendered": "\u003cp\u003eAn example of sorting \u003ccode\u003eint\u003c/code\u003es.\u003c/p\u003e\n",
          "code": "\n    ints := []int{7, 2, 4}\n    sort.Ints(ints)\n    fmt.Println(\"Ints:   \", ints)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003eints\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003esort\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eInts\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eints\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Ints:   \u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eints\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    ints := []int{7, 2, 4}\n    sort.Ints(ints)\n    fmt.Println(\"Ints:   \", ints)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "We can also use `sort` to check if a slice is\nalready in sorted order.",
          "docs_rendered": "\u003cp\u003eWe can also use \u003ccode\u003esort\u003c/code\u003e to check if a slice is\nalready in sorted order.\u003c/p\u003e\n",
          "code": "\n    s := sort.IntsAreSorted(ints)\n    fmt.Println(\"Sorted: \", s)\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003es\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003esort\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eIntsAreSorted\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eints\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Sorted: \u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    s := sort.IntsAreSorted(ints)\n    fmt.Println(\"Sorted: \", s)\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "Running our program prints the sorted string and int\nslices and `true` as the result of our `AreSorted` test.",
          "docs_rendered": "\u003cp\u003eRunning our program prints the sorted string and int\nslices and \u003ccode\u003etrue\u003c/code\u003e as the result of our \u003ccode\u003eAreSorted\u003c/code\u003e test.\u003c/p\u003e\n",
          "code": "\n$ go run sorting.go\nStrings: [a b c]\nInts:    [2 4 7]\nSorted:  true",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run sorting.go\n\u003cspan class=\"go\"\u003eStrings: [a b c]\u003c/span\u003e\n\u003cspan class=\"go\"\u003eInts:    [2 4 7]\u003c/span\u003e\n\u003cspan class=\"go\"\u003eSorted:  true\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "sorting-by-functions",
    "Name": "Sorting by Functions",
    "GoCode": "// Sometimes we'll want to sort a collection by something\n// other than its natural order. For example, suppose we\n// wanted to sort strings by their length instead of\n// alphabetically. Here's an example of custom sorts\n// in Go.\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sort\"\n)\n\n// In order to sort by a custom function in Go, we need a\n// corresponding type. Here we've created a `byLength`\n// type that is just an alias for the builtin `[]string`\n// type.\ntype byLength []string\n\n// We implement `sort.Interface` - `Len`, `Less`, and\n// `Swap` - on our type so we can use the `sort` package's\n// generic `Sort` function. `Len` and `Swap`\n// will usually be similar across types and `Less` will\n// hold the actual custom sorting logic. In our case we\n// want to sort in order of increasing string length, so\n// we use `len(s[i])` and `len(s[j])` here.\nfunc (s byLength) Len() int {\n\treturn len(s)\n}\nfunc (s byLength) Swap(i, j int) {\n\ts[i], s[j] = s[j], s[i]\n}\nfunc (s byLength) Less(i, j int) bool {\n\treturn len(s[i]) \u003c len(s[j])\n}\n\n// With all of this in place, we can now implement our\n// custom sort by converting the original `fruits` slice\n// to `byLength`, and then use `sort.Sort` on that typed\n// slice.\nfunc main() {\n\tfruits := []string{\"peach\", \"banana\", \"kiwi\"}\n\tsort.Sort(byLength(fruits))\n\tfmt.Println(fruits)\n}\n",
    "GoCodeHash": "e5a6006366e05ee7785eebac8ba588e4b937a197",
    "URLHash": "h4g4vaLBtkw",
    "Segs": [
      [
        {
          "docs": "Sometimes we'll want to sort a collection by something\nother than its natural order. For example, suppose we\nwanted to sort strings by their length instead of\nalphabetically. Here's an example of custom sorts\nin Go.",
          "docs_rendered": "\u003cp\u003eSometimes we\u0026rsquo;ll want to sort a collection by something\nother than its natural order. For example, suppose we\nwanted to sort strings by their length instead of\nalphabetically. Here\u0026rsquo;s an example of custom sorts\nin Go.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"fmt\"\n    \"sort\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;sort\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"fmt\"\n    \"sort\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "In order to sort by a custom function in Go, we need a\ncorresponding type. Here we've created a `byLength`\ntype that is just an alias for the builtin `[]string`\ntype.",
          "docs_rendered": "\u003cp\u003eIn order to sort by a custom function in Go, we need a\ncorresponding type. Here we\u0026rsquo;ve created a \u003ccode\u003ebyLength\u003c/code\u003e\ntype that is just an alias for the builtin \u003ccode\u003e[]string\u003c/code\u003e\ntype.\u003c/p\u003e\n",
          "code": "\ntype byLength []string",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003etype\u003c/span\u003e \u003cspan class=\"nx\"\u003ebyLength\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "type byLength []string\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "We implement `sort.Interface` - `Len`, `Less`, and\n`Swap` - on our type so we can use the `sort` package's\ngeneric `Sort` function. `Len` and `Swap`\nwill usually be similar across types and `Less` will\nhold the actual custom sorting logic. In our case we\nwant to sort in order of increasing string length, so\nwe use `len(s[i])` and `len(s[j])` here.",
          "docs_rendered": "\u003cp\u003eWe implement \u003ccode\u003esort.Interface\u003c/code\u003e - \u003ccode\u003eLen\u003c/code\u003e, \u003ccode\u003eLess\u003c/code\u003e, and\n\u003ccode\u003eSwap\u003c/code\u003e - on our type so we can use the \u003ccode\u003esort\u003c/code\u003e package\u0026rsquo;s\ngeneric \u003ccode\u003eSort\u003c/code\u003e function. \u003ccode\u003eLen\u003c/code\u003e and \u003ccode\u003eSwap\u003c/code\u003e\nwill usually be similar across types and \u003ccode\u003eLess\u003c/code\u003e will\nhold the actual custom sorting logic. In our case we\nwant to sort in order of increasing string length, so\nwe use \u003ccode\u003elen(s[i])\u003c/code\u003e and \u003ccode\u003elen(s[j])\u003c/code\u003e here.\u003c/p\u003e\n",
          "code": "\nfunc (s byLength) Len() int {\n    return len(s)\n}\nfunc (s byLength) Swap(i, j int) {\n    s[i], s[j] = s[j], s[i]\n}\nfunc (s byLength) Less(i, j int) bool {\n    return len(s[i]) \u003c len(s[j])\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003es\u003c/span\u003e \u003cspan class=\"nx\"\u003ebyLength\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nx\"\u003eLen\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003es\u003c/span\u003e \u003cspan class=\"nx\"\u003ebyLength\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nx\"\u003eSwap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003es\u003c/span\u003e \u003cspan class=\"nx\"\u003ebyLength\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nx\"\u003eLess\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nb\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func (s byLength) Len() int {\n    return len(s)\n}\nfunc (s byLength) Swap(i, j int) {\n    s[i], s[j] = s[j], s[i]\n}\nfunc (s byLength) Less(i, j int) bool {\n    return len(s[i]) \u003c len(s[j])\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "With all of this in place, we can now implement our\ncustom sort by converting the original `fruits` slice\nto `byLength`, and then use `sort.Sort` on that typed\nslice.",
          "docs_rendered": "\u003cp\u003eWith all of this in place, we can now implement our\ncustom sort by converting the original \u003ccode\u003efruits\u003c/code\u003e slice\nto \u003ccode\u003ebyLength\u003c/code\u003e, and then use \u003ccode\u003esort.Sort\u003c/code\u003e on that typed\nslice.\u003c/p\u003e\n",
          "code": "\nfunc main() {\n    fruits := []string{\"peach\", \"banana\", \"kiwi\"}\n    sort.Sort(byLength(fruits))\n    fmt.Println(fruits)\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efruits\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;peach\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;banana\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;kiwi\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003esort\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ebyLength\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efruits\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efruits\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n    fruits := []string{\"peach\", \"banana\", \"kiwi\"}\n    sort.Sort(byLength(fruits))\n    fmt.Println(fruits)\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "Running our program shows a list sorted by string\nlength, as desired.",
          "docs_rendered": "\u003cp\u003eRunning our program shows a list sorted by string\nlength, as desired.\u003c/p\u003e\n",
          "code": "\n$ go run sorting-by-functions.go \n[kiwi peach banana]",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run sorting-by-functions.go \n\u003cspan class=\"go\"\u003e[kiwi peach banana]\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "By following this same pattern of creating a custom\ntype, implementing the three `Interface` methods on that\ntype, and then calling sort.Sort on a collection of that\ncustom type, we can sort Go slices by arbitrary\nfunctions.",
          "docs_rendered": "\u003cp\u003eBy following this same pattern of creating a custom\ntype, implementing the three \u003ccode\u003eInterface\u003c/code\u003e methods on that\ntype, and then calling sort.Sort on a collection of that\ncustom type, we can sort Go slices by arbitrary\nfunctions.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "panic",
    "Name": "Panic",
    "GoCode": "// A `panic` typically means something went unexpectedly\n// wrong. Mostly we use it to fail fast on errors that\n// shouldn't occur during normal operation, or that we\n// aren't prepared to handle gracefully.\n\npackage main\n\nimport \"os\"\n\nfunc main() {\n\n\t// We'll use panic throughout this site to check for\n\t// unexpected errors. This is the only program on the\n\t// site designed to panic.\n\tpanic(\"a problem\")\n\n\t// A common use of panic is to abort if a function\n\t// returns an error value that we don't know how to\n\t// (or want to) handle. Here's an example of\n\t// `panic`king if we get an unexpected error when creating a new file.\n\t_, err := os.Create(\"/tmp/file\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n",
    "GoCodeHash": "d1d154be95ba37739e3598a9195b6ae0a427bc80",
    "URLHash": "9-2vCvRuhmE",
    "Segs": [
      [
        {
          "docs": "A `panic` typically means something went unexpectedly\nwrong. Mostly we use it to fail fast on errors that\nshouldn't occur during normal operation, or that we\naren't prepared to handle gracefully.",
          "docs_rendered": "\u003cp\u003eA \u003ccode\u003epanic\u003c/code\u003e typically means something went unexpectedly\nwrong. Mostly we use it to fail fast on errors that\nshouldn\u0026rsquo;t occur during normal operation, or that we\naren\u0026rsquo;t prepared to handle gracefully.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import \"os\"",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;os\u0026quot;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import \"os\"\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "We'll use panic throughout this site to check for\nunexpected errors. This is the only program on the\nsite designed to panic.",
          "docs_rendered": "\u003cp\u003eWe\u0026rsquo;ll use panic throughout this site to check for\nunexpected errors. This is the only program on the\nsite designed to panic.\u003c/p\u003e\n",
          "code": "\n    panic(\"a problem\")",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nb\"\u003epanic\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;a problem\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    panic(\"a problem\")\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "A common use of panic is to abort if a function\nreturns an error value that we don't know how to\n(or want to) handle. Here's an example of\n`panic`king if we get an unexpected error when creating a new file.",
          "docs_rendered": "\u003cp\u003eA common use of panic is to abort if a function\nreturns an error value that we don\u0026rsquo;t know how to\n(or want to) handle. Here\u0026rsquo;s an example of\n\u003ccode\u003epanic\u003c/code\u003eking if we get an unexpected error when creating a new file.\u003c/p\u003e\n",
          "code": "\n    _, err := os.Create(\"/tmp/file\")\n    if err != nil {\n        panic(err)\n    }\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eCreate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;/tmp/file\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003epanic\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    _, err := os.Create(\"/tmp/file\")\n    if err != nil {\n        panic(err)\n    }\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "Running this program will cause it to panic, print\nan error message and goroutine traces, and exit with\na non-zero status.",
          "docs_rendered": "\u003cp\u003eRunning this program will cause it to panic, print\nan error message and goroutine traces, and exit with\na non-zero status.\u003c/p\u003e\n",
          "code": "\n$ go run panic.go\npanic: a problem",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run panic.go\n\u003cspan class=\"go\"\u003epanic: a problem\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "goroutine 1 [running]:\nmain.main()\n    /.../panic.go:12 +0x47\n...\nexit status 2",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"go\"\u003egoroutine 1 [running]:\u003c/span\u003e\n\u003cspan class=\"go\"\u003emain.main()\u003c/span\u003e\n\u003cspan class=\"go\"\u003e    /.../panic.go:12 +0x47\u003c/span\u003e\n\u003cspan class=\"go\"\u003e...\u003c/span\u003e\n\u003cspan class=\"go\"\u003eexit status 2\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Note that unlike some languages which use exceptions\nfor handling of many errors, in Go it is idiomatic\nto use error-indicating return values wherever possible.",
          "docs_rendered": "\u003cp\u003eNote that unlike some languages which use exceptions\nfor handling of many errors, in Go it is idiomatic\nto use error-indicating return values wherever possible.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "defer",
    "Name": "Defer",
    "GoCode": "// _Defer_ is used to ensure that a function call is\n// performed later in a program's execution, usually for\n// purposes of cleanup. `defer` is often used where e.g.\n// `ensure` and `finally` would be used in other languages.\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n)\n\n// Suppose we wanted to create a file, write to it,\n// and then close when we're done. Here's how we could\n// do that with `defer`.\nfunc main() {\n\n\t// Immediately after getting a file object with\n\t// `createFile`, we defer the closing of that file\n\t// with `closeFile`. This will be executed at the end\n\t// of the enclosing function (`main`), after\n\t// `writeFile` has finished.\n\tf := createFile(\"/tmp/defer.txt\")\n\tdefer closeFile(f)\n\twriteFile(f)\n}\n\nfunc createFile(p string) *os.File {\n\tfmt.Println(\"creating\")\n\tf, err := os.Create(p)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn f\n}\n\nfunc writeFile(f *os.File) {\n\tfmt.Println(\"writing\")\n\tfmt.Fprintln(f, \"data\")\n\n}\n\nfunc closeFile(f *os.File) {\n\tfmt.Println(\"closing\")\n\terr := f.Close()\n\t// It's important to check for errors when closing a\n\t// file, even in a deferred function.\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"error: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n}\n",
    "GoCodeHash": "f0eb978a0cdbacc5e4d709bccce6cea6b71be39f",
    "URLHash": "5SDVfc_jxbg",
    "Segs": [
      [
        {
          "docs": "_Defer_ is used to ensure that a function call is\nperformed later in a program's execution, usually for\npurposes of cleanup. `defer` is often used where e.g.\n`ensure` and `finally` would be used in other languages.",
          "docs_rendered": "\u003cp\u003e\u003cem\u003eDefer\u003c/em\u003e is used to ensure that a function call is\nperformed later in a program\u0026rsquo;s execution, usually for\npurposes of cleanup. \u003ccode\u003edefer\u003c/code\u003e is often used where e.g.\n\u003ccode\u003eensure\u003c/code\u003e and \u003ccode\u003efinally\u003c/code\u003e would be used in other languages.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"fmt\"\n    \"os\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;os\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"fmt\"\n    \"os\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Suppose we wanted to create a file, write to it,\nand then close when we're done. Here's how we could\ndo that with `defer`.",
          "docs_rendered": "\u003cp\u003eSuppose we wanted to create a file, write to it,\nand then close when we\u0026rsquo;re done. Here\u0026rsquo;s how we could\ndo that with \u003ccode\u003edefer\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\nfunc main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Immediately after getting a file object with\n`createFile`, we defer the closing of that file\nwith `closeFile`. This will be executed at the end\nof the enclosing function (`main`), after\n`writeFile` has finished.",
          "docs_rendered": "\u003cp\u003eImmediately after getting a file object with\n\u003ccode\u003ecreateFile\u003c/code\u003e, we defer the closing of that file\nwith \u003ccode\u003ecloseFile\u003c/code\u003e. This will be executed at the end\nof the enclosing function (\u003ccode\u003emain\u003c/code\u003e), after\n\u003ccode\u003ewriteFile\u003c/code\u003e has finished.\u003c/p\u003e\n",
          "code": "\n    f := createFile(\"/tmp/defer.txt\")\n    defer closeFile(f)\n    writeFile(f)\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ef\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003ecreateFile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;/tmp/defer.txt\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003edefer\u003c/span\u003e \u003cspan class=\"nx\"\u003ecloseFile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ewriteFile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    f := createFile(\"/tmp/defer.txt\")\n    defer closeFile(f)\n    writeFile(f)\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func createFile(p string) *os.File {\n    fmt.Println(\"creating\")\n    f, err := os.Create(p)\n    if err != nil {\n        panic(err)\n    }\n    return f\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003ecreateFile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ep\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eFile\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;creating\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eCreate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003epanic\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003ef\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func createFile(p string) *os.File {\n    fmt.Println(\"creating\")\n    f, err := os.Create(p)\n    if err != nil {\n        panic(err)\n    }\n    return f\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func writeFile(f *os.File) {\n    fmt.Println(\"writing\")\n    fmt.Fprintln(f, \"data\")",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003ewriteFile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ef\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eFile\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;writing\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eFprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;data\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func writeFile(f *os.File) {\n    fmt.Println(\"writing\")\n    fmt.Fprintln(f, \"data\")\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "\nIt's important to check for errors when closing a\nfile, even in a deferred function.",
          "docs_rendered": "\u003cp\u003eIt\u0026rsquo;s important to check for errors when closing a\nfile, even in a deferred function.\u003c/p\u003e\n",
          "code": "func closeFile(f *os.File) {\n    fmt.Println(\"closing\")\n    err := f.Close()",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003ecloseFile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ef\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eFile\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;closing\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eClose\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func closeFile(f *os.File) {\n    fmt.Println(\"closing\")\n    err := f.Close()\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "    if err != nil {\n        fmt.Fprintf(os.Stderr, \"error: %v\\n\", err)\n        os.Exit(1)\n    }\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eFprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eStderr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;error: %v\\n\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eExit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    if err != nil {\n        fmt.Fprintf(os.Stderr, \"error: %v\\n\", err)\n        os.Exit(1)\n    }\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "Running the program confirms that the file is closed\nafter being written.",
          "docs_rendered": "\u003cp\u003eRunning the program confirms that the file is closed\nafter being written.\u003c/p\u003e\n",
          "code": "\n$ go run defer.go\ncreating\nwriting\nclosing",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run defer.go\n\u003cspan class=\"go\"\u003ecreating\u003c/span\u003e\n\u003cspan class=\"go\"\u003ewriting\u003c/span\u003e\n\u003cspan class=\"go\"\u003eclosing\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "collection-functions",
    "Name": "Collection Functions",
    "GoCode": "// We often need our programs to perform operations on\n// collections of data, like selecting all items that\n// satisfy a given predicate or mapping all items to a new\n// collection with a custom function.\n\n// In some languages it's idiomatic to use [generic](http://en.wikipedia.org/wiki/Generic_programming)\n// data structures and algorithms. Go does not support\n// generics; in Go it's common to provide collection\n// functions if and when they are specifically needed for\n// your program and data types.\n\n// Here are some example collection functions for slices\n// of `strings`. You can use these examples to build your\n// own functions. Note that in some cases it may be\n// clearest to just inline the collection-manipulating\n// code directly, instead of creating and calling a\n// helper function.\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\n// Index returns the first index of the target string `t`, or\n// -1 if no match is found.\nfunc Index(vs []string, t string) int {\n\tfor i, v := range vs {\n\t\tif v == t {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn -1\n}\n\n// Include returns `true` if the target string t is in the\n// slice.\nfunc Include(vs []string, t string) bool {\n\treturn Index(vs, t) \u003e= 0\n}\n\n// Any returns `true` if one of the strings in the slice\n// satisfies the predicate `f`.\nfunc Any(vs []string, f func(string) bool) bool {\n\tfor _, v := range vs {\n\t\tif f(v) {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n// All returns `true` if all of the strings in the slice\n// satisfy the predicate `f`.\nfunc All(vs []string, f func(string) bool) bool {\n\tfor _, v := range vs {\n\t\tif !f(v) {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n// Filter returns a new slice containing all strings in the\n// slice that satisfy the predicate `f`.\nfunc Filter(vs []string, f func(string) bool) []string {\n\tvsf := make([]string, 0)\n\tfor _, v := range vs {\n\t\tif f(v) {\n\t\t\tvsf = append(vsf, v)\n\t\t}\n\t}\n\treturn vsf\n}\n\n// Map returns a new slice containing the results of applying\n// the function `f` to each string in the original slice.\nfunc Map(vs []string, f func(string) string) []string {\n\tvsm := make([]string, len(vs))\n\tfor i, v := range vs {\n\t\tvsm[i] = f(v)\n\t}\n\treturn vsm\n}\n\nfunc main() {\n\n\t// Here we try out our various collection functions.\n\tvar strs = []string{\"peach\", \"apple\", \"pear\", \"plum\"}\n\n\tfmt.Println(Index(strs, \"pear\"))\n\n\tfmt.Println(Include(strs, \"grape\"))\n\n\tfmt.Println(Any(strs, func(v string) bool {\n\t\treturn strings.HasPrefix(v, \"p\")\n\t}))\n\n\tfmt.Println(All(strs, func(v string) bool {\n\t\treturn strings.HasPrefix(v, \"p\")\n\t}))\n\n\tfmt.Println(Filter(strs, func(v string) bool {\n\t\treturn strings.Contains(v, \"e\")\n\t}))\n\n\t// The above examples all used anonymous functions,\n\t// but you can also use named functions of the correct\n\t// type.\n\tfmt.Println(Map(strs, strings.ToUpper))\n\n}\n",
    "GoCodeHash": "002b2ee17f1111c7607a7b7742753af1b5a3c8c1",
    "URLHash": "uKnePZM91WV",
    "Segs": [
      [
        {
          "docs": "We often need our programs to perform operations on\ncollections of data, like selecting all items that\nsatisfy a given predicate or mapping all items to a new\ncollection with a custom function.",
          "docs_rendered": "\u003cp\u003eWe often need our programs to perform operations on\ncollections of data, like selecting all items that\nsatisfy a given predicate or mapping all items to a new\ncollection with a custom function.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "In some languages it's idiomatic to use [generic](http://en.wikipedia.org/wiki/Generic_programming)\ndata structures and algorithms. Go does not support\ngenerics; in Go it's common to provide collection\nfunctions if and when they are specifically needed for\nyour program and data types.",
          "docs_rendered": "\u003cp\u003eIn some languages it\u0026rsquo;s idiomatic to use \u003ca href=\"http://en.wikipedia.org/wiki/Generic_programming\"\u003egeneric\u003c/a\u003e\ndata structures and algorithms. Go does not support\ngenerics; in Go it\u0026rsquo;s common to provide collection\nfunctions if and when they are specifically needed for\nyour program and data types.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Here are some example collection functions for slices\nof `strings`. You can use these examples to build your\nown functions. Note that in some cases it may be\nclearest to just inline the collection-manipulating\ncode directly, instead of creating and calling a\nhelper function.",
          "docs_rendered": "\u003cp\u003eHere are some example collection functions for slices\nof \u003ccode\u003estrings\u003c/code\u003e. You can use these examples to build your\nown functions. Note that in some cases it may be\nclearest to just inline the collection-manipulating\ncode directly, instead of creating and calling a\nhelper function.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"fmt\"\n    \"strings\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;strings\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"fmt\"\n    \"strings\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Index returns the first index of the target string `t`, or\n-1 if no match is found.",
          "docs_rendered": "\u003cp\u003eIndex returns the first index of the target string \u003ccode\u003et\u003c/code\u003e, or\n-1 if no match is found.\u003c/p\u003e\n",
          "code": "\nfunc Index(vs []string, t string) int {\n    for i, v := range vs {\n        if v == t {\n            return i\n        }\n    }\n    return -1\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003eIndex\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003evs\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003et\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ev\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"k\"\u003erange\u003c/span\u003e \u003cspan class=\"nx\"\u003evs\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003ev\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nx\"\u003et\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func Index(vs []string, t string) int {\n    for i, v := range vs {\n        if v == t {\n            return i\n        }\n    }\n    return -1\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Include returns `true` if the target string t is in the\nslice.",
          "docs_rendered": "\u003cp\u003eInclude returns \u003ccode\u003etrue\u003c/code\u003e if the target string t is in the\nslice.\u003c/p\u003e\n",
          "code": "\nfunc Include(vs []string, t string) bool {\n    return Index(vs, t) \u003e= 0\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003eInclude\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003evs\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003et\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003eIndex\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003evs\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func Include(vs []string, t string) bool {\n    return Index(vs, t) \u003e= 0\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Any returns `true` if one of the strings in the slice\nsatisfies the predicate `f`.",
          "docs_rendered": "\u003cp\u003eAny returns \u003ccode\u003etrue\u003c/code\u003e if one of the strings in the slice\nsatisfies the predicate \u003ccode\u003ef\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\nfunc Any(vs []string, f func(string) bool) bool {\n    for _, v := range vs {\n        if f(v) {\n            return true\n        }\n    }\n    return false\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003eAny\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003evs\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ef\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ev\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"k\"\u003erange\u003c/span\u003e \u003cspan class=\"nx\"\u003evs\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func Any(vs []string, f func(string) bool) bool {\n    for _, v := range vs {\n        if f(v) {\n            return true\n        }\n    }\n    return false\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "All returns `true` if all of the strings in the slice\nsatisfy the predicate `f`.",
          "docs_rendered": "\u003cp\u003eAll returns \u003ccode\u003etrue\u003c/code\u003e if all of the strings in the slice\nsatisfy the predicate \u003ccode\u003ef\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\nfunc All(vs []string, f func(string) bool) bool {\n    for _, v := range vs {\n        if !f(v) {\n            return false\n        }\n    }\n    return true\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003eAll\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003evs\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ef\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ev\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"k\"\u003erange\u003c/span\u003e \u003cspan class=\"nx\"\u003evs\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e!\u003c/span\u003e\u003cspan class=\"nx\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func All(vs []string, f func(string) bool) bool {\n    for _, v := range vs {\n        if !f(v) {\n            return false\n        }\n    }\n    return true\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Filter returns a new slice containing all strings in the\nslice that satisfy the predicate `f`.",
          "docs_rendered": "\u003cp\u003eFilter returns a new slice containing all strings in the\nslice that satisfy the predicate \u003ccode\u003ef\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\nfunc Filter(vs []string, f func(string) bool) []string {\n    vsf := make([]string, 0)\n    for _, v := range vs {\n        if f(v) {\n            vsf = append(vsf, v)\n        }\n    }\n    return vsf\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003eFilter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003evs\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ef\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003evsf\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e([]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ev\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"k\"\u003erange\u003c/span\u003e \u003cspan class=\"nx\"\u003evs\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"nx\"\u003evsf\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003evsf\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003evsf\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func Filter(vs []string, f func(string) bool) []string {\n    vsf := make([]string, 0)\n    for _, v := range vs {\n        if f(v) {\n            vsf = append(vsf, v)\n        }\n    }\n    return vsf\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Map returns a new slice containing the results of applying\nthe function `f` to each string in the original slice.",
          "docs_rendered": "\u003cp\u003eMap returns a new slice containing the results of applying\nthe function \u003ccode\u003ef\u003c/code\u003e to each string in the original slice.\u003c/p\u003e\n",
          "code": "\nfunc Map(vs []string, f func(string) string) []string {\n    vsm := make([]string, len(vs))\n    for i, v := range vs {\n        vsm[i] = f(v)\n    }\n    return vsm\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003eMap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003evs\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ef\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003evsm\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e([]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003evs\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ev\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"k\"\u003erange\u003c/span\u003e \u003cspan class=\"nx\"\u003evs\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003evsm\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003evsm\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func Map(vs []string, f func(string) string) []string {\n    vsm := make([]string, len(vs))\n    for i, v := range vs {\n        vsm[i] = f(v)\n    }\n    return vsm\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Here we try out our various collection functions.",
          "docs_rendered": "\u003cp\u003eHere we try out our various collection functions.\u003c/p\u003e\n",
          "code": "\n    var strs = []string{\"peach\", \"apple\", \"pear\", \"plum\"}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003estrs\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;peach\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;apple\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;pear\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;plum\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    var strs = []string{\"peach\", \"apple\", \"pear\", \"plum\"}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "    fmt.Println(Index(strs, \"pear\"))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eIndex\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estrs\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;pear\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(Index(strs, \"pear\"))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "    fmt.Println(Include(strs, \"grape\"))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eInclude\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estrs\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;grape\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(Include(strs, \"grape\"))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "    fmt.Println(Any(strs, func(v string) bool {\n        return strings.HasPrefix(v, \"p\")\n    }))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eAny\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estrs\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ev\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003estrings\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eHasPrefix\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;p\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(Any(strs, func(v string) bool {\n        return strings.HasPrefix(v, \"p\")\n    }))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "    fmt.Println(All(strs, func(v string) bool {\n        return strings.HasPrefix(v, \"p\")\n    }))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eAll\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estrs\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ev\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003estrings\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eHasPrefix\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;p\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(All(strs, func(v string) bool {\n        return strings.HasPrefix(v, \"p\")\n    }))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "    fmt.Println(Filter(strs, func(v string) bool {\n        return strings.Contains(v, \"e\")\n    }))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eFilter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estrs\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ev\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003estrings\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eContains\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(Filter(strs, func(v string) bool {\n        return strings.Contains(v, \"e\")\n    }))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "The above examples all used anonymous functions,\nbut you can also use named functions of the correct\ntype.",
          "docs_rendered": "\u003cp\u003eThe above examples all used anonymous functions,\nbut you can also use named functions of the correct\ntype.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(Map(strs, strings.ToUpper))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eMap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estrs\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003estrings\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eToUpper\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(Map(strs, strings.ToUpper))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "",
          "docs_rendered": "",
          "code": "$ go run collection-functions.go \n2\nfalse\ntrue\nfalse\n[peach apple pear]\n[PEACH APPLE PEAR PLUM]",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run collection-functions.go \n\u003cspan class=\"go\"\u003e2\u003c/span\u003e\n\u003cspan class=\"go\"\u003efalse\u003c/span\u003e\n\u003cspan class=\"go\"\u003etrue\u003c/span\u003e\n\u003cspan class=\"go\"\u003efalse\u003c/span\u003e\n\u003cspan class=\"go\"\u003e[peach apple pear]\u003c/span\u003e\n\u003cspan class=\"go\"\u003e[PEACH APPLE PEAR PLUM]\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "string-functions",
    "Name": "String Functions",
    "GoCode": "// The standard library's `strings` package provides many\n// useful string-related functions. Here are some examples\n// to give you a sense of the package.\n\npackage main\n\nimport (\n\t\"fmt\"\n\ts \"strings\"\n)\n\n// We alias `fmt.Println` to a shorter name as we'll use\n// it a lot below.\nvar p = fmt.Println\n\nfunc main() {\n\n\t// Here's a sample of the functions available in\n\t// `strings`. Since these are functions from the\n\t// package, not methods on the string object itself,\n\t// we need pass the string in question as the first\n\t// argument to the function. You can find more\n\t// functions in the [`strings`](http://golang.org/pkg/strings/)\n\t// package docs.\n\tp(\"Contains:  \", s.Contains(\"test\", \"es\"))\n\tp(\"Count:     \", s.Count(\"test\", \"t\"))\n\tp(\"HasPrefix: \", s.HasPrefix(\"test\", \"te\"))\n\tp(\"HasSuffix: \", s.HasSuffix(\"test\", \"st\"))\n\tp(\"Index:     \", s.Index(\"test\", \"e\"))\n\tp(\"Join:      \", s.Join([]string{\"a\", \"b\"}, \"-\"))\n\tp(\"Repeat:    \", s.Repeat(\"a\", 5))\n\tp(\"Replace:   \", s.Replace(\"foo\", \"o\", \"0\", -1))\n\tp(\"Replace:   \", s.Replace(\"foo\", \"o\", \"0\", 1))\n\tp(\"Split:     \", s.Split(\"a-b-c-d-e\", \"-\"))\n\tp(\"ToLower:   \", s.ToLower(\"TEST\"))\n\tp(\"ToUpper:   \", s.ToUpper(\"test\"))\n\tp()\n\n\t// Not part of `strings`, but worth mentioning here, are\n\t// the mechanisms for getting the length of a string in\n\t// bytes and getting a byte by index.\n\tp(\"Len: \", len(\"hello\"))\n\tp(\"Char:\", \"hello\"[1])\n}\n\n// Note that `len` and indexing above work at the byte level.\n// Go uses UTF-8 encoded strings, so this is often useful\n// as-is. If you're working with potentially multi-byte\n// characters you'll want to use encoding-aware operations.\n// See [strings, bytes, runes and characters in Go](https://blog.golang.org/strings)\n// for more information.\n",
    "GoCodeHash": "33b15b8c999ba65564b965b96cbfeadac0d1637d",
    "URLHash": "fZ_FqN5WlSz",
    "Segs": [
      [
        {
          "docs": "The standard library's `strings` package provides many\nuseful string-related functions. Here are some examples\nto give you a sense of the package.",
          "docs_rendered": "\u003cp\u003eThe standard library\u0026rsquo;s \u003ccode\u003estrings\u003c/code\u003e package provides many\nuseful string-related functions. Here are some examples\nto give you a sense of the package.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"fmt\"\n    s \"strings\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003es\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;strings\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"fmt\"\n    s \"strings\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "We alias `fmt.Println` to a shorter name as we'll use\nit a lot below.",
          "docs_rendered": "\u003cp\u003eWe alias \u003ccode\u003efmt.Println\u003c/code\u003e to a shorter name as we\u0026rsquo;ll use\nit a lot below.\u003c/p\u003e\n",
          "code": "\nvar p = fmt.Println",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003ep\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "var p = fmt.Println\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Here's a sample of the functions available in\n`strings`. Since these are functions from the\npackage, not methods on the string object itself,\nwe need pass the string in question as the first\nargument to the function. You can find more\nfunctions in the [`strings`](http://golang.org/pkg/strings/)\npackage docs.",
          "docs_rendered": "\u003cp\u003eHere\u0026rsquo;s a sample of the functions available in\n\u003ccode\u003estrings\u003c/code\u003e. Since these are functions from the\npackage, not methods on the string object itself,\nwe need pass the string in question as the first\nargument to the function. You can find more\nfunctions in the \u003ca href=\"http://golang.org/pkg/strings/\"\u003e\u003ccode\u003estrings\u003c/code\u003e\u003c/a\u003e\npackage docs.\u003c/p\u003e\n",
          "code": "\n    p(\"Contains:  \", s.Contains(\"test\", \"es\"))\n    p(\"Count:     \", s.Count(\"test\", \"t\"))\n    p(\"HasPrefix: \", s.HasPrefix(\"test\", \"te\"))\n    p(\"HasSuffix: \", s.HasSuffix(\"test\", \"st\"))\n    p(\"Index:     \", s.Index(\"test\", \"e\"))\n    p(\"Join:      \", s.Join([]string{\"a\", \"b\"}, \"-\"))\n    p(\"Repeat:    \", s.Repeat(\"a\", 5))\n    p(\"Replace:   \", s.Replace(\"foo\", \"o\", \"0\", -1))\n    p(\"Replace:   \", s.Replace(\"foo\", \"o\", \"0\", 1))\n    p(\"Split:     \", s.Split(\"a-b-c-d-e\", \"-\"))\n    p(\"ToLower:   \", s.ToLower(\"TEST\"))\n    p(\"ToUpper:   \", s.ToUpper(\"test\"))\n    p()",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Contains:  \u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eContains\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;test\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;es\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Count:     \u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eCount\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;test\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;t\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;HasPrefix: \u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eHasPrefix\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;test\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;te\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;HasSuffix: \u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eHasSuffix\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;test\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;st\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Index:     \u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eIndex\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;test\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Join:      \u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eJoin\u003c/span\u003e\u003cspan class=\"p\"\u003e([]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;a\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;b\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;-\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Repeat:    \u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eRepeat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;a\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Replace:   \u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eReplace\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;foo\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;o\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;0\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Replace:   \u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eReplace\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;foo\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;o\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;0\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Split:     \u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;a-b-c-d-e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;-\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;ToLower:   \u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eToLower\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;TEST\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;ToUpper:   \u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eToUpper\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;test\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    p(\"Contains:  \", s.Contains(\"test\", \"es\"))\n    p(\"Count:     \", s.Count(\"test\", \"t\"))\n    p(\"HasPrefix: \", s.HasPrefix(\"test\", \"te\"))\n    p(\"HasSuffix: \", s.HasSuffix(\"test\", \"st\"))\n    p(\"Index:     \", s.Index(\"test\", \"e\"))\n    p(\"Join:      \", s.Join([]string{\"a\", \"b\"}, \"-\"))\n    p(\"Repeat:    \", s.Repeat(\"a\", 5))\n    p(\"Replace:   \", s.Replace(\"foo\", \"o\", \"0\", -1))\n    p(\"Replace:   \", s.Replace(\"foo\", \"o\", \"0\", 1))\n    p(\"Split:     \", s.Split(\"a-b-c-d-e\", \"-\"))\n    p(\"ToLower:   \", s.ToLower(\"TEST\"))\n    p(\"ToUpper:   \", s.ToUpper(\"test\"))\n    p()\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Not part of `strings`, but worth mentioning here, are\nthe mechanisms for getting the length of a string in\nbytes and getting a byte by index.",
          "docs_rendered": "\u003cp\u003eNot part of \u003ccode\u003estrings\u003c/code\u003e, but worth mentioning here, are\nthe mechanisms for getting the length of a string in\nbytes and getting a byte by index.\u003c/p\u003e\n",
          "code": "\n    p(\"Len: \", len(\"hello\"))\n    p(\"Char:\", \"hello\"[1])\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Len: \u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;hello\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Char:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;hello\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    p(\"Len: \", len(\"hello\"))\n    p(\"Char:\", \"hello\"[1])\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Note that `len` and indexing above work at the byte level.\nGo uses UTF-8 encoded strings, so this is often useful\nas-is. If you're working with potentially multi-byte\ncharacters you'll want to use encoding-aware operations.\nSee [strings, bytes, runes and characters in Go](https://blog.golang.org/strings)\nfor more information.",
          "docs_rendered": "\u003cp\u003eNote that \u003ccode\u003elen\u003c/code\u003e and indexing above work at the byte level.\nGo uses UTF-8 encoded strings, so this is often useful\nas-is. If you\u0026rsquo;re working with potentially multi-byte\ncharacters you\u0026rsquo;ll want to use encoding-aware operations.\nSee \u003ca href=\"https://blog.golang.org/strings\"\u003estrings, bytes, runes and characters in Go\u003c/a\u003e\nfor more information.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "",
          "docs_rendered": "",
          "code": "$ go run string-functions.go\nContains:   true\nCount:      2\nHasPrefix:  true\nHasSuffix:  true\nIndex:      1\nJoin:       a-b\nRepeat:     aaaaa\nReplace:    f00\nReplace:    f0o\nSplit:      [a b c d e]\nToLower:    test\nToUpper:    TEST",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run string-functions.go\n\u003cspan class=\"go\"\u003eContains:   true\u003c/span\u003e\n\u003cspan class=\"go\"\u003eCount:      2\u003c/span\u003e\n\u003cspan class=\"go\"\u003eHasPrefix:  true\u003c/span\u003e\n\u003cspan class=\"go\"\u003eHasSuffix:  true\u003c/span\u003e\n\u003cspan class=\"go\"\u003eIndex:      1\u003c/span\u003e\n\u003cspan class=\"go\"\u003eJoin:       a-b\u003c/span\u003e\n\u003cspan class=\"go\"\u003eRepeat:     aaaaa\u003c/span\u003e\n\u003cspan class=\"go\"\u003eReplace:    f00\u003c/span\u003e\n\u003cspan class=\"go\"\u003eReplace:    f0o\u003c/span\u003e\n\u003cspan class=\"go\"\u003eSplit:      [a b c d e]\u003c/span\u003e\n\u003cspan class=\"go\"\u003eToLower:    test\u003c/span\u003e\n\u003cspan class=\"go\"\u003eToUpper:    TEST\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "Len:  5\nChar: 101",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"go\"\u003eLen:  5\u003c/span\u003e\n\u003cspan class=\"go\"\u003eChar: 101\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "string-formatting",
    "Name": "String Formatting",
    "GoCode": "// Go offers excellent support for string formatting in\n// the `printf` tradition. Here are some examples of\n// common string formatting tasks.\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n)\n\ntype point struct {\n\tx, y int\n}\n\nfunc main() {\n\n\t// Go offers several printing \"verbs\" designed to\n\t// format general Go values. For example, this prints\n\t// an instance of our `point` struct.\n\tp := point{1, 2}\n\tfmt.Printf(\"%v\\n\", p)\n\n\t// If the value is a struct, the `%+v` variant will\n\t// include the struct's field names.\n\tfmt.Printf(\"%+v\\n\", p)\n\n\t// The `%#v` variant prints a Go syntax representation\n\t// of the value, i.e. the source code snippet that\n\t// would produce that value.\n\tfmt.Printf(\"%#v\\n\", p)\n\n\t// To print the type of a value, use `%T`.\n\tfmt.Printf(\"%T\\n\", p)\n\n\t// Formatting booleans is straight-forward.\n\tfmt.Printf(\"%t\\n\", true)\n\n\t// There are many options for formatting integers.\n\t// Use `%d` for standard, base-10 formatting.\n\tfmt.Printf(\"%d\\n\", 123)\n\n\t// This prints a binary representation.\n\tfmt.Printf(\"%b\\n\", 14)\n\n\t// This prints the character corresponding to the\n\t// given integer.\n\tfmt.Printf(\"%c\\n\", 33)\n\n\t// `%x` provides hex encoding.\n\tfmt.Printf(\"%x\\n\", 456)\n\n\t// There are also several formatting options for\n\t// floats. For basic decimal formatting use `%f`.\n\tfmt.Printf(\"%f\\n\", 78.9)\n\n\t// `%e` and `%E` format the float in (slightly\n\t// different versions of) scientific notation.\n\tfmt.Printf(\"%e\\n\", 123400000.0)\n\tfmt.Printf(\"%E\\n\", 123400000.0)\n\n\t// For basic string printing use `%s`.\n\tfmt.Printf(\"%s\\n\", \"\\\"string\\\"\")\n\n\t// To double-quote strings as in Go source, use `%q`.\n\tfmt.Printf(\"%q\\n\", \"\\\"string\\\"\")\n\n\t// As with integers seen earlier, `%x` renders\n\t// the string in base-16, with two output characters\n\t// per byte of input.\n\tfmt.Printf(\"%x\\n\", \"hex this\")\n\n\t// To print a representation of a pointer, use `%p`.\n\tfmt.Printf(\"%p\\n\", \u0026p)\n\n\t// When formatting numbers you will often want to\n\t// control the width and precision of the resulting\n\t// figure. To specify the width of an integer, use a\n\t// number after the `%` in the verb. By default the\n\t// result will be right-justified and padded with\n\t// spaces.\n\tfmt.Printf(\"|%6d|%6d|\\n\", 12, 345)\n\n\t// You can also specify the width of printed floats,\n\t// though usually you'll also want to restrict the\n\t// decimal precision at the same time with the\n\t// width.precision syntax.\n\tfmt.Printf(\"|%6.2f|%6.2f|\\n\", 1.2, 3.45)\n\n\t// To left-justify, use the `-` flag.\n\tfmt.Printf(\"|%-6.2f|%-6.2f|\\n\", 1.2, 3.45)\n\n\t// You may also want to control width when formatting\n\t// strings, especially to ensure that they align in\n\t// table-like output. For basic right-justified width.\n\tfmt.Printf(\"|%6s|%6s|\\n\", \"foo\", \"b\")\n\n\t// To left-justify use the `-` flag as with numbers.\n\tfmt.Printf(\"|%-6s|%-6s|\\n\", \"foo\", \"b\")\n\n\t// So far we've seen `Printf`, which prints the\n\t// formatted string to `os.Stdout`. `Sprintf` formats\n\t// and returns a string without printing it anywhere.\n\ts := fmt.Sprintf(\"a %s\", \"string\")\n\tfmt.Println(s)\n\n\t// You can format+print to `io.Writers` other than\n\t// `os.Stdout` using `Fprintf`.\n\tfmt.Fprintf(os.Stderr, \"an %s\\n\", \"error\")\n}\n",
    "GoCodeHash": "99fb572787ffa93dad9c491aec5ce5c7a7516081",
    "URLHash": "L6BkGeaN_p4",
    "Segs": [
      [
        {
          "docs": "Go offers excellent support for string formatting in\nthe `printf` tradition. Here are some examples of\ncommon string formatting tasks.",
          "docs_rendered": "\u003cp\u003eGo offers excellent support for string formatting in\nthe \u003ccode\u003eprintf\u003c/code\u003e tradition. Here are some examples of\ncommon string formatting tasks.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"fmt\"\n    \"os\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;os\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"fmt\"\n    \"os\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "type point struct {\n    x, y int\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003etype\u003c/span\u003e \u003cspan class=\"nx\"\u003epoint\u003c/span\u003e \u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ey\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "type point struct {\n    x, y int\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Go offers several printing \"verbs\" designed to\nformat general Go values. For example, this prints\nan instance of our `point` struct.",
          "docs_rendered": "\u003cp\u003eGo offers several printing \u0026ldquo;verbs\u0026rdquo; designed to\nformat general Go values. For example, this prints\nan instance of our \u003ccode\u003epoint\u003c/code\u003e struct.\u003c/p\u003e\n",
          "code": "\n    p := point{1, 2}\n    fmt.Printf(\"%v\\n\", p)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003epoint\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;%v\\n\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    p := point{1, 2}\n    fmt.Printf(\"%v\\n\", p)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "If the value is a struct, the `%+v` variant will\ninclude the struct's field names.",
          "docs_rendered": "\u003cp\u003eIf the value is a struct, the \u003ccode\u003e%+v\u003c/code\u003e variant will\ninclude the struct\u0026rsquo;s field names.\u003c/p\u003e\n",
          "code": "\n    fmt.Printf(\"%+v\\n\", p)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;%+v\\n\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Printf(\"%+v\\n\", p)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "The `%#v` variant prints a Go syntax representation\nof the value, i.e. the source code snippet that\nwould produce that value.",
          "docs_rendered": "\u003cp\u003eThe \u003ccode\u003e%#v\u003c/code\u003e variant prints a Go syntax representation\nof the value, i.e. the source code snippet that\nwould produce that value.\u003c/p\u003e\n",
          "code": "\n    fmt.Printf(\"%#v\\n\", p)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;%#v\\n\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Printf(\"%#v\\n\", p)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "To print the type of a value, use `%T`.",
          "docs_rendered": "\u003cp\u003eTo print the type of a value, use \u003ccode\u003e%T\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n    fmt.Printf(\"%T\\n\", p)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;%T\\n\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Printf(\"%T\\n\", p)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Formatting booleans is straight-forward.",
          "docs_rendered": "\u003cp\u003eFormatting booleans is straight-forward.\u003c/p\u003e\n",
          "code": "\n    fmt.Printf(\"%t\\n\", true)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;%t\\n\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Printf(\"%t\\n\", true)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "There are many options for formatting integers.\nUse `%d` for standard, base-10 formatting.",
          "docs_rendered": "\u003cp\u003eThere are many options for formatting integers.\nUse \u003ccode\u003e%d\u003c/code\u003e for standard, base-10 formatting.\u003c/p\u003e\n",
          "code": "\n    fmt.Printf(\"%d\\n\", 123)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;%d\\n\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e123\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Printf(\"%d\\n\", 123)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "This prints a binary representation.",
          "docs_rendered": "\u003cp\u003eThis prints a binary representation.\u003c/p\u003e\n",
          "code": "\n    fmt.Printf(\"%b\\n\", 14)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;%b\\n\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e14\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Printf(\"%b\\n\", 14)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "This prints the character corresponding to the\ngiven integer.",
          "docs_rendered": "\u003cp\u003eThis prints the character corresponding to the\ngiven integer.\u003c/p\u003e\n",
          "code": "\n    fmt.Printf(\"%c\\n\", 33)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;%c\\n\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e33\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Printf(\"%c\\n\", 33)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "`%x` provides hex encoding.",
          "docs_rendered": "\u003cp\u003e\u003ccode\u003e%x\u003c/code\u003e provides hex encoding.\u003c/p\u003e\n",
          "code": "\n    fmt.Printf(\"%x\\n\", 456)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;%x\\n\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e456\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Printf(\"%x\\n\", 456)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "There are also several formatting options for\nfloats. For basic decimal formatting use `%f`.",
          "docs_rendered": "\u003cp\u003eThere are also several formatting options for\nfloats. For basic decimal formatting use \u003ccode\u003e%f\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n    fmt.Printf(\"%f\\n\", 78.9)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;%f\\n\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e78.9\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Printf(\"%f\\n\", 78.9)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "`%e` and `%E` format the float in (slightly\ndifferent versions of) scientific notation.",
          "docs_rendered": "\u003cp\u003e\u003ccode\u003e%e\u003c/code\u003e and \u003ccode\u003e%E\u003c/code\u003e format the float in (slightly\ndifferent versions of) scientific notation.\u003c/p\u003e\n",
          "code": "\n    fmt.Printf(\"%e\\n\", 123400000.0)\n    fmt.Printf(\"%E\\n\", 123400000.0)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;%e\\n\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e123400000.0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;%E\\n\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e123400000.0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Printf(\"%e\\n\", 123400000.0)\n    fmt.Printf(\"%E\\n\", 123400000.0)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "For basic string printing use `%s`.",
          "docs_rendered": "\u003cp\u003eFor basic string printing use \u003ccode\u003e%s\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n    fmt.Printf(\"%s\\n\", \"\\\"string\\\"\")",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;%s\\n\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;\\\u0026quot;string\\\u0026quot;\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Printf(\"%s\\n\", \"\\\"string\\\"\")\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "To double-quote strings as in Go source, use `%q`.",
          "docs_rendered": "\u003cp\u003eTo double-quote strings as in Go source, use \u003ccode\u003e%q\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n    fmt.Printf(\"%q\\n\", \"\\\"string\\\"\")",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;%q\\n\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;\\\u0026quot;string\\\u0026quot;\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Printf(\"%q\\n\", \"\\\"string\\\"\")\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "As with integers seen earlier, `%x` renders\nthe string in base-16, with two output characters\nper byte of input.",
          "docs_rendered": "\u003cp\u003eAs with integers seen earlier, \u003ccode\u003e%x\u003c/code\u003e renders\nthe string in base-16, with two output characters\nper byte of input.\u003c/p\u003e\n",
          "code": "\n    fmt.Printf(\"%x\\n\", \"hex this\")",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;%x\\n\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;hex this\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Printf(\"%x\\n\", \"hex this\")\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "To print a representation of a pointer, use `%p`.",
          "docs_rendered": "\u003cp\u003eTo print a representation of a pointer, use \u003ccode\u003e%p\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n    fmt.Printf(\"%p\\n\", \u0026p)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;%p\\n\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Printf(\"%p\\n\", \u0026p)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "When formatting numbers you will often want to\ncontrol the width and precision of the resulting\nfigure. To specify the width of an integer, use a\nnumber after the `%` in the verb. By default the\nresult will be right-justified and padded with\nspaces.",
          "docs_rendered": "\u003cp\u003eWhen formatting numbers you will often want to\ncontrol the width and precision of the resulting\nfigure. To specify the width of an integer, use a\nnumber after the \u003ccode\u003e%\u003c/code\u003e in the verb. By default the\nresult will be right-justified and padded with\nspaces.\u003c/p\u003e\n",
          "code": "\n    fmt.Printf(\"|%6d|%6d|\\n\", 12, 345)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;|%6d|%6d|\\n\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e345\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Printf(\"|%6d|%6d|\\n\", 12, 345)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "You can also specify the width of printed floats,\nthough usually you'll also want to restrict the\ndecimal precision at the same time with the\nwidth.precision syntax.",
          "docs_rendered": "\u003cp\u003eYou can also specify the width of printed floats,\nthough usually you\u0026rsquo;ll also want to restrict the\ndecimal precision at the same time with the\nwidth.precision syntax.\u003c/p\u003e\n",
          "code": "\n    fmt.Printf(\"|%6.2f|%6.2f|\\n\", 1.2, 3.45)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;|%6.2f|%6.2f|\\n\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e3.45\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Printf(\"|%6.2f|%6.2f|\\n\", 1.2, 3.45)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "To left-justify, use the `-` flag.",
          "docs_rendered": "\u003cp\u003eTo left-justify, use the \u003ccode\u003e-\u003c/code\u003e flag.\u003c/p\u003e\n",
          "code": "\n    fmt.Printf(\"|%-6.2f|%-6.2f|\\n\", 1.2, 3.45)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;|%-6.2f|%-6.2f|\\n\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e3.45\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Printf(\"|%-6.2f|%-6.2f|\\n\", 1.2, 3.45)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "You may also want to control width when formatting\nstrings, especially to ensure that they align in\ntable-like output. For basic right-justified width.",
          "docs_rendered": "\u003cp\u003eYou may also want to control width when formatting\nstrings, especially to ensure that they align in\ntable-like output. For basic right-justified width.\u003c/p\u003e\n",
          "code": "\n    fmt.Printf(\"|%6s|%6s|\\n\", \"foo\", \"b\")",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;|%6s|%6s|\\n\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;foo\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;b\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Printf(\"|%6s|%6s|\\n\", \"foo\", \"b\")\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "To left-justify use the `-` flag as with numbers.",
          "docs_rendered": "\u003cp\u003eTo left-justify use the \u003ccode\u003e-\u003c/code\u003e flag as with numbers.\u003c/p\u003e\n",
          "code": "\n    fmt.Printf(\"|%-6s|%-6s|\\n\", \"foo\", \"b\")",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;|%-6s|%-6s|\\n\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;foo\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;b\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Printf(\"|%-6s|%-6s|\\n\", \"foo\", \"b\")\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "So far we've seen `Printf`, which prints the\nformatted string to `os.Stdout`. `Sprintf` formats\nand returns a string without printing it anywhere.",
          "docs_rendered": "\u003cp\u003eSo far we\u0026rsquo;ve seen \u003ccode\u003ePrintf\u003c/code\u003e, which prints the\nformatted string to \u003ccode\u003eos.Stdout\u003c/code\u003e. \u003ccode\u003eSprintf\u003c/code\u003e formats\nand returns a string without printing it anywhere.\u003c/p\u003e\n",
          "code": "\n    s := fmt.Sprintf(\"a %s\", \"string\")\n    fmt.Println(s)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003es\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;a %s\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;string\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    s := fmt.Sprintf(\"a %s\", \"string\")\n    fmt.Println(s)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "You can format+print to `io.Writers` other than\n`os.Stdout` using `Fprintf`.",
          "docs_rendered": "\u003cp\u003eYou can format+print to \u003ccode\u003eio.Writers\u003c/code\u003e other than\n\u003ccode\u003eos.Stdout\u003c/code\u003e using \u003ccode\u003eFprintf\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n    fmt.Fprintf(os.Stderr, \"an %s\\n\", \"error\")\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eFprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eStderr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;an %s\\n\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;error\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Fprintf(os.Stderr, \"an %s\\n\", \"error\")\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "",
          "docs_rendered": "",
          "code": "$ go run string-formatting.go\n{1 2}\n{x:1 y:2}\nmain.point{x:1, y:2}\nmain.point\ntrue\n123\n1110\n!\n1c8\n78.900000\n1.234000e+08\n1.234000E+08\n\"string\"\n\"\\\"string\\\"\"\n6865782074686973\n0x42135100\n|    12|   345|\n|  1.20|  3.45|\n|1.20  |3.45  |\n|   foo|     b|\n|foo   |b     |\na string\nan error",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run string-formatting.go\n\u003cspan class=\"go\"\u003e{1 2}\u003c/span\u003e\n\u003cspan class=\"go\"\u003e{x:1 y:2}\u003c/span\u003e\n\u003cspan class=\"go\"\u003emain.point{x:1, y:2}\u003c/span\u003e\n\u003cspan class=\"go\"\u003emain.point\u003c/span\u003e\n\u003cspan class=\"go\"\u003etrue\u003c/span\u003e\n\u003cspan class=\"go\"\u003e123\u003c/span\u003e\n\u003cspan class=\"go\"\u003e1110\u003c/span\u003e\n\u003cspan class=\"go\"\u003e!\u003c/span\u003e\n\u003cspan class=\"go\"\u003e1c8\u003c/span\u003e\n\u003cspan class=\"go\"\u003e78.900000\u003c/span\u003e\n\u003cspan class=\"go\"\u003e1.234000e+08\u003c/span\u003e\n\u003cspan class=\"go\"\u003e1.234000E+08\u003c/span\u003e\n\u003cspan class=\"go\"\u003e\u0026quot;string\u0026quot;\u003c/span\u003e\n\u003cspan class=\"go\"\u003e\u0026quot;\\\u0026quot;string\\\u0026quot;\u0026quot;\u003c/span\u003e\n\u003cspan class=\"go\"\u003e6865782074686973\u003c/span\u003e\n\u003cspan class=\"go\"\u003e0x42135100\u003c/span\u003e\n\u003cspan class=\"go\"\u003e|    12|   345|\u003c/span\u003e\n\u003cspan class=\"go\"\u003e|  1.20|  3.45|\u003c/span\u003e\n\u003cspan class=\"go\"\u003e|1.20  |3.45  |\u003c/span\u003e\n\u003cspan class=\"go\"\u003e|   foo|     b|\u003c/span\u003e\n\u003cspan class=\"go\"\u003e|foo   |b     |\u003c/span\u003e\n\u003cspan class=\"go\"\u003ea string\u003c/span\u003e\n\u003cspan class=\"go\"\u003ean error\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "regular-expressions",
    "Name": "Regular Expressions",
    "GoCode": "// Go offers built-in support for [regular expressions](http://en.wikipedia.org/wiki/Regular_expression).\n// Here are some examples of  common regexp-related tasks\n// in Go.\n\npackage main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"regexp\"\n)\n\nfunc main() {\n\n\t// This tests whether a pattern matches a string.\n\tmatch, _ := regexp.MatchString(\"p([a-z]+)ch\", \"peach\")\n\tfmt.Println(match)\n\n\t// Above we used a string pattern directly, but for\n\t// other regexp tasks you'll need to `Compile` an\n\t// optimized `Regexp` struct.\n\tr, _ := regexp.Compile(\"p([a-z]+)ch\")\n\n\t// Many methods are available on these structs. Here's\n\t// a match test like we saw earlier.\n\tfmt.Println(r.MatchString(\"peach\"))\n\n\t// This finds the match for the regexp.\n\tfmt.Println(r.FindString(\"peach punch\"))\n\n\t// This also finds the first match but returns the\n\t// start and end indexes for the match instead of the\n\t// matching text.\n\tfmt.Println(r.FindStringIndex(\"peach punch\"))\n\n\t// The `Submatch` variants include information about\n\t// both the whole-pattern matches and the submatches\n\t// within those matches. For example this will return\n\t// information for both `p([a-z]+)ch` and `([a-z]+)`.\n\tfmt.Println(r.FindStringSubmatch(\"peach punch\"))\n\n\t// Similarly this will return information about the\n\t// indexes of matches and submatches.\n\tfmt.Println(r.FindStringSubmatchIndex(\"peach punch\"))\n\n\t// The `All` variants of these functions apply to all\n\t// matches in the input, not just the first. For\n\t// example to find all matches for a regexp.\n\tfmt.Println(r.FindAllString(\"peach punch pinch\", -1))\n\n\t// These `All` variants are available for the other\n\t// functions we saw above as well.\n\tfmt.Println(r.FindAllStringSubmatchIndex(\n\t\t\"peach punch pinch\", -1))\n\n\t// Providing a non-negative integer as the second\n\t// argument to these functions will limit the number\n\t// of matches.\n\tfmt.Println(r.FindAllString(\"peach punch pinch\", 2))\n\n\t// Our examples above had string arguments and used\n\t// names like `MatchString`. We can also provide\n\t// `[]byte` arguments and drop `String` from the\n\t// function name.\n\tfmt.Println(r.Match([]byte(\"peach\")))\n\n\t// When creating global variables with regular\n\t// expressions you can use the `MustCompile` variation\n\t// of `Compile`. `MustCompile` panics instead of\n\t// returning an error, which makes it safer to use for\n\t// global variables.\n\tr = regexp.MustCompile(\"p([a-z]+)ch\")\n\tfmt.Println(r)\n\n\t// The `regexp` package can also be used to replace\n\t// subsets of strings with other values.\n\tfmt.Println(r.ReplaceAllString(\"a peach\", \"\u003cfruit\u003e\"))\n\n\t// The `Func` variant allows you to transform matched\n\t// text with a given function.\n\tin := []byte(\"a peach\")\n\tout := r.ReplaceAllFunc(in, bytes.ToUpper)\n\tfmt.Println(string(out))\n}\n",
    "GoCodeHash": "c0dd720036ac70269ce233bf47c5d6aefd43161f",
    "URLHash": "LEKGY_d3Nu_P",
    "Segs": [
      [
        {
          "docs": "Go offers built-in support for [regular expressions](http://en.wikipedia.org/wiki/Regular_expression).\nHere are some examples of  common regexp-related tasks\nin Go.",
          "docs_rendered": "\u003cp\u003eGo offers built-in support for \u003ca href=\"http://en.wikipedia.org/wiki/Regular_expression\"\u003eregular expressions\u003c/a\u003e.\nHere are some examples of  common regexp-related tasks\nin Go.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"bytes\"\n    \"fmt\"\n    \"regexp\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;bytes\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;regexp\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"bytes\"\n    \"fmt\"\n    \"regexp\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "This tests whether a pattern matches a string.",
          "docs_rendered": "\u003cp\u003eThis tests whether a pattern matches a string.\u003c/p\u003e\n",
          "code": "\n    match, _ := regexp.MatchString(\"p([a-z]+)ch\", \"peach\")\n    fmt.Println(match)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ematch\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eregexp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eMatchString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;p([a-z]+)ch\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;peach\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ematch\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    match, _ := regexp.MatchString(\"p([a-z]+)ch\", \"peach\")\n    fmt.Println(match)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Above we used a string pattern directly, but for\nother regexp tasks you'll need to `Compile` an\noptimized `Regexp` struct.",
          "docs_rendered": "\u003cp\u003eAbove we used a string pattern directly, but for\nother regexp tasks you\u0026rsquo;ll need to \u003ccode\u003eCompile\u003c/code\u003e an\noptimized \u003ccode\u003eRegexp\u003c/code\u003e struct.\u003c/p\u003e\n",
          "code": "\n    r, _ := regexp.Compile(\"p([a-z]+)ch\")",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eregexp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eCompile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;p([a-z]+)ch\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    r, _ := regexp.Compile(\"p([a-z]+)ch\")\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Many methods are available on these structs. Here's\na match test like we saw earlier.",
          "docs_rendered": "\u003cp\u003eMany methods are available on these structs. Here\u0026rsquo;s\na match test like we saw earlier.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(r.MatchString(\"peach\"))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eMatchString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;peach\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(r.MatchString(\"peach\"))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "This finds the match for the regexp.",
          "docs_rendered": "\u003cp\u003eThis finds the match for the regexp.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(r.FindString(\"peach punch\"))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eFindString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;peach punch\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(r.FindString(\"peach punch\"))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "This also finds the first match but returns the\nstart and end indexes for the match instead of the\nmatching text.",
          "docs_rendered": "\u003cp\u003eThis also finds the first match but returns the\nstart and end indexes for the match instead of the\nmatching text.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(r.FindStringIndex(\"peach punch\"))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eFindStringIndex\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;peach punch\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(r.FindStringIndex(\"peach punch\"))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "The `Submatch` variants include information about\nboth the whole-pattern matches and the submatches\nwithin those matches. For example this will return\ninformation for both `p([a-z]+)ch` and `([a-z]+)`.",
          "docs_rendered": "\u003cp\u003eThe \u003ccode\u003eSubmatch\u003c/code\u003e variants include information about\nboth the whole-pattern matches and the submatches\nwithin those matches. For example this will return\ninformation for both \u003ccode\u003ep([a-z]+)ch\u003c/code\u003e and \u003ccode\u003e([a-z]+)\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(r.FindStringSubmatch(\"peach punch\"))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eFindStringSubmatch\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;peach punch\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(r.FindStringSubmatch(\"peach punch\"))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Similarly this will return information about the\nindexes of matches and submatches.",
          "docs_rendered": "\u003cp\u003eSimilarly this will return information about the\nindexes of matches and submatches.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(r.FindStringSubmatchIndex(\"peach punch\"))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eFindStringSubmatchIndex\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;peach punch\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(r.FindStringSubmatchIndex(\"peach punch\"))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "The `All` variants of these functions apply to all\nmatches in the input, not just the first. For\nexample to find all matches for a regexp.",
          "docs_rendered": "\u003cp\u003eThe \u003ccode\u003eAll\u003c/code\u003e variants of these functions apply to all\nmatches in the input, not just the first. For\nexample to find all matches for a regexp.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(r.FindAllString(\"peach punch pinch\", -1))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eFindAllString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;peach punch pinch\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(r.FindAllString(\"peach punch pinch\", -1))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "These `All` variants are available for the other\nfunctions we saw above as well.",
          "docs_rendered": "\u003cp\u003eThese \u003ccode\u003eAll\u003c/code\u003e variants are available for the other\nfunctions we saw above as well.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(r.FindAllStringSubmatchIndex(\n        \"peach punch pinch\", -1))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eFindAllStringSubmatchIndex\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n        \u003cspan class=\"s\"\u003e\u0026quot;peach punch pinch\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(r.FindAllStringSubmatchIndex(\n        \"peach punch pinch\", -1))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Providing a non-negative integer as the second\nargument to these functions will limit the number\nof matches.",
          "docs_rendered": "\u003cp\u003eProviding a non-negative integer as the second\nargument to these functions will limit the number\nof matches.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(r.FindAllString(\"peach punch pinch\", 2))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eFindAllString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;peach punch pinch\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(r.FindAllString(\"peach punch pinch\", 2))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Our examples above had string arguments and used\nnames like `MatchString`. We can also provide\n`[]byte` arguments and drop `String` from the\nfunction name.",
          "docs_rendered": "\u003cp\u003eOur examples above had string arguments and used\nnames like \u003ccode\u003eMatchString\u003c/code\u003e. We can also provide\n\u003ccode\u003e[]byte\u003c/code\u003e arguments and drop \u003ccode\u003eString\u003c/code\u003e from the\nfunction name.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(r.Match([]byte(\"peach\")))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eMatch\u003c/span\u003e\u003cspan class=\"p\"\u003e([]\u003c/span\u003e\u003cspan class=\"nb\"\u003ebyte\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;peach\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(r.Match([]byte(\"peach\")))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "When creating global variables with regular\nexpressions you can use the `MustCompile` variation\nof `Compile`. `MustCompile` panics instead of\nreturning an error, which makes it safer to use for\nglobal variables.",
          "docs_rendered": "\u003cp\u003eWhen creating global variables with regular\nexpressions you can use the \u003ccode\u003eMustCompile\u003c/code\u003e variation\nof \u003ccode\u003eCompile\u003c/code\u003e. \u003ccode\u003eMustCompile\u003c/code\u003e panics instead of\nreturning an error, which makes it safer to use for\nglobal variables.\u003c/p\u003e\n",
          "code": "\n    r = regexp.MustCompile(\"p([a-z]+)ch\")\n    fmt.Println(r)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003er\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eregexp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eMustCompile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;p([a-z]+)ch\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    r = regexp.MustCompile(\"p([a-z]+)ch\")\n    fmt.Println(r)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "The `regexp` package can also be used to replace\nsubsets of strings with other values.",
          "docs_rendered": "\u003cp\u003eThe \u003ccode\u003eregexp\u003c/code\u003e package can also be used to replace\nsubsets of strings with other values.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(r.ReplaceAllString(\"a peach\", \"\u003cfruit\u003e\"))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eReplaceAllString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;a peach\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;\u0026lt;fruit\u0026gt;\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(r.ReplaceAllString(\"a peach\", \"\u003cfruit\u003e\"))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "The `Func` variant allows you to transform matched\ntext with a given function.",
          "docs_rendered": "\u003cp\u003eThe \u003ccode\u003eFunc\u003c/code\u003e variant allows you to transform matched\ntext with a given function.\u003c/p\u003e\n",
          "code": "\n    in := []byte(\"a peach\")\n    out := r.ReplaceAllFunc(in, bytes.ToUpper)\n    fmt.Println(string(out))\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ein\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"nb\"\u003ebyte\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;a peach\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eout\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eReplaceAllFunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ein\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ebytes\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eToUpper\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    in := []byte(\"a peach\")\n    out := r.ReplaceAllFunc(in, bytes.ToUpper)\n    fmt.Println(string(out))\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "",
          "docs_rendered": "",
          "code": "$ go run regular-expressions.go \ntrue\ntrue\npeach\n[0 5]\n[peach ea]\n[0 5 1 3]\n[peach punch pinch]\n[[0 5 1 3] [6 11 7 9] [12 17 13 15]]\n[peach punch]\ntrue\np([a-z]+)ch\na \u003cfruit\u003e\na PEACH",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run regular-expressions.go \n\u003cspan class=\"go\"\u003etrue\u003c/span\u003e\n\u003cspan class=\"go\"\u003etrue\u003c/span\u003e\n\u003cspan class=\"go\"\u003epeach\u003c/span\u003e\n\u003cspan class=\"go\"\u003e[0 5]\u003c/span\u003e\n\u003cspan class=\"go\"\u003e[peach ea]\u003c/span\u003e\n\u003cspan class=\"go\"\u003e[0 5 1 3]\u003c/span\u003e\n\u003cspan class=\"go\"\u003e[peach punch pinch]\u003c/span\u003e\n\u003cspan class=\"go\"\u003e[[0 5 1 3] [6 11 7 9] [12 17 13 15]]\u003c/span\u003e\n\u003cspan class=\"go\"\u003e[peach punch]\u003c/span\u003e\n\u003cspan class=\"go\"\u003etrue\u003c/span\u003e\n\u003cspan class=\"go\"\u003ep([a-z]+)ch\u003c/span\u003e\n\u003cspan class=\"go\"\u003ea \u0026lt;fruit\u0026gt;\u003c/span\u003e\n\u003cspan class=\"go\"\u003ea PEACH\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "For a complete reference on Go regular expressions check\nthe [`regexp`](http://golang.org/pkg/regexp/) package docs.",
          "docs_rendered": "\u003cp\u003eFor a complete reference on Go regular expressions check\nthe \u003ca href=\"http://golang.org/pkg/regexp/\"\u003e\u003ccode\u003eregexp\u003c/code\u003e\u003c/a\u003e package docs.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "json",
    "Name": "JSON",
    "GoCode": "// Go offers built-in support for JSON encoding and\n// decoding, including to and from built-in and custom\n// data types.\n\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// We'll use these two structs to demonstrate encoding and\n// decoding of custom types below.\ntype response1 struct {\n\tPage   int\n\tFruits []string\n}\n\n// Only exported fields will be encoded/decoded in JSON.\n// Fields must start with capital letters to be exported.\ntype response2 struct {\n\tPage   int      `json:\"page\"`\n\tFruits []string `json:\"fruits\"`\n}\n\nfunc main() {\n\n\t// First we'll look at encoding basic data types to\n\t// JSON strings. Here are some examples for atomic\n\t// values.\n\tbolB, _ := json.Marshal(true)\n\tfmt.Println(string(bolB))\n\n\tintB, _ := json.Marshal(1)\n\tfmt.Println(string(intB))\n\n\tfltB, _ := json.Marshal(2.34)\n\tfmt.Println(string(fltB))\n\n\tstrB, _ := json.Marshal(\"gopher\")\n\tfmt.Println(string(strB))\n\n\t// And here are some for slices and maps, which encode\n\t// to JSON arrays and objects as you'd expect.\n\tslcD := []string{\"apple\", \"peach\", \"pear\"}\n\tslcB, _ := json.Marshal(slcD)\n\tfmt.Println(string(slcB))\n\n\tmapD := map[string]int{\"apple\": 5, \"lettuce\": 7}\n\tmapB, _ := json.Marshal(mapD)\n\tfmt.Println(string(mapB))\n\n\t// The JSON package can automatically encode your\n\t// custom data types. It will only include exported\n\t// fields in the encoded output and will by default\n\t// use those names as the JSON keys.\n\tres1D := \u0026response1{\n\t\tPage:   1,\n\t\tFruits: []string{\"apple\", \"peach\", \"pear\"}}\n\tres1B, _ := json.Marshal(res1D)\n\tfmt.Println(string(res1B))\n\n\t// You can use tags on struct field declarations\n\t// to customize the encoded JSON key names. Check the\n\t// definition of `response2` above to see an example\n\t// of such tags.\n\tres2D := \u0026response2{\n\t\tPage:   1,\n\t\tFruits: []string{\"apple\", \"peach\", \"pear\"}}\n\tres2B, _ := json.Marshal(res2D)\n\tfmt.Println(string(res2B))\n\n\t// Now let's look at decoding JSON data into Go\n\t// values. Here's an example for a generic data\n\t// structure.\n\tbyt := []byte(`{\"num\":6.13,\"strs\":[\"a\",\"b\"]}`)\n\n\t// We need to provide a variable where the JSON\n\t// package can put the decoded data. This\n\t// `map[string]interface{}` will hold a map of strings\n\t// to arbitrary data types.\n\tvar dat map[string]interface{}\n\n\t// Here's the actual decoding, and a check for\n\t// associated errors.\n\tif err := json.Unmarshal(byt, \u0026dat); err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(dat)\n\n\t// In order to use the values in the decoded map,\n\t// we'll need to convert them to their appropriate type.\n\t// For example here we convert the value in `num` to\n\t// the expected `float64` type.\n\tnum := dat[\"num\"].(float64)\n\tfmt.Println(num)\n\n\t// Accessing nested data requires a series of\n\t// conversions.\n\tstrs := dat[\"strs\"].([]interface{})\n\tstr1 := strs[0].(string)\n\tfmt.Println(str1)\n\n\t// We can also decode JSON into custom data types.\n\t// This has the advantages of adding additional\n\t// type-safety to our programs and eliminating the\n\t// need for type assertions when accessing the decoded\n\t// data.\n\tstr := `{\"page\": 1, \"fruits\": [\"apple\", \"peach\"]}`\n\tres := response2{}\n\tjson.Unmarshal([]byte(str), \u0026res)\n\tfmt.Println(res)\n\tfmt.Println(res.Fruits[0])\n\n\t// In the examples above we always used bytes and\n\t// strings as intermediates between the data and\n\t// JSON representation on standard out. We can also\n\t// stream JSON encodings directly to `os.Writer`s like\n\t// `os.Stdout` or even HTTP response bodies.\n\tenc := json.NewEncoder(os.Stdout)\n\td := map[string]int{\"apple\": 5, \"lettuce\": 7}\n\tenc.Encode(d)\n}\n",
    "GoCodeHash": "35295476f817fe575619b6168273a29eddd7f545",
    "URLHash": "JOQpRGJWAxR",
    "Segs": [
      [
        {
          "docs": "Go offers built-in support for JSON encoding and\ndecoding, including to and from built-in and custom\ndata types.",
          "docs_rendered": "\u003cp\u003eGo offers built-in support for JSON encoding and\ndecoding, including to and from built-in and custom\ndata types.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"encoding/json\"\n    \"fmt\"\n    \"os\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;encoding/json\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;os\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"encoding/json\"\n    \"fmt\"\n    \"os\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "We'll use these two structs to demonstrate encoding and\ndecoding of custom types below.",
          "docs_rendered": "\u003cp\u003eWe\u0026rsquo;ll use these two structs to demonstrate encoding and\ndecoding of custom types below.\u003c/p\u003e\n",
          "code": "\ntype response1 struct {\n    Page   int\n    Fruits []string\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003etype\u003c/span\u003e \u003cspan class=\"nx\"\u003eresponse1\u003c/span\u003e \u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ePage\u003c/span\u003e   \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eFruits\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "type response1 struct {\n    Page   int\n    Fruits []string\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Only exported fields will be encoded/decoded in JSON.\nFields must start with capital letters to be exported.",
          "docs_rendered": "\u003cp\u003eOnly exported fields will be encoded/decoded in JSON.\nFields must start with capital letters to be exported.\u003c/p\u003e\n",
          "code": "\ntype response2 struct {\n    Page   int      `json:\"page\"`\n    Fruits []string `json:\"fruits\"`\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003etype\u003c/span\u003e \u003cspan class=\"nx\"\u003eresponse2\u003c/span\u003e \u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ePage\u003c/span\u003e   \u003cspan class=\"kt\"\u003eint\u003c/span\u003e      \u003cspan class=\"s\"\u003e`json:\u0026quot;page\u0026quot;`\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eFruits\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"s\"\u003e`json:\u0026quot;fruits\u0026quot;`\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "type response2 struct {\n    Page   int      `json:\"page\"`\n    Fruits []string `json:\"fruits\"`\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "First we'll look at encoding basic data types to\nJSON strings. Here are some examples for atomic\nvalues.",
          "docs_rendered": "\u003cp\u003eFirst we\u0026rsquo;ll look at encoding basic data types to\nJSON strings. Here are some examples for atomic\nvalues.\u003c/p\u003e\n",
          "code": "\n    bolB, _ := json.Marshal(true)\n    fmt.Println(string(bolB))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ebolB\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003ejson\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eMarshal\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ebolB\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    bolB, _ := json.Marshal(true)\n    fmt.Println(string(bolB))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "    intB, _ := json.Marshal(1)\n    fmt.Println(string(intB))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003eintB\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003ejson\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eMarshal\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eintB\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    intB, _ := json.Marshal(1)\n    fmt.Println(string(intB))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "    fltB, _ := json.Marshal(2.34)\n    fmt.Println(string(fltB))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efltB\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003ejson\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eMarshal\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mf\"\u003e2.34\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efltB\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fltB, _ := json.Marshal(2.34)\n    fmt.Println(string(fltB))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "    strB, _ := json.Marshal(\"gopher\")\n    fmt.Println(string(strB))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003estrB\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003ejson\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eMarshal\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;gopher\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estrB\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    strB, _ := json.Marshal(\"gopher\")\n    fmt.Println(string(strB))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "And here are some for slices and maps, which encode\nto JSON arrays and objects as you'd expect.",
          "docs_rendered": "\u003cp\u003eAnd here are some for slices and maps, which encode\nto JSON arrays and objects as you\u0026rsquo;d expect.\u003c/p\u003e\n",
          "code": "\n    slcD := []string{\"apple\", \"peach\", \"pear\"}\n    slcB, _ := json.Marshal(slcD)\n    fmt.Println(string(slcB))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003eslcD\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;apple\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;peach\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;pear\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eslcB\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003ejson\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eMarshal\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eslcD\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eslcB\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    slcD := []string{\"apple\", \"peach\", \"pear\"}\n    slcB, _ := json.Marshal(slcD)\n    fmt.Println(string(slcB))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "    mapD := map[string]int{\"apple\": 5, \"lettuce\": 7}\n    mapB, _ := json.Marshal(mapD)\n    fmt.Println(string(mapB))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003emapD\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"kd\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;apple\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;lettuce\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003emapB\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003ejson\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eMarshal\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003emapD\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003emapB\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    mapD := map[string]int{\"apple\": 5, \"lettuce\": 7}\n    mapB, _ := json.Marshal(mapD)\n    fmt.Println(string(mapB))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "The JSON package can automatically encode your\ncustom data types. It will only include exported\nfields in the encoded output and will by default\nuse those names as the JSON keys.",
          "docs_rendered": "\u003cp\u003eThe JSON package can automatically encode your\ncustom data types. It will only include exported\nfields in the encoded output and will by default\nuse those names as the JSON keys.\u003c/p\u003e\n",
          "code": "\n    res1D := \u0026response1{\n        Page:   1,\n        Fruits: []string{\"apple\", \"peach\", \"pear\"}}\n    res1B, _ := json.Marshal(res1D)\n    fmt.Println(string(res1B))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003eres1D\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003eresponse1\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003ePage\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e   \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003eFruits\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;apple\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;peach\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;pear\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e}}\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eres1B\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003ejson\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eMarshal\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eres1D\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eres1B\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    res1D := \u0026response1{\n        Page:   1,\n        Fruits: []string{\"apple\", \"peach\", \"pear\"}}\n    res1B, _ := json.Marshal(res1D)\n    fmt.Println(string(res1B))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "You can use tags on struct field declarations\nto customize the encoded JSON key names. Check the\ndefinition of `response2` above to see an example\nof such tags.",
          "docs_rendered": "\u003cp\u003eYou can use tags on struct field declarations\nto customize the encoded JSON key names. Check the\ndefinition of \u003ccode\u003eresponse2\u003c/code\u003e above to see an example\nof such tags.\u003c/p\u003e\n",
          "code": "\n    res2D := \u0026response2{\n        Page:   1,\n        Fruits: []string{\"apple\", \"peach\", \"pear\"}}\n    res2B, _ := json.Marshal(res2D)\n    fmt.Println(string(res2B))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003eres2D\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003eresponse2\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003ePage\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e   \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003eFruits\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;apple\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;peach\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;pear\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e}}\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eres2B\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003ejson\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eMarshal\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eres2D\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eres2B\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    res2D := \u0026response2{\n        Page:   1,\n        Fruits: []string{\"apple\", \"peach\", \"pear\"}}\n    res2B, _ := json.Marshal(res2D)\n    fmt.Println(string(res2B))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Now let's look at decoding JSON data into Go\nvalues. Here's an example for a generic data\nstructure.",
          "docs_rendered": "\u003cp\u003eNow let\u0026rsquo;s look at decoding JSON data into Go\nvalues. Here\u0026rsquo;s an example for a generic data\nstructure.\u003c/p\u003e\n",
          "code": "\n    byt := []byte(`{\"num\":6.13,\"strs\":[\"a\",\"b\"]}`)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ebyt\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"nb\"\u003ebyte\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e`{\u0026quot;num\u0026quot;:6.13,\u0026quot;strs\u0026quot;:[\u0026quot;a\u0026quot;,\u0026quot;b\u0026quot;]}`\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    byt := []byte(`{\"num\":6.13,\"strs\":[\"a\",\"b\"]}`)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "We need to provide a variable where the JSON\npackage can put the decoded data. This\n`map[string]interface{}` will hold a map of strings\nto arbitrary data types.",
          "docs_rendered": "\u003cp\u003eWe need to provide a variable where the JSON\npackage can put the decoded data. This\n\u003ccode\u003emap[string]interface{}\u003c/code\u003e will hold a map of strings\nto arbitrary data types.\u003c/p\u003e\n",
          "code": "\n    var dat map[string]interface{}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003edat\u003c/span\u003e \u003cspan class=\"kd\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"kd\"\u003einterface\u003c/span\u003e\u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    var dat map[string]interface{}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Here's the actual decoding, and a check for\nassociated errors.",
          "docs_rendered": "\u003cp\u003eHere\u0026rsquo;s the actual decoding, and a check for\nassociated errors.\u003c/p\u003e\n",
          "code": "\n    if err := json.Unmarshal(byt, \u0026dat); err != nil {\n        panic(err)\n    }\n    fmt.Println(dat)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003ejson\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eUnmarshal\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ebyt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003edat\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003epanic\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003edat\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    if err := json.Unmarshal(byt, \u0026dat); err != nil {\n        panic(err)\n    }\n    fmt.Println(dat)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "In order to use the values in the decoded map,\nwe'll need to convert them to their appropriate type.\nFor example here we convert the value in `num` to\nthe expected `float64` type.",
          "docs_rendered": "\u003cp\u003eIn order to use the values in the decoded map,\nwe\u0026rsquo;ll need to convert them to their appropriate type.\nFor example here we convert the value in \u003ccode\u003enum\u003c/code\u003e to\nthe expected \u003ccode\u003efloat64\u003c/code\u003e type.\u003c/p\u003e\n",
          "code": "\n    num := dat[\"num\"].(float64)\n    fmt.Println(num)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003edat\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;num\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e].(\u003c/span\u003e\u003cspan class=\"kt\"\u003efloat64\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    num := dat[\"num\"].(float64)\n    fmt.Println(num)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Accessing nested data requires a series of\nconversions.",
          "docs_rendered": "\u003cp\u003eAccessing nested data requires a series of\nconversions.\u003c/p\u003e\n",
          "code": "\n    strs := dat[\"strs\"].([]interface{})\n    str1 := strs[0].(string)\n    fmt.Println(str1)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003estrs\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003edat\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;strs\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e].([]\u003c/span\u003e\u003cspan class=\"kd\"\u003einterface\u003c/span\u003e\u003cspan class=\"p\"\u003e{})\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003estr1\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003estrs\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e].(\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estr1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    strs := dat[\"strs\"].([]interface{})\n    str1 := strs[0].(string)\n    fmt.Println(str1)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "We can also decode JSON into custom data types.\nThis has the advantages of adding additional\ntype-safety to our programs and eliminating the\nneed for type assertions when accessing the decoded\ndata.",
          "docs_rendered": "\u003cp\u003eWe can also decode JSON into custom data types.\nThis has the advantages of adding additional\ntype-safety to our programs and eliminating the\nneed for type assertions when accessing the decoded\ndata.\u003c/p\u003e\n",
          "code": "\n    str := `{\"page\": 1, \"fruits\": [\"apple\", \"peach\"]}`\n    res := response2{}\n    json.Unmarshal([]byte(str), \u0026res)\n    fmt.Println(res)\n    fmt.Println(res.Fruits[0])",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003estr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"s\"\u003e`{\u0026quot;page\u0026quot;: 1, \u0026quot;fruits\u0026quot;: [\u0026quot;apple\u0026quot;, \u0026quot;peach\u0026quot;]}`\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eres\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eresponse2\u003c/span\u003e\u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ejson\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eUnmarshal\u003c/span\u003e\u003cspan class=\"p\"\u003e([]\u003c/span\u003e\u003cspan class=\"nb\"\u003ebyte\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eFruits\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    str := `{\"page\": 1, \"fruits\": [\"apple\", \"peach\"]}`\n    res := response2{}\n    json.Unmarshal([]byte(str), \u0026res)\n    fmt.Println(res)\n    fmt.Println(res.Fruits[0])\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "In the examples above we always used bytes and\nstrings as intermediates between the data and\nJSON representation on standard out. We can also\nstream JSON encodings directly to `os.Writer`s like\n`os.Stdout` or even HTTP response bodies.",
          "docs_rendered": "\u003cp\u003eIn the examples above we always used bytes and\nstrings as intermediates between the data and\nJSON representation on standard out. We can also\nstream JSON encodings directly to \u003ccode\u003eos.Writer\u003c/code\u003es like\n\u003ccode\u003eos.Stdout\u003c/code\u003e or even HTTP response bodies.\u003c/p\u003e\n",
          "code": "\n    enc := json.NewEncoder(os.Stdout)\n    d := map[string]int{\"apple\": 5, \"lettuce\": 7}\n    enc.Encode(d)\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003eenc\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003ejson\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eNewEncoder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eStdout\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ed\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"kd\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;apple\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;lettuce\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eenc\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eEncode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    enc := json.NewEncoder(os.Stdout)\n    d := map[string]int{\"apple\": 5, \"lettuce\": 7}\n    enc.Encode(d)\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "",
          "docs_rendered": "",
          "code": "$ go run json.go\ntrue\n1\n2.34\n\"gopher\"\n[\"apple\",\"peach\",\"pear\"]\n{\"apple\":5,\"lettuce\":7}\n{\"Page\":1,\"Fruits\":[\"apple\",\"peach\",\"pear\"]}\n{\"page\":1,\"fruits\":[\"apple\",\"peach\",\"pear\"]}\nmap[num:6.13 strs:[a b]]\n6.13\na\n{1 [apple peach]}\napple\n{\"apple\":5,\"lettuce\":7}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run json.go\n\u003cspan class=\"go\"\u003etrue\u003c/span\u003e\n\u003cspan class=\"go\"\u003e1\u003c/span\u003e\n\u003cspan class=\"go\"\u003e2.34\u003c/span\u003e\n\u003cspan class=\"go\"\u003e\u0026quot;gopher\u0026quot;\u003c/span\u003e\n\u003cspan class=\"go\"\u003e[\u0026quot;apple\u0026quot;,\u0026quot;peach\u0026quot;,\u0026quot;pear\u0026quot;]\u003c/span\u003e\n\u003cspan class=\"go\"\u003e{\u0026quot;apple\u0026quot;:5,\u0026quot;lettuce\u0026quot;:7}\u003c/span\u003e\n\u003cspan class=\"go\"\u003e{\u0026quot;Page\u0026quot;:1,\u0026quot;Fruits\u0026quot;:[\u0026quot;apple\u0026quot;,\u0026quot;peach\u0026quot;,\u0026quot;pear\u0026quot;]}\u003c/span\u003e\n\u003cspan class=\"go\"\u003e{\u0026quot;page\u0026quot;:1,\u0026quot;fruits\u0026quot;:[\u0026quot;apple\u0026quot;,\u0026quot;peach\u0026quot;,\u0026quot;pear\u0026quot;]}\u003c/span\u003e\n\u003cspan class=\"go\"\u003emap[num:6.13 strs:[a b]]\u003c/span\u003e\n\u003cspan class=\"go\"\u003e6.13\u003c/span\u003e\n\u003cspan class=\"go\"\u003ea\u003c/span\u003e\n\u003cspan class=\"go\"\u003e{1 [apple peach]}\u003c/span\u003e\n\u003cspan class=\"go\"\u003eapple\u003c/span\u003e\n\u003cspan class=\"go\"\u003e{\u0026quot;apple\u0026quot;:5,\u0026quot;lettuce\u0026quot;:7}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "We've covered the basic of JSON in Go here, but check\nout the [JSON and Go](http://blog.golang.org/2011/01/json-and-go.html)\nblog post and [JSON package docs](http://golang.org/pkg/encoding/json/)\nfor more.",
          "docs_rendered": "\u003cp\u003eWe\u0026rsquo;ve covered the basic of JSON in Go here, but check\nout the \u003ca href=\"http://blog.golang.org/2011/01/json-and-go.html\"\u003eJSON and Go\u003c/a\u003e\nblog post and \u003ca href=\"http://golang.org/pkg/encoding/json/\"\u003eJSON package docs\u003c/a\u003e\nfor more.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "xml",
    "Name": "XML",
    "GoCode": "// Go offers built-in support for XML and XML-like\n// formats with the `encoding.xml` package.\n\npackage main\n\nimport (\n\t\"encoding/xml\"\n\t\"fmt\"\n)\n\n// Plant will be mapped to XML. Similarly to the\n// JSON examples, field tags contain directives for the\n// encoder and decoder. Here we use some special features\n// of the XML package: the `XMLName` field name dictates\n// the name of the XML element representing this struct;\n// `id,attr` means that the `Id` field is an XML\n// _attribute_ rather than a nested element.\ntype Plant struct {\n\tXMLName xml.Name `xml:\"plant\"`\n\tId      int      `xml:\"id,attr\"`\n\tName    string   `xml:\"name\"`\n\tOrigin  []string `xml:\"origin\"`\n}\n\nfunc (p Plant) String() string {\n\treturn fmt.Sprintf(\"Plant id=%v, name=%v, origin=%v\",\n\t\tp.Id, p.Name, p.Origin)\n}\n\nfunc main() {\n\tcoffee := \u0026Plant{Id: 27, Name: \"Coffee\"}\n\tcoffee.Origin = []string{\"Ethiopia\", \"Brazil\"}\n\n\t// Emit XML representing our plant; using\n\t// `MarshalIndent` to produce a more\n\t// human-readable output.\n\tout, _ := xml.MarshalIndent(coffee, \" \", \"  \")\n\tfmt.Println(string(out))\n\n\t// To add a generic XML header to the output, append\n\t// it explicitly.\n\tfmt.Println(xml.Header + string(out))\n\n\t// Use `Unmarhshal` to parse a stream of bytes with XML\n\t// into a data structure. If the XML is malformed or\n\t// cannot be mapped onto Plant, a descriptive error\n\t// will be returned.\n\tvar p Plant\n\tif err := xml.Unmarshal(out, \u0026p); err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(p)\n\n\ttomato := \u0026Plant{Id: 81, Name: \"Tomato\"}\n\ttomato.Origin = []string{\"Mexico\", \"California\"}\n\n\t// The `parent\u003echild\u003eplant` field tag tells the encoder\n\t// to nest all `plant`s under `\u003cparent\u003e\u003cchild\u003e...`\n\ttype Nesting struct {\n\t\tXMLName xml.Name `xml:\"nesting\"`\n\t\tPlants  []*Plant `xml:\"parent\u003echild\u003eplant\"`\n\t}\n\n\tnesting := \u0026Nesting{}\n\tnesting.Plants = []*Plant{coffee, tomato}\n\n\tout, _ = xml.MarshalIndent(nesting, \" \", \"  \")\n\tfmt.Println(string(out))\n}\n",
    "GoCodeHash": "d5da1784f3aa0bbba452d21c70833621a62159f4",
    "URLHash": "RsNLhMBazeX",
    "Segs": [
      [
        {
          "docs": "Go offers built-in support for XML and XML-like\nformats with the `encoding.xml` package.",
          "docs_rendered": "\u003cp\u003eGo offers built-in support for XML and XML-like\nformats with the \u003ccode\u003eencoding.xml\u003c/code\u003e package.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"encoding/xml\"\n    \"fmt\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;encoding/xml\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"encoding/xml\"\n    \"fmt\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Plant will be mapped to XML. Similarly to the\nJSON examples, field tags contain directives for the\nencoder and decoder. Here we use some special features\nof the XML package: the `XMLName` field name dictates\nthe name of the XML element representing this struct;\n`id,attr` means that the `Id` field is an XML\n_attribute_ rather than a nested element.",
          "docs_rendered": "\u003cp\u003ePlant will be mapped to XML. Similarly to the\nJSON examples, field tags contain directives for the\nencoder and decoder. Here we use some special features\nof the XML package: the \u003ccode\u003eXMLName\u003c/code\u003e field name dictates\nthe name of the XML element representing this struct;\n\u003ccode\u003eid,attr\u003c/code\u003e means that the \u003ccode\u003eId\u003c/code\u003e field is an XML\n\u003cem\u003eattribute\u003c/em\u003e rather than a nested element.\u003c/p\u003e\n",
          "code": "\ntype Plant struct {\n    XMLName xml.Name `xml:\"plant\"`\n    Id      int      `xml:\"id,attr\"`\n    Name    string   `xml:\"name\"`\n    Origin  []string `xml:\"origin\"`\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003etype\u003c/span\u003e \u003cspan class=\"nx\"\u003ePlant\u003c/span\u003e \u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eXMLName\u003c/span\u003e \u003cspan class=\"nx\"\u003exml\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eName\u003c/span\u003e \u003cspan class=\"s\"\u003e`xml:\u0026quot;plant\u0026quot;`\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eId\u003c/span\u003e      \u003cspan class=\"kt\"\u003eint\u003c/span\u003e      \u003cspan class=\"s\"\u003e`xml:\u0026quot;id,attr\u0026quot;`\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eName\u003c/span\u003e    \u003cspan class=\"kt\"\u003estring\u003c/span\u003e   \u003cspan class=\"s\"\u003e`xml:\u0026quot;name\u0026quot;`\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eOrigin\u003c/span\u003e  \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"s\"\u003e`xml:\u0026quot;origin\u0026quot;`\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "type Plant struct {\n    XMLName xml.Name `xml:\"plant\"`\n    Id      int      `xml:\"id,attr\"`\n    Name    string   `xml:\"name\"`\n    Origin  []string `xml:\"origin\"`\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func (p Plant) String() string {\n    return fmt.Sprintf(\"Plant id=%v, name=%v, origin=%v\",\n        p.Id, p.Name, p.Origin)\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ep\u003c/span\u003e \u003cspan class=\"nx\"\u003ePlant\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nx\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Plant id=%v, name=%v, origin=%v\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eId\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eOrigin\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func (p Plant) String() string {\n    return fmt.Sprintf(\"Plant id=%v, name=%v, origin=%v\",\n        p.Id, p.Name, p.Origin)\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {\n    coffee := \u0026Plant{Id: 27, Name: \"Coffee\"}\n    coffee.Origin = []string{\"Ethiopia\", \"Brazil\"}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ecoffee\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003ePlant\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003eId\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e27\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;Coffee\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ecoffee\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eOrigin\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Ethiopia\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;Brazil\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n    coffee := \u0026Plant{Id: 27, Name: \"Coffee\"}\n    coffee.Origin = []string{\"Ethiopia\", \"Brazil\"}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Emit XML representing our plant; using\n`MarshalIndent` to produce a more\nhuman-readable output.",
          "docs_rendered": "\u003cp\u003eEmit XML representing our plant; using\n\u003ccode\u003eMarshalIndent\u003c/code\u003e to produce a more\nhuman-readable output.\u003c/p\u003e\n",
          "code": "\n    out, _ := xml.MarshalIndent(coffee, \" \", \"  \")\n    fmt.Println(string(out))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003exml\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eMarshalIndent\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecoffee\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot; \u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;  \u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    out, _ := xml.MarshalIndent(coffee, \" \", \"  \")\n    fmt.Println(string(out))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "To add a generic XML header to the output, append\nit explicitly.",
          "docs_rendered": "\u003cp\u003eTo add a generic XML header to the output, append\nit explicitly.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(xml.Header + string(out))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003exml\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eHeader\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nb\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(xml.Header + string(out))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Use `Unmarhshal` to parse a stream of bytes with XML\ninto a data structure. If the XML is malformed or\ncannot be mapped onto Plant, a descriptive error\nwill be returned.",
          "docs_rendered": "\u003cp\u003eUse \u003ccode\u003eUnmarhshal\u003c/code\u003e to parse a stream of bytes with XML\ninto a data structure. If the XML is malformed or\ncannot be mapped onto Plant, a descriptive error\nwill be returned.\u003c/p\u003e\n",
          "code": "\n    var p Plant\n    if err := xml.Unmarshal(out, \u0026p); err != nil {\n        panic(err)\n    }\n    fmt.Println(p)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003ep\u003c/span\u003e \u003cspan class=\"nx\"\u003ePlant\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003exml\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eUnmarshal\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003epanic\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    var p Plant\n    if err := xml.Unmarshal(out, \u0026p); err != nil {\n        panic(err)\n    }\n    fmt.Println(p)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "    tomato := \u0026Plant{Id: 81, Name: \"Tomato\"}\n    tomato.Origin = []string{\"Mexico\", \"California\"}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003etomato\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003ePlant\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003eId\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e81\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;Tomato\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003etomato\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eOrigin\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Mexico\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;California\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    tomato := \u0026Plant{Id: 81, Name: \"Tomato\"}\n    tomato.Origin = []string{\"Mexico\", \"California\"}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "The `parent\u003echild\u003eplant` field tag tells the encoder\nto nest all `plant`s under `\u003cparent\u003e\u003cchild\u003e...`",
          "docs_rendered": "\u003cp\u003eThe \u003ccode\u003eparent\u0026gt;child\u0026gt;plant\u003c/code\u003e field tag tells the encoder\nto nest all \u003ccode\u003eplant\u003c/code\u003es under \u003ccode\u003e\u0026lt;parent\u0026gt;\u0026lt;child\u0026gt;...\u003c/code\u003e\u003c/p\u003e\n",
          "code": "\n    type Nesting struct {\n        XMLName xml.Name `xml:\"nesting\"`\n        Plants  []*Plant `xml:\"parent\u003echild\u003eplant\"`\n    }",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"kd\"\u003etype\u003c/span\u003e \u003cspan class=\"nx\"\u003eNesting\u003c/span\u003e \u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003eXMLName\u003c/span\u003e \u003cspan class=\"nx\"\u003exml\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eName\u003c/span\u003e \u003cspan class=\"s\"\u003e`xml:\u0026quot;nesting\u0026quot;`\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003ePlants\u003c/span\u003e  \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003ePlant\u003c/span\u003e \u003cspan class=\"s\"\u003e`xml:\u0026quot;parent\u0026gt;child\u0026gt;plant\u0026quot;`\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    type Nesting struct {\n        XMLName xml.Name `xml:\"nesting\"`\n        Plants  []*Plant `xml:\"parent\u003echild\u003eplant\"`\n    }\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "    nesting := \u0026Nesting{}\n    nesting.Plants = []*Plant{coffee, tomato}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003enesting\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003eNesting\u003c/span\u003e\u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003enesting\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePlants\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003ePlant\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003ecoffee\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003etomato\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    nesting := \u0026Nesting{}\n    nesting.Plants = []*Plant{coffee, tomato}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "    out, _ = xml.MarshalIndent(nesting, \" \", \"  \")\n    fmt.Println(string(out))\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003e_\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003exml\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eMarshalIndent\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enesting\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot; \u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;  \u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    out, _ = xml.MarshalIndent(nesting, \" \", \"  \")\n    fmt.Println(string(out))\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "",
          "docs_rendered": "",
          "code": "$ go run xml.go\n \u003cplant id=\"27\"\u003e\n   \u003cname\u003eCoffee\u003c/name\u003e\n   \u003corigin\u003eEthiopia\u003c/origin\u003e\n   \u003corigin\u003eBrazil\u003c/origin\u003e\n \u003c/plant\u003e\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n \u003cplant id=\"27\"\u003e\n   \u003cname\u003eCoffee\u003c/name\u003e\n   \u003corigin\u003eEthiopia\u003c/origin\u003e\n   \u003corigin\u003eBrazil\u003c/origin\u003e\n \u003c/plant\u003e\nPlant id=27, name=Coffee, origin=[Ethiopia Brazil]\n \u003cnesting\u003e\n   \u003cparent\u003e\n     \u003cchild\u003e\n       \u003cplant id=\"27\"\u003e\n         \u003cname\u003eCoffee\u003c/name\u003e\n         \u003corigin\u003eEthiopia\u003c/origin\u003e\n         \u003corigin\u003eBrazil\u003c/origin\u003e\n       \u003c/plant\u003e\n       \u003cplant id=\"81\"\u003e\n         \u003cname\u003eTomato\u003c/name\u003e\n         \u003corigin\u003eMexico\u003c/origin\u003e\n         \u003corigin\u003eCalifornia\u003c/origin\u003e\n       \u003c/plant\u003e\n     \u003c/child\u003e\n   \u003c/parent\u003e\n \u003c/nesting\u003e",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run xml.go\n\u003cspan class=\"go\"\u003e \u0026lt;plant id=\u0026quot;27\u0026quot;\u0026gt;\u003c/span\u003e\n\u003cspan class=\"go\"\u003e   \u0026lt;name\u0026gt;Coffee\u0026lt;/name\u0026gt;\u003c/span\u003e\n\u003cspan class=\"go\"\u003e   \u0026lt;origin\u0026gt;Ethiopia\u0026lt;/origin\u0026gt;\u003c/span\u003e\n\u003cspan class=\"go\"\u003e   \u0026lt;origin\u0026gt;Brazil\u0026lt;/origin\u0026gt;\u003c/span\u003e\n\u003cspan class=\"go\"\u003e \u0026lt;/plant\u0026gt;\u003c/span\u003e\n\u003cspan class=\"go\"\u003e\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt;\u003c/span\u003e\n\u003cspan class=\"go\"\u003e \u0026lt;plant id=\u0026quot;27\u0026quot;\u0026gt;\u003c/span\u003e\n\u003cspan class=\"go\"\u003e   \u0026lt;name\u0026gt;Coffee\u0026lt;/name\u0026gt;\u003c/span\u003e\n\u003cspan class=\"go\"\u003e   \u0026lt;origin\u0026gt;Ethiopia\u0026lt;/origin\u0026gt;\u003c/span\u003e\n\u003cspan class=\"go\"\u003e   \u0026lt;origin\u0026gt;Brazil\u0026lt;/origin\u0026gt;\u003c/span\u003e\n\u003cspan class=\"go\"\u003e \u0026lt;/plant\u0026gt;\u003c/span\u003e\n\u003cspan class=\"go\"\u003ePlant id=27, name=Coffee, origin=[Ethiopia Brazil]\u003c/span\u003e\n\u003cspan class=\"go\"\u003e \u0026lt;nesting\u0026gt;\u003c/span\u003e\n\u003cspan class=\"go\"\u003e   \u0026lt;parent\u0026gt;\u003c/span\u003e\n\u003cspan class=\"go\"\u003e     \u0026lt;child\u0026gt;\u003c/span\u003e\n\u003cspan class=\"go\"\u003e       \u0026lt;plant id=\u0026quot;27\u0026quot;\u0026gt;\u003c/span\u003e\n\u003cspan class=\"go\"\u003e         \u0026lt;name\u0026gt;Coffee\u0026lt;/name\u0026gt;\u003c/span\u003e\n\u003cspan class=\"go\"\u003e         \u0026lt;origin\u0026gt;Ethiopia\u0026lt;/origin\u0026gt;\u003c/span\u003e\n\u003cspan class=\"go\"\u003e         \u0026lt;origin\u0026gt;Brazil\u0026lt;/origin\u0026gt;\u003c/span\u003e\n\u003cspan class=\"go\"\u003e       \u0026lt;/plant\u0026gt;\u003c/span\u003e\n\u003cspan class=\"go\"\u003e       \u0026lt;plant id=\u0026quot;81\u0026quot;\u0026gt;\u003c/span\u003e\n\u003cspan class=\"go\"\u003e         \u0026lt;name\u0026gt;Tomato\u0026lt;/name\u0026gt;\u003c/span\u003e\n\u003cspan class=\"go\"\u003e         \u0026lt;origin\u0026gt;Mexico\u0026lt;/origin\u0026gt;\u003c/span\u003e\n\u003cspan class=\"go\"\u003e         \u0026lt;origin\u0026gt;California\u0026lt;/origin\u0026gt;\u003c/span\u003e\n\u003cspan class=\"go\"\u003e       \u0026lt;/plant\u0026gt;\u003c/span\u003e\n\u003cspan class=\"go\"\u003e     \u0026lt;/child\u0026gt;\u003c/span\u003e\n\u003cspan class=\"go\"\u003e   \u0026lt;/parent\u0026gt;\u003c/span\u003e\n\u003cspan class=\"go\"\u003e \u0026lt;/nesting\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "time",
    "Name": "Time",
    "GoCode": "// Go offers extensive support for times and durations;\n// here are some examples.\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tp := fmt.Println\n\n\t// We'll start by getting the current time.\n\tnow := time.Now()\n\tp(now)\n\n\t// You can build a `time` struct by providing the\n\t// year, month, day, etc. Times are always associated\n\t// with a `Location`, i.e. time zone.\n\tthen := time.Date(\n\t\t2009, 11, 17, 20, 34, 58, 651387237, time.UTC)\n\tp(then)\n\n\t// You can extract the various components of the time\n\t// value as expected.\n\tp(then.Year())\n\tp(then.Month())\n\tp(then.Day())\n\tp(then.Hour())\n\tp(then.Minute())\n\tp(then.Second())\n\tp(then.Nanosecond())\n\tp(then.Location())\n\n\t// The Monday-Sunday `Weekday` is also available.\n\tp(then.Weekday())\n\n\t// These methods compare two times, testing if the\n\t// first occurs before, after, or at the same time\n\t// as the second, respectively.\n\tp(then.Before(now))\n\tp(then.After(now))\n\tp(then.Equal(now))\n\n\t// The `Sub` methods returns a `Duration` representing\n\t// the interval between two times.\n\tdiff := now.Sub(then)\n\tp(diff)\n\n\t// We can compute the length of the duration in\n\t// various units.\n\tp(diff.Hours())\n\tp(diff.Minutes())\n\tp(diff.Seconds())\n\tp(diff.Nanoseconds())\n\n\t// You can use `Add` to advance a time by a given\n\t// duration, or with a `-` to move backwards by a\n\t// duration.\n\tp(then.Add(diff))\n\tp(then.Add(-diff))\n}\n",
    "GoCodeHash": "24eefcc82ee0c70a4678a4952fe2b8c558c7419c",
    "URLHash": "YAM3s1KPc8c",
    "Segs": [
      [
        {
          "docs": "Go offers extensive support for times and durations;\nhere are some examples.",
          "docs_rendered": "\u003cp\u003eGo offers extensive support for times and durations;\nhere are some examples.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"fmt\"\n    \"time\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;time\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"fmt\"\n    \"time\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {\n    p := fmt.Println",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n    p := fmt.Println\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "We'll start by getting the current time.",
          "docs_rendered": "\u003cp\u003eWe\u0026rsquo;ll start by getting the current time.\u003c/p\u003e\n",
          "code": "\n    now := time.Now()\n    p(now)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003enow\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eNow\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enow\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    now := time.Now()\n    p(now)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "You can build a `time` struct by providing the\nyear, month, day, etc. Times are always associated\nwith a `Location`, i.e. time zone.",
          "docs_rendered": "\u003cp\u003eYou can build a \u003ccode\u003etime\u003c/code\u003e struct by providing the\nyear, month, day, etc. Times are always associated\nwith a \u003ccode\u003eLocation\u003c/code\u003e, i.e. time zone.\u003c/p\u003e\n",
          "code": "\n    then := time.Date(\n        2009, 11, 17, 20, 34, 58, 651387237, time.UTC)\n    p(then)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ethen\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eDate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n        \u003cspan class=\"mi\"\u003e2009\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e17\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e20\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e34\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e58\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e651387237\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eUTC\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ethen\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    then := time.Date(\n        2009, 11, 17, 20, 34, 58, 651387237, time.UTC)\n    p(then)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "You can extract the various components of the time\nvalue as expected.",
          "docs_rendered": "\u003cp\u003eYou can extract the various components of the time\nvalue as expected.\u003c/p\u003e\n",
          "code": "\n    p(then.Year())\n    p(then.Month())\n    p(then.Day())\n    p(then.Hour())\n    p(then.Minute())\n    p(then.Second())\n    p(then.Nanosecond())\n    p(then.Location())",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ethen\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eYear\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ethen\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eMonth\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ethen\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eDay\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ethen\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eHour\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ethen\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eMinute\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ethen\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSecond\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ethen\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eNanosecond\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ethen\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eLocation\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    p(then.Year())\n    p(then.Month())\n    p(then.Day())\n    p(then.Hour())\n    p(then.Minute())\n    p(then.Second())\n    p(then.Nanosecond())\n    p(then.Location())\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "The Monday-Sunday `Weekday` is also available.",
          "docs_rendered": "\u003cp\u003eThe Monday-Sunday \u003ccode\u003eWeekday\u003c/code\u003e is also available.\u003c/p\u003e\n",
          "code": "\n    p(then.Weekday())",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ethen\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eWeekday\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    p(then.Weekday())\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "These methods compare two times, testing if the\nfirst occurs before, after, or at the same time\nas the second, respectively.",
          "docs_rendered": "\u003cp\u003eThese methods compare two times, testing if the\nfirst occurs before, after, or at the same time\nas the second, respectively.\u003c/p\u003e\n",
          "code": "\n    p(then.Before(now))\n    p(then.After(now))\n    p(then.Equal(now))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ethen\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eBefore\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enow\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ethen\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eAfter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enow\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ethen\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enow\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    p(then.Before(now))\n    p(then.After(now))\n    p(then.Equal(now))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "The `Sub` methods returns a `Duration` representing\nthe interval between two times.",
          "docs_rendered": "\u003cp\u003eThe \u003ccode\u003eSub\u003c/code\u003e methods returns a \u003ccode\u003eDuration\u003c/code\u003e representing\nthe interval between two times.\u003c/p\u003e\n",
          "code": "\n    diff := now.Sub(then)\n    p(diff)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ediff\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003enow\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSub\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ethen\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ediff\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    diff := now.Sub(then)\n    p(diff)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "We can compute the length of the duration in\nvarious units.",
          "docs_rendered": "\u003cp\u003eWe can compute the length of the duration in\nvarious units.\u003c/p\u003e\n",
          "code": "\n    p(diff.Hours())\n    p(diff.Minutes())\n    p(diff.Seconds())\n    p(diff.Nanoseconds())",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ediff\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eHours\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ediff\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eMinutes\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ediff\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSeconds\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ediff\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eNanoseconds\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    p(diff.Hours())\n    p(diff.Minutes())\n    p(diff.Seconds())\n    p(diff.Nanoseconds())\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "You can use `Add` to advance a time by a given\nduration, or with a `-` to move backwards by a\nduration.",
          "docs_rendered": "\u003cp\u003eYou can use \u003ccode\u003eAdd\u003c/code\u003e to advance a time by a given\nduration, or with a \u003ccode\u003e-\u003c/code\u003e to move backwards by a\nduration.\u003c/p\u003e\n",
          "code": "\n    p(then.Add(diff))\n    p(then.Add(-diff))\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ethen\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eAdd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ediff\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ethen\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eAdd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"nx\"\u003ediff\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    p(then.Add(diff))\n    p(then.Add(-diff))\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "",
          "docs_rendered": "",
          "code": "$ go run time.go\n2012-10-31 15:50:13.793654 +0000 UTC\n2009-11-17 20:34:58.651387237 +0000 UTC\n2009\nNovember\n17\n20\n34\n58\n651387237\nUTC\nTuesday\ntrue\nfalse\nfalse\n25891h15m15.142266763s\n25891.25420618521\n1.5534752523711128e+06\n9.320851514226677e+07\n93208515142266763\n2012-10-31 15:50:13.793654 +0000 UTC\n2006-12-05 01:19:43.509120474 +0000 UTC",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run time.go\n\u003cspan class=\"go\"\u003e2012-10-31 15:50:13.793654 +0000 UTC\u003c/span\u003e\n\u003cspan class=\"go\"\u003e2009-11-17 20:34:58.651387237 +0000 UTC\u003c/span\u003e\n\u003cspan class=\"go\"\u003e2009\u003c/span\u003e\n\u003cspan class=\"go\"\u003eNovember\u003c/span\u003e\n\u003cspan class=\"go\"\u003e17\u003c/span\u003e\n\u003cspan class=\"go\"\u003e20\u003c/span\u003e\n\u003cspan class=\"go\"\u003e34\u003c/span\u003e\n\u003cspan class=\"go\"\u003e58\u003c/span\u003e\n\u003cspan class=\"go\"\u003e651387237\u003c/span\u003e\n\u003cspan class=\"go\"\u003eUTC\u003c/span\u003e\n\u003cspan class=\"go\"\u003eTuesday\u003c/span\u003e\n\u003cspan class=\"go\"\u003etrue\u003c/span\u003e\n\u003cspan class=\"go\"\u003efalse\u003c/span\u003e\n\u003cspan class=\"go\"\u003efalse\u003c/span\u003e\n\u003cspan class=\"go\"\u003e25891h15m15.142266763s\u003c/span\u003e\n\u003cspan class=\"go\"\u003e25891.25420618521\u003c/span\u003e\n\u003cspan class=\"go\"\u003e1.5534752523711128e+06\u003c/span\u003e\n\u003cspan class=\"go\"\u003e9.320851514226677e+07\u003c/span\u003e\n\u003cspan class=\"go\"\u003e93208515142266763\u003c/span\u003e\n\u003cspan class=\"go\"\u003e2012-10-31 15:50:13.793654 +0000 UTC\u003c/span\u003e\n\u003cspan class=\"go\"\u003e2006-12-05 01:19:43.509120474 +0000 UTC\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Next we'll look at the related idea of time relative to\nthe Unix epoch.",
          "docs_rendered": "\u003cp\u003eNext we\u0026rsquo;ll look at the related idea of time relative to\nthe Unix epoch.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "epoch",
    "Name": "Epoch",
    "GoCode": "// A common requirement in programs is getting the number\n// of seconds, milliseconds, or nanoseconds since the\n// [Unix epoch](http://en.wikipedia.org/wiki/Unix_time).\n// Here's how to do it in Go.\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\n\t// Use `time.Now` with `Unix` or `UnixNano` to get\n\t// elapsed time since the Unix epoch in seconds or\n\t// nanoseconds, respectively.\n\tnow := time.Now()\n\tsecs := now.Unix()\n\tnanos := now.UnixNano()\n\tfmt.Println(now)\n\n\t// Note that there is no `UnixMillis`, so to get the\n\t// milliseconds since epoch you'll need to manually\n\t// divide from nanoseconds.\n\tmillis := nanos / 1000000\n\tfmt.Println(secs)\n\tfmt.Println(millis)\n\tfmt.Println(nanos)\n\n\t// You can also convert integer seconds or nanoseconds\n\t// since the epoch into the corresponding `time`.\n\tfmt.Println(time.Unix(secs, 0))\n\tfmt.Println(time.Unix(0, nanos))\n}\n",
    "GoCodeHash": "3b1fc502f41a978f1c8150335801aa9096db8954",
    "URLHash": "0ooeler0RfR",
    "Segs": [
      [
        {
          "docs": "A common requirement in programs is getting the number\nof seconds, milliseconds, or nanoseconds since the\n[Unix epoch](http://en.wikipedia.org/wiki/Unix_time).\nHere's how to do it in Go.",
          "docs_rendered": "\u003cp\u003eA common requirement in programs is getting the number\nof seconds, milliseconds, or nanoseconds since the\n\u003ca href=\"http://en.wikipedia.org/wiki/Unix_time\"\u003eUnix epoch\u003c/a\u003e.\nHere\u0026rsquo;s how to do it in Go.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"fmt\"\n    \"time\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;time\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"fmt\"\n    \"time\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Use `time.Now` with `Unix` or `UnixNano` to get\nelapsed time since the Unix epoch in seconds or\nnanoseconds, respectively.",
          "docs_rendered": "\u003cp\u003eUse \u003ccode\u003etime.Now\u003c/code\u003e with \u003ccode\u003eUnix\u003c/code\u003e or \u003ccode\u003eUnixNano\u003c/code\u003e to get\nelapsed time since the Unix epoch in seconds or\nnanoseconds, respectively.\u003c/p\u003e\n",
          "code": "\n    now := time.Now()\n    secs := now.Unix()\n    nanos := now.UnixNano()\n    fmt.Println(now)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003enow\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eNow\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003esecs\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003enow\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eUnix\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003enanos\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003enow\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eUnixNano\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enow\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    now := time.Now()\n    secs := now.Unix()\n    nanos := now.UnixNano()\n    fmt.Println(now)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Note that there is no `UnixMillis`, so to get the\nmilliseconds since epoch you'll need to manually\ndivide from nanoseconds.",
          "docs_rendered": "\u003cp\u003eNote that there is no \u003ccode\u003eUnixMillis\u003c/code\u003e, so to get the\nmilliseconds since epoch you\u0026rsquo;ll need to manually\ndivide from nanoseconds.\u003c/p\u003e\n",
          "code": "\n    millis := nanos / 1000000\n    fmt.Println(secs)\n    fmt.Println(millis)\n    fmt.Println(nanos)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003emillis\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003enanos\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e1000000\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esecs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003emillis\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enanos\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    millis := nanos / 1000000\n    fmt.Println(secs)\n    fmt.Println(millis)\n    fmt.Println(nanos)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "You can also convert integer seconds or nanoseconds\nsince the epoch into the corresponding `time`.",
          "docs_rendered": "\u003cp\u003eYou can also convert integer seconds or nanoseconds\nsince the epoch into the corresponding \u003ccode\u003etime\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(time.Unix(secs, 0))\n    fmt.Println(time.Unix(0, nanos))\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eUnix\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esecs\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eUnix\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003enanos\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(time.Unix(secs, 0))\n    fmt.Println(time.Unix(0, nanos))\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "",
          "docs_rendered": "",
          "code": "$ go run epoch.go \n2012-10-31 16:13:58.292387 +0000 UTC\n1351700038\n1351700038292\n1351700038292387000\n2012-10-31 16:13:58 +0000 UTC\n2012-10-31 16:13:58.292387 +0000 UTC",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run epoch.go \n\u003cspan class=\"go\"\u003e2012-10-31 16:13:58.292387 +0000 UTC\u003c/span\u003e\n\u003cspan class=\"go\"\u003e1351700038\u003c/span\u003e\n\u003cspan class=\"go\"\u003e1351700038292\u003c/span\u003e\n\u003cspan class=\"go\"\u003e1351700038292387000\u003c/span\u003e\n\u003cspan class=\"go\"\u003e2012-10-31 16:13:58 +0000 UTC\u003c/span\u003e\n\u003cspan class=\"go\"\u003e2012-10-31 16:13:58.292387 +0000 UTC\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Next we'll look at another time-related task: time\nparsing and formatting.",
          "docs_rendered": "\u003cp\u003eNext we\u0026rsquo;ll look at another time-related task: time\nparsing and formatting.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "time-formatting-parsing",
    "Name": "Time Formatting / Parsing",
    "GoCode": "// Go supports time formatting and parsing via\n// pattern-based layouts.\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tp := fmt.Println\n\n\t// Here's a basic example of formatting a time\n\t// according to RFC3339, using the corresponding layout\n\t// constant.\n\tt := time.Now()\n\tp(t.Format(time.RFC3339))\n\n\t// Time parsing uses the same layout values as `Format`.\n\tt1, e := time.Parse(\n\t\ttime.RFC3339,\n\t\t\"2012-11-01T22:08:41+00:00\")\n\tp(t1)\n\n\t// `Format` and `Parse` use example-based layouts. Usually\n\t// you'll use a constant from `time` for these layouts, but\n\t// you can also supply custom layouts. Layouts must use the\n\t// reference time `Mon Jan 2 15:04:05 MST 2006` to show the\n\t// pattern with which to format/parse a given time/string.\n\t// The example time must be exactly as shown: the year 2006,\n\t// 15 for the hour, Monday for the day of the week, etc.\n\tp(t.Format(\"3:04PM\"))\n\tp(t.Format(\"Mon Jan _2 15:04:05 2006\"))\n\tp(t.Format(\"2006-01-02T15:04:05.999999-07:00\"))\n\tform := \"3 04 PM\"\n\tt2, e := time.Parse(form, \"8 41 PM\")\n\tp(t2)\n\n\t// For purely numeric representations you can also\n\t// use standard string formatting with the extracted\n\t// components of the time value.\n\tfmt.Printf(\"%d-%02d-%02dT%02d:%02d:%02d-00:00\\n\",\n\t\tt.Year(), t.Month(), t.Day(),\n\t\tt.Hour(), t.Minute(), t.Second())\n\n\t// `Parse` will return an error on malformed input\n\t// explaining the parsing problem.\n\tansic := \"Mon Jan _2 15:04:05 2006\"\n\t_, e = time.Parse(ansic, \"8:41PM\")\n\tp(e)\n}\n",
    "GoCodeHash": "9136a09d33b7a812de3ba0129b9aa6953bca0fbe",
    "URLHash": "BoZYtr_2j66",
    "Segs": [
      [
        {
          "docs": "Go supports time formatting and parsing via\npattern-based layouts.",
          "docs_rendered": "\u003cp\u003eGo supports time formatting and parsing via\npattern-based layouts.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"fmt\"\n    \"time\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;time\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"fmt\"\n    \"time\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {\n    p := fmt.Println",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n    p := fmt.Println\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Here's a basic example of formatting a time\naccording to RFC3339, using the corresponding layout\nconstant.",
          "docs_rendered": "\u003cp\u003eHere\u0026rsquo;s a basic example of formatting a time\naccording to RFC3339, using the corresponding layout\nconstant.\u003c/p\u003e\n",
          "code": "\n    t := time.Now()\n    p(t.Format(time.RFC3339))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003et\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eNow\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eFormat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eRFC3339\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    t := time.Now()\n    p(t.Format(time.RFC3339))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Time parsing uses the same layout values as `Format`.",
          "docs_rendered": "\u003cp\u003eTime parsing uses the same layout values as \u003ccode\u003eFormat\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n    t1, e := time.Parse(\n        time.RFC3339,\n        \"2012-11-01T22:08:41+00:00\")\n    p(t1)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003et1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eParse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eRFC3339\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"s\"\u003e\u0026quot;2012-11-01T22:08:41+00:00\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003et1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    t1, e := time.Parse(\n        time.RFC3339,\n        \"2012-11-01T22:08:41+00:00\")\n    p(t1)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "`Format` and `Parse` use example-based layouts. Usually\nyou'll use a constant from `time` for these layouts, but\nyou can also supply custom layouts. Layouts must use the\nreference time `Mon Jan 2 15:04:05 MST 2006` to show the\npattern with which to format/parse a given time/string.\nThe example time must be exactly as shown: the year 2006,\n15 for the hour, Monday for the day of the week, etc.",
          "docs_rendered": "\u003cp\u003e\u003ccode\u003eFormat\u003c/code\u003e and \u003ccode\u003eParse\u003c/code\u003e use example-based layouts. Usually\nyou\u0026rsquo;ll use a constant from \u003ccode\u003etime\u003c/code\u003e for these layouts, but\nyou can also supply custom layouts. Layouts must use the\nreference time \u003ccode\u003eMon Jan 2 15:04:05 MST 2006\u003c/code\u003e to show the\npattern with which to format/parse a given time/string.\nThe example time must be exactly as shown: the year 2006,\n15 for the hour, Monday for the day of the week, etc.\u003c/p\u003e\n",
          "code": "\n    p(t.Format(\"3:04PM\"))\n    p(t.Format(\"Mon Jan _2 15:04:05 2006\"))\n    p(t.Format(\"2006-01-02T15:04:05.999999-07:00\"))\n    form := \"3 04 PM\"\n    t2, e := time.Parse(form, \"8 41 PM\")\n    p(t2)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eFormat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;3:04PM\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eFormat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Mon Jan _2 15:04:05 2006\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eFormat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;2006-01-02T15:04:05.999999-07:00\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eform\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;3 04 PM\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003et2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eParse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eform\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;8 41 PM\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003et2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    p(t.Format(\"3:04PM\"))\n    p(t.Format(\"Mon Jan _2 15:04:05 2006\"))\n    p(t.Format(\"2006-01-02T15:04:05.999999-07:00\"))\n    form := \"3 04 PM\"\n    t2, e := time.Parse(form, \"8 41 PM\")\n    p(t2)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "For purely numeric representations you can also\nuse standard string formatting with the extracted\ncomponents of the time value.",
          "docs_rendered": "\u003cp\u003eFor purely numeric representations you can also\nuse standard string formatting with the extracted\ncomponents of the time value.\u003c/p\u003e\n",
          "code": "\n    fmt.Printf(\"%d-%02d-%02dT%02d:%02d:%02d-00:00\\n\",\n        t.Year(), t.Month(), t.Day(),\n        t.Hour(), t.Minute(), t.Second())",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;%d-%02d-%02dT%02d:%02d:%02d-00:00\\n\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eYear\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"nx\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eMonth\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"nx\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eDay\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eHour\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"nx\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eMinute\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"nx\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSecond\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Printf(\"%d-%02d-%02dT%02d:%02d:%02d-00:00\\n\",\n        t.Year(), t.Month(), t.Day(),\n        t.Hour(), t.Minute(), t.Second())\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "`Parse` will return an error on malformed input\nexplaining the parsing problem.",
          "docs_rendered": "\u003cp\u003e\u003ccode\u003eParse\u003c/code\u003e will return an error on malformed input\nexplaining the parsing problem.\u003c/p\u003e\n",
          "code": "\n    ansic := \"Mon Jan _2 15:04:05 2006\"\n    _, e = time.Parse(ansic, \"8:41PM\")\n    p(e)\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003eansic\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;Mon Jan _2 15:04:05 2006\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ee\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eParse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eansic\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;8:41PM\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    ansic := \"Mon Jan _2 15:04:05 2006\"\n    _, e = time.Parse(ansic, \"8:41PM\")\n    p(e)\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "",
          "docs_rendered": "",
          "code": "$ go run time-formatting-parsing.go \n2014-04-15T18:00:15-07:00\n2012-11-01 22:08:41 +0000 +0000\n6:00PM\nTue Apr 15 18:00:15 2014\n2014-04-15T18:00:15.161182-07:00\n0000-01-01 20:41:00 +0000 UTC\n2014-04-15T18:00:15-00:00\nparsing time \"8:41PM\" as \"Mon Jan _2 15:04:05 2006\": ...",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run time-formatting-parsing.go \n\u003cspan class=\"go\"\u003e2014-04-15T18:00:15-07:00\u003c/span\u003e\n\u003cspan class=\"go\"\u003e2012-11-01 22:08:41 +0000 +0000\u003c/span\u003e\n\u003cspan class=\"go\"\u003e6:00PM\u003c/span\u003e\n\u003cspan class=\"go\"\u003eTue Apr 15 18:00:15 2014\u003c/span\u003e\n\u003cspan class=\"go\"\u003e2014-04-15T18:00:15.161182-07:00\u003c/span\u003e\n\u003cspan class=\"go\"\u003e0000-01-01 20:41:00 +0000 UTC\u003c/span\u003e\n\u003cspan class=\"go\"\u003e2014-04-15T18:00:15-00:00\u003c/span\u003e\n\u003cspan class=\"go\"\u003eparsing time \u0026quot;8:41PM\u0026quot; as \u0026quot;Mon Jan _2 15:04:05 2006\u0026quot;: ...\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "random-numbers",
    "Name": "Random Numbers",
    "GoCode": "// Go's `math/rand` package provides\n// [pseudorandom number](http://en.wikipedia.org/wiki/Pseudorandom_number_generator)\n// generation.\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"time\"\n)\n\nfunc main() {\n\n\t// For example, `rand.Intn` returns a random `int` n,\n\t// `0 \u003c= n \u003c 100`.\n\tfmt.Print(rand.Intn(100), \",\")\n\tfmt.Print(rand.Intn(100))\n\tfmt.Println()\n\n\t// `rand.Float64` returns a `float64` `f`,\n\t// `0.0 \u003c= f \u003c 1.0`.\n\tfmt.Println(rand.Float64())\n\n\t// This can be used to generate random floats in\n\t// other ranges, for example `5.0 \u003c= f' \u003c 10.0`.\n\tfmt.Print((rand.Float64()*5)+5, \",\")\n\tfmt.Print((rand.Float64() * 5) + 5)\n\tfmt.Println()\n\n\t// The default number generator is deterministic, so it'll\n\t// produce the same sequence of numbers each time by default.\n\t// To produce varying sequences, give it a seed that changes.\n\t// Note that this is not safe to use for random numbers you\n\t// intend to be secret, use `crypto/rand` for those.\n\ts1 := rand.NewSource(time.Now().UnixNano())\n\tr1 := rand.New(s1)\n\n\t// Call the resulting `rand.Rand` just like the\n\t// functions on the `rand` package.\n\tfmt.Print(r1.Intn(100), \",\")\n\tfmt.Print(r1.Intn(100))\n\tfmt.Println()\n\n\t// If you seed a source with the same number, it\n\t// produces the same sequence of random numbers.\n\ts2 := rand.NewSource(42)\n\tr2 := rand.New(s2)\n\tfmt.Print(r2.Intn(100), \",\")\n\tfmt.Print(r2.Intn(100))\n\tfmt.Println()\n\ts3 := rand.NewSource(42)\n\tr3 := rand.New(s3)\n\tfmt.Print(r3.Intn(100), \",\")\n\tfmt.Print(r3.Intn(100))\n}\n",
    "GoCodeHash": "102041ca421268afbd4b4e7687386bb65a8c7965",
    "URLHash": "PGklfJzErTN",
    "Segs": [
      [
        {
          "docs": "Go's `math/rand` package provides\n[pseudorandom number](http://en.wikipedia.org/wiki/Pseudorandom_number_generator)\ngeneration.",
          "docs_rendered": "\u003cp\u003eGo\u0026rsquo;s \u003ccode\u003emath/rand\u003c/code\u003e package provides\n\u003ca href=\"http://en.wikipedia.org/wiki/Pseudorandom_number_generator\"\u003epseudorandom number\u003c/a\u003e\ngeneration.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"fmt\"\n    \"math/rand\"\n    \"time\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;math/rand\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;time\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"fmt\"\n    \"math/rand\"\n    \"time\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "For example, `rand.Intn` returns a random `int` n,\n`0 \u003c= n \u003c 100`.",
          "docs_rendered": "\u003cp\u003eFor example, \u003ccode\u003erand.Intn\u003c/code\u003e returns a random \u003ccode\u003eint\u003c/code\u003e n,\n\u003ccode\u003e0 \u0026lt;= n \u0026lt; 100\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n    fmt.Print(rand.Intn(100), \",\")\n    fmt.Print(rand.Intn(100))\n    fmt.Println()",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003erand\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eIntn\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;,\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003erand\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eIntn\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Print(rand.Intn(100), \",\")\n    fmt.Print(rand.Intn(100))\n    fmt.Println()\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "`rand.Float64` returns a `float64` `f`,\n`0.0 \u003c= f \u003c 1.0`.",
          "docs_rendered": "\u003cp\u003e\u003ccode\u003erand.Float64\u003c/code\u003e returns a \u003ccode\u003efloat64\u003c/code\u003e \u003ccode\u003ef\u003c/code\u003e,\n\u003ccode\u003e0.0 \u0026lt;= f \u0026lt; 1.0\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(rand.Float64())",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003erand\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eFloat64\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(rand.Float64())\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "This can be used to generate random floats in\nother ranges, for example `5.0 \u003c= f' \u003c 10.0`.",
          "docs_rendered": "\u003cp\u003eThis can be used to generate random floats in\nother ranges, for example \u003ccode\u003e5.0 \u0026lt;= f' \u0026lt; 10.0\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n    fmt.Print((rand.Float64()*5)+5, \",\")\n    fmt.Print((rand.Float64() * 5) + 5)\n    fmt.Println()",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrint\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003erand\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eFloat64\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;,\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrint\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003erand\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eFloat64\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Print((rand.Float64()*5)+5, \",\")\n    fmt.Print((rand.Float64() * 5) + 5)\n    fmt.Println()\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "The default number generator is deterministic, so it'll\nproduce the same sequence of numbers each time by default.\nTo produce varying sequences, give it a seed that changes.\nNote that this is not safe to use for random numbers you\nintend to be secret, use `crypto/rand` for those.",
          "docs_rendered": "\u003cp\u003eThe default number generator is deterministic, so it\u0026rsquo;ll\nproduce the same sequence of numbers each time by default.\nTo produce varying sequences, give it a seed that changes.\nNote that this is not safe to use for random numbers you\nintend to be secret, use \u003ccode\u003ecrypto/rand\u003c/code\u003e for those.\u003c/p\u003e\n",
          "code": "\n    s1 := rand.NewSource(time.Now().UnixNano())\n    r1 := rand.New(s1)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003es1\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003erand\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eNewSource\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eNow\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"nx\"\u003eUnixNano\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003er1\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003erand\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eNew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003es1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    s1 := rand.NewSource(time.Now().UnixNano())\n    r1 := rand.New(s1)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Call the resulting `rand.Rand` just like the\nfunctions on the `rand` package.",
          "docs_rendered": "\u003cp\u003eCall the resulting \u003ccode\u003erand.Rand\u003c/code\u003e just like the\nfunctions on the \u003ccode\u003erand\u003c/code\u003e package.\u003c/p\u003e\n",
          "code": "\n    fmt.Print(r1.Intn(100), \",\")\n    fmt.Print(r1.Intn(100))\n    fmt.Println()",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003er1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eIntn\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;,\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003er1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eIntn\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Print(r1.Intn(100), \",\")\n    fmt.Print(r1.Intn(100))\n    fmt.Println()\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "If you seed a source with the same number, it\nproduces the same sequence of random numbers.",
          "docs_rendered": "\u003cp\u003eIf you seed a source with the same number, it\nproduces the same sequence of random numbers.\u003c/p\u003e\n",
          "code": "\n    s2 := rand.NewSource(42)\n    r2 := rand.New(s2)\n    fmt.Print(r2.Intn(100), \",\")\n    fmt.Print(r2.Intn(100))\n    fmt.Println()\n    s3 := rand.NewSource(42)\n    r3 := rand.New(s3)\n    fmt.Print(r3.Intn(100), \",\")\n    fmt.Print(r3.Intn(100))\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003es2\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003erand\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eNewSource\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003er2\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003erand\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eNew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003es2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003er2\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eIntn\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;,\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003er2\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eIntn\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003es3\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003erand\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eNewSource\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003er3\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003erand\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eNew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003es3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003er3\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eIntn\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;,\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003er3\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eIntn\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    s2 := rand.NewSource(42)\n    r2 := rand.New(s2)\n    fmt.Print(r2.Intn(100), \",\")\n    fmt.Print(r2.Intn(100))\n    fmt.Println()\n    s3 := rand.NewSource(42)\n    r3 := rand.New(s3)\n    fmt.Print(r3.Intn(100), \",\")\n    fmt.Print(r3.Intn(100))\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "",
          "docs_rendered": "",
          "code": "$ go run random-numbers.go\n81,87\n0.6645600532184904\n7.123187485356329,8.434115364335547\n0,28\n5,87\n5,87",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run random-numbers.go\n\u003cspan class=\"go\"\u003e81,87\u003c/span\u003e\n\u003cspan class=\"go\"\u003e0.6645600532184904\u003c/span\u003e\n\u003cspan class=\"go\"\u003e7.123187485356329,8.434115364335547\u003c/span\u003e\n\u003cspan class=\"go\"\u003e0,28\u003c/span\u003e\n\u003cspan class=\"go\"\u003e5,87\u003c/span\u003e\n\u003cspan class=\"go\"\u003e5,87\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "See the [`math/rand`](http://golang.org/pkg/math/rand/)\npackage docs for references on other random quantities\nthat Go can provide.",
          "docs_rendered": "\u003cp\u003eSee the \u003ca href=\"http://golang.org/pkg/math/rand/\"\u003e\u003ccode\u003emath/rand\u003c/code\u003e\u003c/a\u003e\npackage docs for references on other random quantities\nthat Go can provide.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "number-parsing",
    "Name": "Number Parsing",
    "GoCode": "// Parsing numbers from strings is a basic but common task\n// in many programs; here's how to do it in Go.\n\npackage main\n\n// The built-in package `strconv` provides the number\n// parsing.\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n\nfunc main() {\n\n\t// With `ParseFloat`, this `64` tells how many bits of\n\t// precision to parse.\n\tf, _ := strconv.ParseFloat(\"1.234\", 64)\n\tfmt.Println(f)\n\n\t// For `ParseInt`, the `0` means infer the base from\n\t// the string. `64` requires that the result fit in 64\n\t// bits.\n\ti, _ := strconv.ParseInt(\"123\", 0, 64)\n\tfmt.Println(i)\n\n\t// `ParseInt` will recognize hex-formatted numbers.\n\td, _ := strconv.ParseInt(\"0x1c8\", 0, 64)\n\tfmt.Println(d)\n\n\t// A `ParseUint` is also available.\n\tu, _ := strconv.ParseUint(\"789\", 0, 64)\n\tfmt.Println(u)\n\n\t// `Atoi` is a convenience function for basic base-10\n\t// `int` parsing.\n\tk, _ := strconv.Atoi(\"135\")\n\tfmt.Println(k)\n\n\t// Parse functions return an error on bad input.\n\t_, e := strconv.Atoi(\"wat\")\n\tfmt.Println(e)\n}\n",
    "GoCodeHash": "146b42780ac43135d97f094c6d30db364882ea17",
    "URLHash": "ZAMEid6Fpmu",
    "Segs": [
      [
        {
          "docs": "Parsing numbers from strings is a basic but common task\nin many programs; here's how to do it in Go.",
          "docs_rendered": "\u003cp\u003eParsing numbers from strings is a basic but common task\nin many programs; here\u0026rsquo;s how to do it in Go.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "The built-in package `strconv` provides the number\nparsing.",
          "docs_rendered": "\u003cp\u003eThe built-in package \u003ccode\u003estrconv\u003c/code\u003e provides the number\nparsing.\u003c/p\u003e\n",
          "code": "\nimport (\n    \"fmt\"\n    \"strconv\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;strconv\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"fmt\"\n    \"strconv\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "With `ParseFloat`, this `64` tells how many bits of\nprecision to parse.",
          "docs_rendered": "\u003cp\u003eWith \u003ccode\u003eParseFloat\u003c/code\u003e, this \u003ccode\u003e64\u003c/code\u003e tells how many bits of\nprecision to parse.\u003c/p\u003e\n",
          "code": "\n    f, _ := strconv.ParseFloat(\"1.234\", 64)\n    fmt.Println(f)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003estrconv\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eParseFloat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;1.234\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e64\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    f, _ := strconv.ParseFloat(\"1.234\", 64)\n    fmt.Println(f)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "For `ParseInt`, the `0` means infer the base from\nthe string. `64` requires that the result fit in 64\nbits.",
          "docs_rendered": "\u003cp\u003eFor \u003ccode\u003eParseInt\u003c/code\u003e, the \u003ccode\u003e0\u003c/code\u003e means infer the base from\nthe string. \u003ccode\u003e64\u003c/code\u003e requires that the result fit in 64\nbits.\u003c/p\u003e\n",
          "code": "\n    i, _ := strconv.ParseInt(\"123\", 0, 64)\n    fmt.Println(i)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003estrconv\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eParseInt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;123\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e64\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    i, _ := strconv.ParseInt(\"123\", 0, 64)\n    fmt.Println(i)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "`ParseInt` will recognize hex-formatted numbers.",
          "docs_rendered": "\u003cp\u003e\u003ccode\u003eParseInt\u003c/code\u003e will recognize hex-formatted numbers.\u003c/p\u003e\n",
          "code": "\n    d, _ := strconv.ParseInt(\"0x1c8\", 0, 64)\n    fmt.Println(d)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003estrconv\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eParseInt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;0x1c8\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e64\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    d, _ := strconv.ParseInt(\"0x1c8\", 0, 64)\n    fmt.Println(d)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "A `ParseUint` is also available.",
          "docs_rendered": "\u003cp\u003eA \u003ccode\u003eParseUint\u003c/code\u003e is also available.\u003c/p\u003e\n",
          "code": "\n    u, _ := strconv.ParseUint(\"789\", 0, 64)\n    fmt.Println(u)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003eu\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003estrconv\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eParseUint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;789\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e64\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eu\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    u, _ := strconv.ParseUint(\"789\", 0, 64)\n    fmt.Println(u)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "`Atoi` is a convenience function for basic base-10\n`int` parsing.",
          "docs_rendered": "\u003cp\u003e\u003ccode\u003eAtoi\u003c/code\u003e is a convenience function for basic base-10\n\u003ccode\u003eint\u003c/code\u003e parsing.\u003c/p\u003e\n",
          "code": "\n    k, _ := strconv.Atoi(\"135\")\n    fmt.Println(k)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003estrconv\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eAtoi\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;135\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    k, _ := strconv.Atoi(\"135\")\n    fmt.Println(k)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Parse functions return an error on bad input.",
          "docs_rendered": "\u003cp\u003eParse functions return an error on bad input.\u003c/p\u003e\n",
          "code": "\n    _, e := strconv.Atoi(\"wat\")\n    fmt.Println(e)\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003estrconv\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eAtoi\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;wat\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    _, e := strconv.Atoi(\"wat\")\n    fmt.Println(e)\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "",
          "docs_rendered": "",
          "code": "$ go run number-parsing.go \n1.234\n123\n456\n789\n135\nstrconv.ParseInt: parsing \"wat\": invalid syntax",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run number-parsing.go \n\u003cspan class=\"go\"\u003e1.234\u003c/span\u003e\n\u003cspan class=\"go\"\u003e123\u003c/span\u003e\n\u003cspan class=\"go\"\u003e456\u003c/span\u003e\n\u003cspan class=\"go\"\u003e789\u003c/span\u003e\n\u003cspan class=\"go\"\u003e135\u003c/span\u003e\n\u003cspan class=\"go\"\u003estrconv.ParseInt: parsing \u0026quot;wat\u0026quot;: invalid syntax\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Next we'll look at another common parsing task: URLs.",
          "docs_rendered": "\u003cp\u003eNext we\u0026rsquo;ll look at another common parsing task: URLs.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "url-parsing",
    "Name": "URL Parsing",
    "GoCode": "// URLs provide a [uniform way to locate resources](https://adam.herokuapp.com/past/2010/3/30/urls_are_the_uniform_way_to_locate_resources/).\n// Here's how to parse URLs in Go.\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"net/url\"\n)\n\nfunc main() {\n\n\t// We'll parse this example URL, which includes a\n\t// scheme, authentication info, host, port, path,\n\t// query params, and query fragment.\n\ts := \"postgres://user:pass@host.com:5432/path?k=v#f\"\n\n\t// Parse the URL and ensure there are no errors.\n\tu, err := url.Parse(s)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Accessing the scheme is straightforward.\n\tfmt.Println(u.Scheme)\n\n\t// `User` contains all authentication info; call\n\t// `Username` and `Password` on this for individual\n\t// values.\n\tfmt.Println(u.User)\n\tfmt.Println(u.User.Username())\n\tp, _ := u.User.Password()\n\tfmt.Println(p)\n\n\t// The `Host` contains both the hostname and the port,\n\t// if present. Use `SplitHostPort` to extract them.\n\tfmt.Println(u.Host)\n\thost, port, _ := net.SplitHostPort(u.Host)\n\tfmt.Println(host)\n\tfmt.Println(port)\n\n\t// Here we extract the `path` and the fragment after\n\t// the `#`.\n\tfmt.Println(u.Path)\n\tfmt.Println(u.Fragment)\n\n\t// To get query params in a string of `k=v` format,\n\t// use `RawQuery`. You can also parse query params\n\t// into a map. The parsed query param maps are from\n\t// strings to slices of strings, so index into `[0]`\n\t// if you only want the first value.\n\tfmt.Println(u.RawQuery)\n\tm, _ := url.ParseQuery(u.RawQuery)\n\tfmt.Println(m)\n\tfmt.Println(m[\"k\"][0])\n}\n",
    "GoCodeHash": "7e77917c98bd88187b4fed2b8c988afdd0b0df7d",
    "URLHash": "fHTQn9X7l1B",
    "Segs": [
      [
        {
          "docs": "URLs provide a [uniform way to locate resources](https://adam.herokuapp.com/past/2010/3/30/urls_are_the_uniform_way_to_locate_resources/).\nHere's how to parse URLs in Go.",
          "docs_rendered": "\u003cp\u003eURLs provide a \u003ca href=\"https://adam.herokuapp.com/past/2010/3/30/urls_are_the_uniform_way_to_locate_resources/\"\u003euniform way to locate resources\u003c/a\u003e.\nHere\u0026rsquo;s how to parse URLs in Go.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"fmt\"\n    \"net\"\n    \"net/url\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;net\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;net/url\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"fmt\"\n    \"net\"\n    \"net/url\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "We'll parse this example URL, which includes a\nscheme, authentication info, host, port, path,\nquery params, and query fragment.",
          "docs_rendered": "\u003cp\u003eWe\u0026rsquo;ll parse this example URL, which includes a\nscheme, authentication info, host, port, path,\nquery params, and query fragment.\u003c/p\u003e\n",
          "code": "\n    s := \"postgres://user:pass@host.com:5432/path?k=v#f\"",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003es\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;postgres://user:pass@host.com:5432/path?k=v#f\u0026quot;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    s := \"postgres://user:pass@host.com:5432/path?k=v#f\"\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Parse the URL and ensure there are no errors.",
          "docs_rendered": "\u003cp\u003eParse the URL and ensure there are no errors.\u003c/p\u003e\n",
          "code": "\n    u, err := url.Parse(s)\n    if err != nil {\n        panic(err)\n    }",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003eu\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eurl\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eParse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003epanic\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    u, err := url.Parse(s)\n    if err != nil {\n        panic(err)\n    }\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Accessing the scheme is straightforward.",
          "docs_rendered": "\u003cp\u003eAccessing the scheme is straightforward.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(u.Scheme)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eu\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eScheme\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(u.Scheme)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "`User` contains all authentication info; call\n`Username` and `Password` on this for individual\nvalues.",
          "docs_rendered": "\u003cp\u003e\u003ccode\u003eUser\u003c/code\u003e contains all authentication info; call\n\u003ccode\u003eUsername\u003c/code\u003e and \u003ccode\u003ePassword\u003c/code\u003e on this for individual\nvalues.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(u.User)\n    fmt.Println(u.User.Username())\n    p, _ := u.User.Password()\n    fmt.Println(p)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eu\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eUser\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eu\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eUser\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eUsername\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eu\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eUser\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePassword\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(u.User)\n    fmt.Println(u.User.Username())\n    p, _ := u.User.Password()\n    fmt.Println(p)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "The `Host` contains both the hostname and the port,\nif present. Use `SplitHostPort` to extract them.",
          "docs_rendered": "\u003cp\u003eThe \u003ccode\u003eHost\u003c/code\u003e contains both the hostname and the port,\nif present. Use \u003ccode\u003eSplitHostPort\u003c/code\u003e to extract them.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(u.Host)\n    host, port, _ := net.SplitHostPort(u.Host)\n    fmt.Println(host)\n    fmt.Println(port)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eu\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eHost\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ehost\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eport\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSplitHostPort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eu\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eHost\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ehost\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eport\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(u.Host)\n    host, port, _ := net.SplitHostPort(u.Host)\n    fmt.Println(host)\n    fmt.Println(port)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Here we extract the `path` and the fragment after\nthe `#`.",
          "docs_rendered": "\u003cp\u003eHere we extract the \u003ccode\u003epath\u003c/code\u003e and the fragment after\nthe \u003ccode\u003e#\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(u.Path)\n    fmt.Println(u.Fragment)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eu\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePath\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eu\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eFragment\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(u.Path)\n    fmt.Println(u.Fragment)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "To get query params in a string of `k=v` format,\nuse `RawQuery`. You can also parse query params\ninto a map. The parsed query param maps are from\nstrings to slices of strings, so index into `[0]`\nif you only want the first value.",
          "docs_rendered": "\u003cp\u003eTo get query params in a string of \u003ccode\u003ek=v\u003c/code\u003e format,\nuse \u003ccode\u003eRawQuery\u003c/code\u003e. You can also parse query params\ninto a map. The parsed query param maps are from\nstrings to slices of strings, so index into \u003ccode\u003e[0]\u003c/code\u003e\nif you only want the first value.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(u.RawQuery)\n    m, _ := url.ParseQuery(u.RawQuery)\n    fmt.Println(m)\n    fmt.Println(m[\"k\"][0])\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eu\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eRawQuery\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eurl\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eParseQuery\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eu\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eRawQuery\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;k\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(u.RawQuery)\n    m, _ := url.ParseQuery(u.RawQuery)\n    fmt.Println(m)\n    fmt.Println(m[\"k\"][0])\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "Running our URL parsing program shows all the different\npieces that we extracted.",
          "docs_rendered": "\u003cp\u003eRunning our URL parsing program shows all the different\npieces that we extracted.\u003c/p\u003e\n",
          "code": "\n$ go run url-parsing.go \npostgres\nuser:pass\nuser\npass\nhost.com:5432\nhost.com\n5432\n/path\nf\nk=v\nmap[k:[v]]\nv",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run url-parsing.go \n\u003cspan class=\"go\"\u003epostgres\u003c/span\u003e\n\u003cspan class=\"go\"\u003euser:pass\u003c/span\u003e\n\u003cspan class=\"go\"\u003euser\u003c/span\u003e\n\u003cspan class=\"go\"\u003epass\u003c/span\u003e\n\u003cspan class=\"go\"\u003ehost.com:5432\u003c/span\u003e\n\u003cspan class=\"go\"\u003ehost.com\u003c/span\u003e\n\u003cspan class=\"go\"\u003e5432\u003c/span\u003e\n\u003cspan class=\"go\"\u003e/path\u003c/span\u003e\n\u003cspan class=\"go\"\u003ef\u003c/span\u003e\n\u003cspan class=\"go\"\u003ek=v\u003c/span\u003e\n\u003cspan class=\"go\"\u003emap[k:[v]]\u003c/span\u003e\n\u003cspan class=\"go\"\u003ev\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "sha1-hashes",
    "Name": "SHA1 Hashes",
    "GoCode": "// [_SHA1 hashes_](http://en.wikipedia.org/wiki/SHA-1) are\n// frequently used to compute short identities for binary\n// or text blobs. For example, the [git revision control\n// system](http://git-scm.com/) uses SHA1s extensively to\n// identify versioned files and directories. Here's how to\n// compute SHA1 hashes in Go.\n\npackage main\n\n// Go implements several hash functions in various\n// `crypto/*` packages.\nimport (\n\t\"crypto/sha1\"\n\t\"fmt\"\n)\n\nfunc main() {\n\ts := \"sha1 this string\"\n\n\t// The pattern for generating a hash is `sha1.New()`,\n\t// `sha1.Write(bytes)`, then `sha1.Sum([]byte{})`.\n\t// Here we start with a new hash.\n\th := sha1.New()\n\n\t// `Write` expects bytes. If you have a string `s`,\n\t// use `[]byte(s)` to coerce it to bytes.\n\th.Write([]byte(s))\n\n\t// This gets the finalized hash result as a byte\n\t// slice. The argument to `Sum` can be used to append\n\t// to an existing byte slice: it usually isn't needed.\n\tbs := h.Sum(nil)\n\n\t// SHA1 values are often printed in hex, for example\n\t// in git commits. Use the `%x` format verb to convert\n\t// a hash results to a hex string.\n\tfmt.Println(s)\n\tfmt.Printf(\"%x\\n\", bs)\n}\n",
    "GoCodeHash": "fc2de63b58865a6761749490ee217a94b4e343d1",
    "URLHash": "XLftf8Gvj4y",
    "Segs": [
      [
        {
          "docs": "[_SHA1 hashes_](http://en.wikipedia.org/wiki/SHA-1) are\nfrequently used to compute short identities for binary\nor text blobs. For example, the [git revision control\nsystem](http://git-scm.com/) uses SHA1s extensively to\nidentify versioned files and directories. Here's how to\ncompute SHA1 hashes in Go.",
          "docs_rendered": "\u003cp\u003e\u003ca href=\"http://en.wikipedia.org/wiki/SHA-1\"\u003e\u003cem\u003eSHA1 hashes\u003c/em\u003e\u003c/a\u003e are\nfrequently used to compute short identities for binary\nor text blobs. For example, the \u003ca href=\"http://git-scm.com/\"\u003egit revision control\nsystem\u003c/a\u003e uses SHA1s extensively to\nidentify versioned files and directories. Here\u0026rsquo;s how to\ncompute SHA1 hashes in Go.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "Go implements several hash functions in various\n`crypto/*` packages.",
          "docs_rendered": "\u003cp\u003eGo implements several hash functions in various\n\u003ccode\u003ecrypto/*\u003c/code\u003e packages.\u003c/p\u003e\n",
          "code": "\nimport (\n    \"crypto/sha1\"\n    \"fmt\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;crypto/sha1\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"crypto/sha1\"\n    \"fmt\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {\n    s := \"sha1 this string\"",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003es\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;sha1 this string\u0026quot;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n    s := \"sha1 this string\"\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "The pattern for generating a hash is `sha1.New()`,\n`sha1.Write(bytes)`, then `sha1.Sum([]byte{})`.\nHere we start with a new hash.",
          "docs_rendered": "\u003cp\u003eThe pattern for generating a hash is \u003ccode\u003esha1.New()\u003c/code\u003e,\n\u003ccode\u003esha1.Write(bytes)\u003c/code\u003e, then \u003ccode\u003esha1.Sum([]byte{})\u003c/code\u003e.\nHere we start with a new hash.\u003c/p\u003e\n",
          "code": "\n    h := sha1.New()",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003eh\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003esha1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eNew\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    h := sha1.New()\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "`Write` expects bytes. If you have a string `s`,\nuse `[]byte(s)` to coerce it to bytes.",
          "docs_rendered": "\u003cp\u003e\u003ccode\u003eWrite\u003c/code\u003e expects bytes. If you have a string \u003ccode\u003es\u003c/code\u003e,\nuse \u003ccode\u003e[]byte(s)\u003c/code\u003e to coerce it to bytes.\u003c/p\u003e\n",
          "code": "\n    h.Write([]byte(s))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003eh\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eWrite\u003c/span\u003e\u003cspan class=\"p\"\u003e([]\u003c/span\u003e\u003cspan class=\"nb\"\u003ebyte\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    h.Write([]byte(s))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "This gets the finalized hash result as a byte\nslice. The argument to `Sum` can be used to append\nto an existing byte slice: it usually isn't needed.",
          "docs_rendered": "\u003cp\u003eThis gets the finalized hash result as a byte\nslice. The argument to \u003ccode\u003eSum\u003c/code\u003e can be used to append\nto an existing byte slice: it usually isn\u0026rsquo;t needed.\u003c/p\u003e\n",
          "code": "\n    bs := h.Sum(nil)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ebs\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eh\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSum\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    bs := h.Sum(nil)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "SHA1 values are often printed in hex, for example\nin git commits. Use the `%x` format verb to convert\na hash results to a hex string.",
          "docs_rendered": "\u003cp\u003eSHA1 values are often printed in hex, for example\nin git commits. Use the \u003ccode\u003e%x\u003c/code\u003e format verb to convert\na hash results to a hex string.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(s)\n    fmt.Printf(\"%x\\n\", bs)\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;%x\\n\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ebs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(s)\n    fmt.Printf(\"%x\\n\", bs)\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "Running the program computes the hash and prints it in\na human-readable hex format.",
          "docs_rendered": "\u003cp\u003eRunning the program computes the hash and prints it in\na human-readable hex format.\u003c/p\u003e\n",
          "code": "\n$ go run sha1-hashes.go\nsha1 this string\ncf23df2207d99a74fbe169e3eba035e633b65d94",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run sha1-hashes.go\n\u003cspan class=\"go\"\u003esha1 this string\u003c/span\u003e\n\u003cspan class=\"go\"\u003ecf23df2207d99a74fbe169e3eba035e633b65d94\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "You can compute other hashes using a similar pattern to\nthe one shown above. For example, to compute MD5 hashes\nimport `crypto/md5` and use `md5.New()`.",
          "docs_rendered": "\u003cp\u003eYou can compute other hashes using a similar pattern to\nthe one shown above. For example, to compute MD5 hashes\nimport \u003ccode\u003ecrypto/md5\u003c/code\u003e and use \u003ccode\u003emd5.New()\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Note that if you need cryptographically secure hashes,\nyou should carefully research\n[hash strength](http://en.wikipedia.org/wiki/Cryptographic_hash_function)!",
          "docs_rendered": "\u003cp\u003eNote that if you need cryptographically secure hashes,\nyou should carefully research\n\u003ca href=\"http://en.wikipedia.org/wiki/Cryptographic_hash_function\"\u003ehash strength\u003c/a\u003e!\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "base64-encoding",
    "Name": "Base64 Encoding",
    "GoCode": "// Go provides built-in support for [base64\n// encoding/decoding](http://en.wikipedia.org/wiki/Base64).\n\npackage main\n\n// This syntax imports the `encoding/base64` package with\n// the `b64` name instead of the default `base64`. It'll\n// save us some space below.\nimport (\n\tb64 \"encoding/base64\"\n\t\"fmt\"\n)\n\nfunc main() {\n\n\t// Here's the `string` we'll encode/decode.\n\tdata := \"abc123!?$*\u0026()'-=@~\"\n\n\t// Go supports both standard and URL-compatible\n\t// base64. Here's how to encode using the standard\n\t// encoder. The encoder requires a `[]byte` so we\n\t// convert our `string` to that type.\n\tsEnc := b64.StdEncoding.EncodeToString([]byte(data))\n\tfmt.Println(sEnc)\n\n\t// Decoding may return an error, which you can check\n\t// if you don't already know the input to be\n\t// well-formed.\n\tsDec, _ := b64.StdEncoding.DecodeString(sEnc)\n\tfmt.Println(string(sDec))\n\tfmt.Println()\n\n\t// This encodes/decodes using a URL-compatible base64\n\t// format.\n\tuEnc := b64.URLEncoding.EncodeToString([]byte(data))\n\tfmt.Println(uEnc)\n\tuDec, _ := b64.URLEncoding.DecodeString(uEnc)\n\tfmt.Println(string(uDec))\n}\n",
    "GoCodeHash": "cd00d89ad0a31e48d6a2e2adc2e8d65b0f70dc73",
    "URLHash": "S7ff3UgzNlG",
    "Segs": [
      [
        {
          "docs": "Go provides built-in support for [base64\nencoding/decoding](http://en.wikipedia.org/wiki/Base64).",
          "docs_rendered": "\u003cp\u003eGo provides built-in support for \u003ca href=\"http://en.wikipedia.org/wiki/Base64\"\u003ebase64\nencoding/decoding\u003c/a\u003e.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "This syntax imports the `encoding/base64` package with\nthe `b64` name instead of the default `base64`. It'll\nsave us some space below.",
          "docs_rendered": "\u003cp\u003eThis syntax imports the \u003ccode\u003eencoding/base64\u003c/code\u003e package with\nthe \u003ccode\u003eb64\u003c/code\u003e name instead of the default \u003ccode\u003ebase64\u003c/code\u003e. It\u0026rsquo;ll\nsave us some space below.\u003c/p\u003e\n",
          "code": "\nimport (\n    b64 \"encoding/base64\"\n    \"fmt\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eb64\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;encoding/base64\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    b64 \"encoding/base64\"\n    \"fmt\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Here's the `string` we'll encode/decode.",
          "docs_rendered": "\u003cp\u003eHere\u0026rsquo;s the \u003ccode\u003estring\u003c/code\u003e we\u0026rsquo;ll encode/decode.\u003c/p\u003e\n",
          "code": "\n    data := \"abc123!?$*\u0026()'-=@~\"",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;abc123!?$*\u0026amp;()\u0026#39;-=@~\u0026quot;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    data := \"abc123!?$*\u0026()'-=@~\"\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Go supports both standard and URL-compatible\nbase64. Here's how to encode using the standard\nencoder. The encoder requires a `[]byte` so we\nconvert our `string` to that type.",
          "docs_rendered": "\u003cp\u003eGo supports both standard and URL-compatible\nbase64. Here\u0026rsquo;s how to encode using the standard\nencoder. The encoder requires a \u003ccode\u003e[]byte\u003c/code\u003e so we\nconvert our \u003ccode\u003estring\u003c/code\u003e to that type.\u003c/p\u003e\n",
          "code": "\n    sEnc := b64.StdEncoding.EncodeToString([]byte(data))\n    fmt.Println(sEnc)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003esEnc\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eb64\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eStdEncoding\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eEncodeToString\u003c/span\u003e\u003cspan class=\"p\"\u003e([]\u003c/span\u003e\u003cspan class=\"nb\"\u003ebyte\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esEnc\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    sEnc := b64.StdEncoding.EncodeToString([]byte(data))\n    fmt.Println(sEnc)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Decoding may return an error, which you can check\nif you don't already know the input to be\nwell-formed.",
          "docs_rendered": "\u003cp\u003eDecoding may return an error, which you can check\nif you don\u0026rsquo;t already know the input to be\nwell-formed.\u003c/p\u003e\n",
          "code": "\n    sDec, _ := b64.StdEncoding.DecodeString(sEnc)\n    fmt.Println(string(sDec))\n    fmt.Println()",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003esDec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eb64\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eStdEncoding\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eDecodeString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esEnc\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esDec\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    sDec, _ := b64.StdEncoding.DecodeString(sEnc)\n    fmt.Println(string(sDec))\n    fmt.Println()\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "This encodes/decodes using a URL-compatible base64\nformat.",
          "docs_rendered": "\u003cp\u003eThis encodes/decodes using a URL-compatible base64\nformat.\u003c/p\u003e\n",
          "code": "\n    uEnc := b64.URLEncoding.EncodeToString([]byte(data))\n    fmt.Println(uEnc)\n    uDec, _ := b64.URLEncoding.DecodeString(uEnc)\n    fmt.Println(string(uDec))\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003euEnc\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eb64\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eURLEncoding\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eEncodeToString\u003c/span\u003e\u003cspan class=\"p\"\u003e([]\u003c/span\u003e\u003cspan class=\"nb\"\u003ebyte\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003euEnc\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003euDec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eb64\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eURLEncoding\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eDecodeString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003euEnc\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003euDec\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    uEnc := b64.URLEncoding.EncodeToString([]byte(data))\n    fmt.Println(uEnc)\n    uDec, _ := b64.URLEncoding.DecodeString(uEnc)\n    fmt.Println(string(uDec))\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "The string encodes to slightly different values with the\nstandard and URL base64 encoders (trailing `+` vs `-`)\nbut they both decode to the original string as desired.",
          "docs_rendered": "\u003cp\u003eThe string encodes to slightly different values with the\nstandard and URL base64 encoders (trailing \u003ccode\u003e+\u003c/code\u003e vs \u003ccode\u003e-\u003c/code\u003e)\nbut they both decode to the original string as desired.\u003c/p\u003e\n",
          "code": "\n$ go run base64-encoding.go\nYWJjMTIzIT8kKiYoKSctPUB+\nabc123!?$*\u0026()'-=@~",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run base64-encoding.go\n\u003cspan class=\"go\"\u003eYWJjMTIzIT8kKiYoKSctPUB+\u003c/span\u003e\n\u003cspan class=\"go\"\u003eabc123!?$*\u0026amp;()\u0026#39;-=@~\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "YWJjMTIzIT8kKiYoKSctPUB-\nabc123!?$*\u0026()'-=@~",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"go\"\u003eYWJjMTIzIT8kKiYoKSctPUB-\u003c/span\u003e\n\u003cspan class=\"go\"\u003eabc123!?$*\u0026amp;()\u0026#39;-=@~\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "reading-files",
    "Name": "Reading Files",
    "GoCode": "// Reading and writing files are basic tasks needed for\n// many Go programs. First we'll look at some examples of\n// reading files.\n\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"os\"\n)\n\n// Reading files requires checking most calls for errors.\n// This helper will streamline our error checks below.\nfunc check(e error) {\n\tif e != nil {\n\t\tpanic(e)\n\t}\n}\n\nfunc main() {\n\n\t// Perhaps the most basic file reading task is\n\t// slurping a file's entire contents into memory.\n\tdat, err := ioutil.ReadFile(\"/tmp/dat\")\n\tcheck(err)\n\tfmt.Print(string(dat))\n\n\t// You'll often want more control over how and what\n\t// parts of a file are read. For these tasks, start\n\t// by `Open`ing a file to obtain an `os.File` value.\n\tf, err := os.Open(\"/tmp/dat\")\n\tcheck(err)\n\n\t// Read some bytes from the beginning of the file.\n\t// Allow up to 5 to be read but also note how many\n\t// actually were read.\n\tb1 := make([]byte, 5)\n\tn1, err := f.Read(b1)\n\tcheck(err)\n\tfmt.Printf(\"%d bytes: %s\\n\", n1, string(b1[:n1]))\n\n\t// You can also `Seek` to a known location in the file\n\t// and `Read` from there.\n\to2, err := f.Seek(6, 0)\n\tcheck(err)\n\tb2 := make([]byte, 2)\n\tn2, err := f.Read(b2)\n\tcheck(err)\n\tfmt.Printf(\"%d bytes @ %d: \", n2, o2)\n\tfmt.Printf(\"%v\\n\", string(b2[:n2]))\n\n\t// The `io` package provides some functions that may\n\t// be helpful for file reading. For example, reads\n\t// like the ones above can be more robustly\n\t// implemented with `ReadAtLeast`.\n\to3, err := f.Seek(6, 0)\n\tcheck(err)\n\tb3 := make([]byte, 2)\n\tn3, err := io.ReadAtLeast(f, b3, 2)\n\tcheck(err)\n\tfmt.Printf(\"%d bytes @ %d: %s\\n\", n3, o3, string(b3))\n\n\t// There is no built-in rewind, but `Seek(0, 0)`\n\t// accomplishes this.\n\t_, err = f.Seek(0, 0)\n\tcheck(err)\n\n\t// The `bufio` package implements a buffered\n\t// reader that may be useful both for its efficiency\n\t// with many small reads and because of the additional\n\t// reading methods it provides.\n\tr4 := bufio.NewReader(f)\n\tb4, err := r4.Peek(5)\n\tcheck(err)\n\tfmt.Printf(\"5 bytes: %s\\n\", string(b4))\n\n\t// Close the file when you're done (usually this would\n\t// be scheduled immediately after `Open`ing with\n\t// `defer`).\n\tf.Close()\n}\n",
    "GoCodeHash": "3420958bafd67fd997481d1ada288566666343c7",
    "URLHash": "kF0cDC0drsX",
    "Segs": [
      [
        {
          "docs": "Reading and writing files are basic tasks needed for\nmany Go programs. First we'll look at some examples of\nreading files.",
          "docs_rendered": "\u003cp\u003eReading and writing files are basic tasks needed for\nmany Go programs. First we\u0026rsquo;ll look at some examples of\nreading files.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"bufio\"\n    \"fmt\"\n    \"io\"\n    \"io/ioutil\"\n    \"os\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;bufio\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;io\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;io/ioutil\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;os\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"bufio\"\n    \"fmt\"\n    \"io\"\n    \"io/ioutil\"\n    \"os\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Reading files requires checking most calls for errors.\nThis helper will streamline our error checks below.",
          "docs_rendered": "\u003cp\u003eReading files requires checking most calls for errors.\nThis helper will streamline our error checks below.\u003c/p\u003e\n",
          "code": "\nfunc check(e error) {\n    if e != nil {\n        panic(e)\n    }\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003echeck\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ee\u003c/span\u003e \u003cspan class=\"kt\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003epanic\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func check(e error) {\n    if e != nil {\n        panic(e)\n    }\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Perhaps the most basic file reading task is\nslurping a file's entire contents into memory.",
          "docs_rendered": "\u003cp\u003ePerhaps the most basic file reading task is\nslurping a file\u0026rsquo;s entire contents into memory.\u003c/p\u003e\n",
          "code": "\n    dat, err := ioutil.ReadFile(\"/tmp/dat\")\n    check(err)\n    fmt.Print(string(dat))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003edat\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eioutil\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eReadFile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;/tmp/dat\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003echeck\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003edat\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    dat, err := ioutil.ReadFile(\"/tmp/dat\")\n    check(err)\n    fmt.Print(string(dat))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "You'll often want more control over how and what\nparts of a file are read. For these tasks, start\nby `Open`ing a file to obtain an `os.File` value.",
          "docs_rendered": "\u003cp\u003eYou\u0026rsquo;ll often want more control over how and what\nparts of a file are read. For these tasks, start\nby \u003ccode\u003eOpen\u003c/code\u003eing a file to obtain an \u003ccode\u003eos.File\u003c/code\u003e value.\u003c/p\u003e\n",
          "code": "\n    f, err := os.Open(\"/tmp/dat\")\n    check(err)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eOpen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;/tmp/dat\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003echeck\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    f, err := os.Open(\"/tmp/dat\")\n    check(err)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Read some bytes from the beginning of the file.\nAllow up to 5 to be read but also note how many\nactually were read.",
          "docs_rendered": "\u003cp\u003eRead some bytes from the beginning of the file.\nAllow up to 5 to be read but also note how many\nactually were read.\u003c/p\u003e\n",
          "code": "\n    b1 := make([]byte, 5)\n    n1, err := f.Read(b1)\n    check(err)\n    fmt.Printf(\"%d bytes: %s\\n\", n1, string(b1[:n1]))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003eb1\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e([]\u003c/span\u003e\u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003en1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eRead\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eb1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003echeck\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;%d bytes: %s\\n\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003en1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eb1\u003c/span\u003e\u003cspan class=\"p\"\u003e[:\u003c/span\u003e\u003cspan class=\"nx\"\u003en1\u003c/span\u003e\u003cspan class=\"p\"\u003e]))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    b1 := make([]byte, 5)\n    n1, err := f.Read(b1)\n    check(err)\n    fmt.Printf(\"%d bytes: %s\\n\", n1, string(b1[:n1]))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "You can also `Seek` to a known location in the file\nand `Read` from there.",
          "docs_rendered": "\u003cp\u003eYou can also \u003ccode\u003eSeek\u003c/code\u003e to a known location in the file\nand \u003ccode\u003eRead\u003c/code\u003e from there.\u003c/p\u003e\n",
          "code": "\n    o2, err := f.Seek(6, 0)\n    check(err)\n    b2 := make([]byte, 2)\n    n2, err := f.Read(b2)\n    check(err)\n    fmt.Printf(\"%d bytes @ %d: \", n2, o2)\n    fmt.Printf(\"%v\\n\", string(b2[:n2]))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003eo2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSeek\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003echeck\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eb2\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e([]\u003c/span\u003e\u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003en2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eRead\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eb2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003echeck\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;%d bytes @ %d: \u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003en2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eo2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;%v\\n\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eb2\u003c/span\u003e\u003cspan class=\"p\"\u003e[:\u003c/span\u003e\u003cspan class=\"nx\"\u003en2\u003c/span\u003e\u003cspan class=\"p\"\u003e]))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    o2, err := f.Seek(6, 0)\n    check(err)\n    b2 := make([]byte, 2)\n    n2, err := f.Read(b2)\n    check(err)\n    fmt.Printf(\"%d bytes @ %d: \", n2, o2)\n    fmt.Printf(\"%v\\n\", string(b2[:n2]))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "The `io` package provides some functions that may\nbe helpful for file reading. For example, reads\nlike the ones above can be more robustly\nimplemented with `ReadAtLeast`.",
          "docs_rendered": "\u003cp\u003eThe \u003ccode\u003eio\u003c/code\u003e package provides some functions that may\nbe helpful for file reading. For example, reads\nlike the ones above can be more robustly\nimplemented with \u003ccode\u003eReadAtLeast\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n    o3, err := f.Seek(6, 0)\n    check(err)\n    b3 := make([]byte, 2)\n    n3, err := io.ReadAtLeast(f, b3, 2)\n    check(err)\n    fmt.Printf(\"%d bytes @ %d: %s\\n\", n3, o3, string(b3))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003eo3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSeek\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003echeck\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eb3\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e([]\u003c/span\u003e\u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003en3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eio\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eReadAtLeast\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eb3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003echeck\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;%d bytes @ %d: %s\\n\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003en3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eo3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eb3\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    o3, err := f.Seek(6, 0)\n    check(err)\n    b3 := make([]byte, 2)\n    n3, err := io.ReadAtLeast(f, b3, 2)\n    check(err)\n    fmt.Printf(\"%d bytes @ %d: %s\\n\", n3, o3, string(b3))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "There is no built-in rewind, but `Seek(0, 0)`\naccomplishes this.",
          "docs_rendered": "\u003cp\u003eThere is no built-in rewind, but \u003ccode\u003eSeek(0, 0)\u003c/code\u003e\naccomplishes this.\u003c/p\u003e\n",
          "code": "\n    _, err = f.Seek(0, 0)\n    check(err)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSeek\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003echeck\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    _, err = f.Seek(0, 0)\n    check(err)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "The `bufio` package implements a buffered\nreader that may be useful both for its efficiency\nwith many small reads and because of the additional\nreading methods it provides.",
          "docs_rendered": "\u003cp\u003eThe \u003ccode\u003ebufio\u003c/code\u003e package implements a buffered\nreader that may be useful both for its efficiency\nwith many small reads and because of the additional\nreading methods it provides.\u003c/p\u003e\n",
          "code": "\n    r4 := bufio.NewReader(f)\n    b4, err := r4.Peek(5)\n    check(err)\n    fmt.Printf(\"5 bytes: %s\\n\", string(b4))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003er4\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003ebufio\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eNewReader\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eb4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003er4\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePeek\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003echeck\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;5 bytes: %s\\n\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eb4\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    r4 := bufio.NewReader(f)\n    b4, err := r4.Peek(5)\n    check(err)\n    fmt.Printf(\"5 bytes: %s\\n\", string(b4))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Close the file when you're done (usually this would\nbe scheduled immediately after `Open`ing with\n`defer`).",
          "docs_rendered": "\u003cp\u003eClose the file when you\u0026rsquo;re done (usually this would\nbe scheduled immediately after \u003ccode\u003eOpen\u003c/code\u003eing with\n\u003ccode\u003edefer\u003c/code\u003e).\u003c/p\u003e\n",
          "code": "\n    f.Close()\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eClose\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    f.Close()\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "",
          "docs_rendered": "",
          "code": "$ echo \"hello\" \u003e /tmp/dat\n$ echo \"go\" \u003e\u003e   /tmp/dat\n$ go run reading-files.go\nhello\ngo\n5 bytes: hello\n2 bytes @ 6: go\n2 bytes @ 6: go\n5 bytes: hello",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;hello\u0026quot;\u003c/span\u003e \u0026gt; /tmp/dat\n\u003cspan class=\"gp\"\u003e$\u003c/span\u003e \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;go\u0026quot;\u003c/span\u003e \u0026gt;\u0026gt;   /tmp/dat\n\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run reading-files.go\n\u003cspan class=\"go\"\u003ehello\u003c/span\u003e\n\u003cspan class=\"go\"\u003ego\u003c/span\u003e\n\u003cspan class=\"go\"\u003e5 bytes: hello\u003c/span\u003e\n\u003cspan class=\"go\"\u003e2 bytes @ 6: go\u003c/span\u003e\n\u003cspan class=\"go\"\u003e2 bytes @ 6: go\u003c/span\u003e\n\u003cspan class=\"go\"\u003e5 bytes: hello\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Next we'll look at writing files.",
          "docs_rendered": "\u003cp\u003eNext we\u0026rsquo;ll look at writing files.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "writing-files",
    "Name": "Writing Files",
    "GoCode": "// Writing files in Go follows similar patterns to the\n// ones we saw earlier for reading.\n\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os\"\n)\n\nfunc check(e error) {\n\tif e != nil {\n\t\tpanic(e)\n\t}\n}\n\nfunc main() {\n\n\t// To start, here's how to dump a string (or just\n\t// bytes) into a file.\n\td1 := []byte(\"hello\\ngo\\n\")\n\terr := ioutil.WriteFile(\"/tmp/dat1\", d1, 0644)\n\tcheck(err)\n\n\t// For more granular writes, open a file for writing.\n\tf, err := os.Create(\"/tmp/dat2\")\n\tcheck(err)\n\n\t// It's idiomatic to defer a `Close` immediately\n\t// after opening a file.\n\tdefer f.Close()\n\n\t// You can `Write` byte slices as you'd expect.\n\td2 := []byte{115, 111, 109, 101, 10}\n\tn2, err := f.Write(d2)\n\tcheck(err)\n\tfmt.Printf(\"wrote %d bytes\\n\", n2)\n\n\t// A `WriteString` is also available.\n\tn3, err := f.WriteString(\"writes\\n\")\n\tcheck(err)\n\tfmt.Printf(\"wrote %d bytes\\n\", n3)\n\n\t// Issue a `Sync` to flush writes to stable storage.\n\tf.Sync()\n\n\t// `bufio` provides buffered writers in addition\n\t// to the buffered readers we saw earlier.\n\tw := bufio.NewWriter(f)\n\tn4, err := w.WriteString(\"buffered\\n\")\n\tcheck(err)\n\tfmt.Printf(\"wrote %d bytes\\n\", n4)\n\n\t// Use `Flush` to ensure all buffered operations have\n\t// been applied to the underlying writer.\n\tw.Flush()\n\n}\n",
    "GoCodeHash": "314a0074840e22b328b6412130c17b9bea53c9c9",
    "URLHash": "fQ7sd4gXv0F",
    "Segs": [
      [
        {
          "docs": "Writing files in Go follows similar patterns to the\nones we saw earlier for reading.",
          "docs_rendered": "\u003cp\u003eWriting files in Go follows similar patterns to the\nones we saw earlier for reading.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"bufio\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"os\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;bufio\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;io/ioutil\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;os\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"bufio\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"os\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func check(e error) {\n    if e != nil {\n        panic(e)\n    }\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003echeck\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ee\u003c/span\u003e \u003cspan class=\"kt\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003epanic\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func check(e error) {\n    if e != nil {\n        panic(e)\n    }\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "To start, here's how to dump a string (or just\nbytes) into a file.",
          "docs_rendered": "\u003cp\u003eTo start, here\u0026rsquo;s how to dump a string (or just\nbytes) into a file.\u003c/p\u003e\n",
          "code": "\n    d1 := []byte(\"hello\\ngo\\n\")\n    err := ioutil.WriteFile(\"/tmp/dat1\", d1, 0644)\n    check(err)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ed1\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"nb\"\u003ebyte\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;hello\\ngo\\n\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eioutil\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eWriteFile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;/tmp/dat1\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ed1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mo\"\u003e0644\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003echeck\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    d1 := []byte(\"hello\\ngo\\n\")\n    err := ioutil.WriteFile(\"/tmp/dat1\", d1, 0644)\n    check(err)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "For more granular writes, open a file for writing.",
          "docs_rendered": "\u003cp\u003eFor more granular writes, open a file for writing.\u003c/p\u003e\n",
          "code": "\n    f, err := os.Create(\"/tmp/dat2\")\n    check(err)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eCreate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;/tmp/dat2\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003echeck\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    f, err := os.Create(\"/tmp/dat2\")\n    check(err)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "It's idiomatic to defer a `Close` immediately\nafter opening a file.",
          "docs_rendered": "\u003cp\u003eIt\u0026rsquo;s idiomatic to defer a \u003ccode\u003eClose\u003c/code\u003e immediately\nafter opening a file.\u003c/p\u003e\n",
          "code": "\n    defer f.Close()",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003edefer\u003c/span\u003e \u003cspan class=\"nx\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eClose\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    defer f.Close()\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "You can `Write` byte slices as you'd expect.",
          "docs_rendered": "\u003cp\u003eYou can \u003ccode\u003eWrite\u003c/code\u003e byte slices as you\u0026rsquo;d expect.\u003c/p\u003e\n",
          "code": "\n    d2 := []byte{115, 111, 109, 101, 10}\n    n2, err := f.Write(d2)\n    check(err)\n    fmt.Printf(\"wrote %d bytes\\n\", n2)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ed2\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"mi\"\u003e115\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e111\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e109\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e101\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003en2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eWrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ed2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003echeck\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;wrote %d bytes\\n\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003en2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    d2 := []byte{115, 111, 109, 101, 10}\n    n2, err := f.Write(d2)\n    check(err)\n    fmt.Printf(\"wrote %d bytes\\n\", n2)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "A `WriteString` is also available.",
          "docs_rendered": "\u003cp\u003eA \u003ccode\u003eWriteString\u003c/code\u003e is also available.\u003c/p\u003e\n",
          "code": "\n    n3, err := f.WriteString(\"writes\\n\")\n    check(err)\n    fmt.Printf(\"wrote %d bytes\\n\", n3)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003en3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eWriteString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;writes\\n\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003echeck\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;wrote %d bytes\\n\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003en3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    n3, err := f.WriteString(\"writes\\n\")\n    check(err)\n    fmt.Printf(\"wrote %d bytes\\n\", n3)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Issue a `Sync` to flush writes to stable storage.",
          "docs_rendered": "\u003cp\u003eIssue a \u003ccode\u003eSync\u003c/code\u003e to flush writes to stable storage.\u003c/p\u003e\n",
          "code": "\n    f.Sync()",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSync\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    f.Sync()\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "`bufio` provides buffered writers in addition\nto the buffered readers we saw earlier.",
          "docs_rendered": "\u003cp\u003e\u003ccode\u003ebufio\u003c/code\u003e provides buffered writers in addition\nto the buffered readers we saw earlier.\u003c/p\u003e\n",
          "code": "\n    w := bufio.NewWriter(f)\n    n4, err := w.WriteString(\"buffered\\n\")\n    check(err)\n    fmt.Printf(\"wrote %d bytes\\n\", n4)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ew\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003ebufio\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eNewWriter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003en4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003ew\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eWriteString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;buffered\\n\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003echeck\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;wrote %d bytes\\n\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003en4\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    w := bufio.NewWriter(f)\n    n4, err := w.WriteString(\"buffered\\n\")\n    check(err)\n    fmt.Printf(\"wrote %d bytes\\n\", n4)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Use `Flush` to ensure all buffered operations have\nbeen applied to the underlying writer.",
          "docs_rendered": "\u003cp\u003eUse \u003ccode\u003eFlush\u003c/code\u003e to ensure all buffered operations have\nbeen applied to the underlying writer.\u003c/p\u003e\n",
          "code": "\n    w.Flush()",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ew\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eFlush\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    w.Flush()\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "Try running the file-writing code.",
          "docs_rendered": "\u003cp\u003eTry running the file-writing code.\u003c/p\u003e\n",
          "code": "\n$ go run writing-files.go \nwrote 5 bytes\nwrote 7 bytes\nwrote 9 bytes",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run writing-files.go \n\u003cspan class=\"go\"\u003ewrote 5 bytes\u003c/span\u003e\n\u003cspan class=\"go\"\u003ewrote 7 bytes\u003c/span\u003e\n\u003cspan class=\"go\"\u003ewrote 9 bytes\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Then check the contents of the written files.",
          "docs_rendered": "\u003cp\u003eThen check the contents of the written files.\u003c/p\u003e\n",
          "code": "\n$ cat /tmp/dat1\nhello\ngo\n$ cat /tmp/dat2\nsome\nwrites\nbuffered",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e cat /tmp/dat1\n\u003cspan class=\"go\"\u003ehello\u003c/span\u003e\n\u003cspan class=\"go\"\u003ego\u003c/span\u003e\n\u003cspan class=\"gp\"\u003e$\u003c/span\u003e cat /tmp/dat2\n\u003cspan class=\"go\"\u003esome\u003c/span\u003e\n\u003cspan class=\"go\"\u003ewrites\u003c/span\u003e\n\u003cspan class=\"go\"\u003ebuffered\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Next we'll look at applying some of the file I/O ideas\nwe've just seen to the `stdin` and `stdout` streams.",
          "docs_rendered": "\u003cp\u003eNext we\u0026rsquo;ll look at applying some of the file I/O ideas\nwe\u0026rsquo;ve just seen to the \u003ccode\u003estdin\u003c/code\u003e and \u003ccode\u003estdout\u003c/code\u003e streams.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "line-filters",
    "Name": "Line Filters",
    "GoCode": "// A _line filter_ is a common type of program that reads\n// input on stdin, processes it, and then prints some\n// derived result to stdout. `grep` and `sed` are common\n// line filters.\n\n// Here's an example line filter in Go that writes a\n// capitalized version of all input text. You can use this\n// pattern to write your own Go line filters.\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\n\t// Wrapping the unbuffered `os.Stdin` with a buffered\n\t// scanner gives us a convenient `Scan` method that\n\t// advances the scanner to the next token; which is\n\t// the next line in the default scanner.\n\tscanner := bufio.NewScanner(os.Stdin)\n\n\tfor scanner.Scan() {\n\t\t// `Text` returns the current token, here the next line,\n\t\t// from the input.\n\t\tucl := strings.ToUpper(scanner.Text())\n\n\t\t// Write out the uppercased line.\n\t\tfmt.Println(ucl)\n\t}\n\n\t// Check for errors during `Scan`. End of file is\n\t// expected and not reported by `Scan` as an error.\n\tif err := scanner.Err(); err != nil {\n\t\tfmt.Fprintln(os.Stderr, \"error:\", err)\n\t\tos.Exit(1)\n\t}\n}\n",
    "GoCodeHash": "42fd593180c40f71839f05447cc0a70d7cd213d1",
    "URLHash": "kNcupWRsYPP",
    "Segs": [
      [
        {
          "docs": "A _line filter_ is a common type of program that reads\ninput on stdin, processes it, and then prints some\nderived result to stdout. `grep` and `sed` are common\nline filters.",
          "docs_rendered": "\u003cp\u003eA \u003cem\u003eline filter\u003c/em\u003e is a common type of program that reads\ninput on stdin, processes it, and then prints some\nderived result to stdout. \u003ccode\u003egrep\u003c/code\u003e and \u003ccode\u003esed\u003c/code\u003e are common\nline filters.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Here's an example line filter in Go that writes a\ncapitalized version of all input text. You can use this\npattern to write your own Go line filters.",
          "docs_rendered": "\u003cp\u003eHere\u0026rsquo;s an example line filter in Go that writes a\ncapitalized version of all input text. You can use this\npattern to write your own Go line filters.\u003c/p\u003e\n",
          "code": "\npackage main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"bufio\"\n    \"fmt\"\n    \"os\"\n    \"strings\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;bufio\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;os\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;strings\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"bufio\"\n    \"fmt\"\n    \"os\"\n    \"strings\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Wrapping the unbuffered `os.Stdin` with a buffered\nscanner gives us a convenient `Scan` method that\nadvances the scanner to the next token; which is\nthe next line in the default scanner.",
          "docs_rendered": "\u003cp\u003eWrapping the unbuffered \u003ccode\u003eos.Stdin\u003c/code\u003e with a buffered\nscanner gives us a convenient \u003ccode\u003eScan\u003c/code\u003e method that\nadvances the scanner to the next token; which is\nthe next line in the default scanner.\u003c/p\u003e\n",
          "code": "\n    scanner := bufio.NewScanner(os.Stdin)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003escanner\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003ebufio\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eNewScanner\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eStdin\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    scanner := bufio.NewScanner(os.Stdin)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "\n`Text` returns the current token, here the next line,\nfrom the input.",
          "docs_rendered": "\u003cp\u003e\u003ccode\u003eText\u003c/code\u003e returns the current token, here the next line,\nfrom the input.\u003c/p\u003e\n",
          "code": "    for scanner.Scan() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003escanner\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eScan\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    for scanner.Scan() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "        ucl := strings.ToUpper(scanner.Text())",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e        \u003cspan class=\"nx\"\u003eucl\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003estrings\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eToUpper\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003escanner\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eText\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "        ucl := strings.ToUpper(scanner.Text())\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Write out the uppercased line.",
          "docs_rendered": "\u003cp\u003eWrite out the uppercased line.\u003c/p\u003e\n",
          "code": "\n        fmt.Println(ucl)\n    }",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eucl\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "        fmt.Println(ucl)\n    }\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Check for errors during `Scan`. End of file is\nexpected and not reported by `Scan` as an error.",
          "docs_rendered": "\u003cp\u003eCheck for errors during \u003ccode\u003eScan\u003c/code\u003e. End of file is\nexpected and not reported by \u003ccode\u003eScan\u003c/code\u003e as an error.\u003c/p\u003e\n",
          "code": "\n    if err := scanner.Err(); err != nil {\n        fmt.Fprintln(os.Stderr, \"error:\", err)\n        os.Exit(1)\n    }\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003escanner\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eErr\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eFprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eStderr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;error:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eExit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    if err := scanner.Err(); err != nil {\n        fmt.Fprintln(os.Stderr, \"error:\", err)\n        os.Exit(1)\n    }\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "To try out our line filter, first make a file with a few\nlowercase lines.",
          "docs_rendered": "\u003cp\u003eTo try out our line filter, first make a file with a few\nlowercase lines.\u003c/p\u003e\n",
          "code": "\n$ echo 'hello'   \u003e /tmp/lines\n$ echo 'filter' \u003e\u003e /tmp/lines",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;hello\u0026#39;\u003c/span\u003e   \u0026gt; /tmp/lines\n\u003cspan class=\"gp\"\u003e$\u003c/span\u003e \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;filter\u0026#39;\u003c/span\u003e \u0026gt;\u0026gt; /tmp/lines\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Then use the line filter to get uppercase lines.",
          "docs_rendered": "\u003cp\u003eThen use the line filter to get uppercase lines.\u003c/p\u003e\n",
          "code": "\n$ cat /tmp/lines | go run line-filters.go\nHELLO\nFILTER",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e cat /tmp/lines \u003cspan class=\"p\"\u003e|\u003c/span\u003e go run line-filters.go\n\u003cspan class=\"go\"\u003eHELLO\u003c/span\u003e\n\u003cspan class=\"go\"\u003eFILTER\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "file-paths",
    "Name": "File Paths",
    "GoCode": "// The `filepath` package provides functions to parse\n// and construct *file paths* in a way that is portable\n// between operating systems; `dir/file` on Linux vs.\n// `dir\\file` on Windows, for example.\npackage main\n\nimport (\n\t\"fmt\"\n\t\"path/filepath\"\n\t\"strings\"\n)\n\nfunc main() {\n\n\t// `Join` should be used to construct paths in a\n\t// portable way. It takes any number of arguments\n\t// and constructs a hierarchical path from them.\n\tp := filepath.Join(\"dir1\", \"dir2\", \"filename\")\n\tfmt.Println(\"p:\", p)\n\n\t// You should always use `Join` instead of\n\t// concatenating `/`s or `\\`s manually. In addition\n\t// to providing portability, `Join` will also\n\t// normalize paths by removing superfluous separators\n\t// and directory changes.\n\tfmt.Println(filepath.Join(\"dir1//\", \"filename\"))\n\tfmt.Println(filepath.Join(\"dir1/../dir1\", \"filename\"))\n\n\t// `Dir` and `Base` can be used to split a path to the\n\t// directory and the file. Alternatively, `Split` will\n\t// return both in the same call.\n\tfmt.Println(\"Dir(p):\", filepath.Dir(p))\n\tfmt.Println(\"Base(p):\", filepath.Base(p))\n\n\t// We can check whether a path is absolute.\n\tfmt.Println(filepath.IsAbs(\"dir/file\"))\n\tfmt.Println(filepath.IsAbs(\"/dir/file\"))\n\n\tfilename := \"config.json\"\n\n\t// Some file names have extensions following a dot. We\n\t// can split the extension out of such names with `Ext`.\n\text := filepath.Ext(filename)\n\tfmt.Println(ext)\n\n\t// To find the file's name with the extension removed,\n\t// use `strings.TrimSuffix`.\n\tfmt.Println(strings.TrimSuffix(filename, ext))\n\n\t// `Rel` finds a relative path between a *base* and a\n\t// *target*. It returns an error if the target cannot\n\t// be made relative to base.\n\trel, err := filepath.Rel(\"a/b\", \"a/b/t/file\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(rel)\n\n\trel, err = filepath.Rel(\"a/b\", \"a/c/t/file\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(rel)\n}\n",
    "GoCodeHash": "10823f6a3f4daea097a91374efa88c4361932488",
    "URLHash": "5h3lUytvmyO",
    "Segs": [
      [
        {
          "docs": "The `filepath` package provides functions to parse\nand construct *file paths* in a way that is portable\nbetween operating systems; `dir/file` on Linux vs.\n`dir\\file` on Windows, for example.",
          "docs_rendered": "\u003cp\u003eThe \u003ccode\u003efilepath\u003c/code\u003e package provides functions to parse\nand construct \u003cem\u003efile paths\u003c/em\u003e in a way that is portable\nbetween operating systems; \u003ccode\u003edir/file\u003c/code\u003e on Linux vs.\n\u003ccode\u003edir\\file\u003c/code\u003e on Windows, for example.\u003c/p\u003e\n",
          "code": "\npackage main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"fmt\"\n    \"path/filepath\"\n    \"strings\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;path/filepath\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;strings\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"fmt\"\n    \"path/filepath\"\n    \"strings\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "`Join` should be used to construct paths in a\nportable way. It takes any number of arguments\nand constructs a hierarchical path from them.",
          "docs_rendered": "\u003cp\u003e\u003ccode\u003eJoin\u003c/code\u003e should be used to construct paths in a\nportable way. It takes any number of arguments\nand constructs a hierarchical path from them.\u003c/p\u003e\n",
          "code": "\n    p := filepath.Join(\"dir1\", \"dir2\", \"filename\")\n    fmt.Println(\"p:\", p)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003efilepath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eJoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;dir1\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;dir2\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;filename\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;p:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    p := filepath.Join(\"dir1\", \"dir2\", \"filename\")\n    fmt.Println(\"p:\", p)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "You should always use `Join` instead of\nconcatenating `/`s or `\\`s manually. In addition\nto providing portability, `Join` will also\nnormalize paths by removing superfluous separators\nand directory changes.",
          "docs_rendered": "\u003cp\u003eYou should always use \u003ccode\u003eJoin\u003c/code\u003e instead of\nconcatenating \u003ccode\u003e/\u003c/code\u003es or \u003ccode\u003e\\\u003c/code\u003es manually. In addition\nto providing portability, \u003ccode\u003eJoin\u003c/code\u003e will also\nnormalize paths by removing superfluous separators\nand directory changes.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(filepath.Join(\"dir1//\", \"filename\"))\n    fmt.Println(filepath.Join(\"dir1/../dir1\", \"filename\"))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efilepath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eJoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;dir1//\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;filename\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efilepath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eJoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;dir1/../dir1\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;filename\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(filepath.Join(\"dir1//\", \"filename\"))\n    fmt.Println(filepath.Join(\"dir1/../dir1\", \"filename\"))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "`Dir` and `Base` can be used to split a path to the\ndirectory and the file. Alternatively, `Split` will\nreturn both in the same call.",
          "docs_rendered": "\u003cp\u003e\u003ccode\u003eDir\u003c/code\u003e and \u003ccode\u003eBase\u003c/code\u003e can be used to split a path to the\ndirectory and the file. Alternatively, \u003ccode\u003eSplit\u003c/code\u003e will\nreturn both in the same call.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(\"Dir(p):\", filepath.Dir(p))\n    fmt.Println(\"Base(p):\", filepath.Base(p))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Dir(p):\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003efilepath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eDir\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Base(p):\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003efilepath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eBase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(\"Dir(p):\", filepath.Dir(p))\n    fmt.Println(\"Base(p):\", filepath.Base(p))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "We can check whether a path is absolute.",
          "docs_rendered": "\u003cp\u003eWe can check whether a path is absolute.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(filepath.IsAbs(\"dir/file\"))\n    fmt.Println(filepath.IsAbs(\"/dir/file\"))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efilepath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eIsAbs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;dir/file\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efilepath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eIsAbs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;/dir/file\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(filepath.IsAbs(\"dir/file\"))\n    fmt.Println(filepath.IsAbs(\"/dir/file\"))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "    filename := \"config.json\"",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efilename\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;config.json\u0026quot;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    filename := \"config.json\"\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Some file names have extensions following a dot. We\ncan split the extension out of such names with `Ext`.",
          "docs_rendered": "\u003cp\u003eSome file names have extensions following a dot. We\ncan split the extension out of such names with \u003ccode\u003eExt\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n    ext := filepath.Ext(filename)\n    fmt.Println(ext)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003eext\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003efilepath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eExt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efilename\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eext\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    ext := filepath.Ext(filename)\n    fmt.Println(ext)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "To find the file's name with the extension removed,\nuse `strings.TrimSuffix`.",
          "docs_rendered": "\u003cp\u003eTo find the file\u0026rsquo;s name with the extension removed,\nuse \u003ccode\u003estrings.TrimSuffix\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(strings.TrimSuffix(filename, ext))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estrings\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eTrimSuffix\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efilename\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eext\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(strings.TrimSuffix(filename, ext))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "`Rel` finds a relative path between a *base* and a\n*target*. It returns an error if the target cannot\nbe made relative to base.",
          "docs_rendered": "\u003cp\u003e\u003ccode\u003eRel\u003c/code\u003e finds a relative path between a \u003cem\u003ebase\u003c/em\u003e and a\n\u003cem\u003etarget\u003c/em\u003e. It returns an error if the target cannot\nbe made relative to base.\u003c/p\u003e\n",
          "code": "\n    rel, err := filepath.Rel(\"a/b\", \"a/b/t/file\")\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(rel)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003erel\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003efilepath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eRel\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;a/b\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;a/b/t/file\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003epanic\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003erel\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    rel, err := filepath.Rel(\"a/b\", \"a/b/t/file\")\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(rel)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "    rel, err = filepath.Rel(\"a/b\", \"a/c/t/file\")\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(rel)\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003erel\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003efilepath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eRel\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;a/b\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;a/c/t/file\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003epanic\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003erel\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    rel, err = filepath.Rel(\"a/b\", \"a/c/t/file\")\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(rel)\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "",
          "docs_rendered": "",
          "code": "$ go run file-paths.go\np: dir1/dir2/filename\ndir1/filename\ndir1/filename\nDir(p): dir1/dir2\nBase(p): filename\nfalse\ntrue\n.json\nconfig\nt/file\n../c/t/file",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run file-paths.go\n\u003cspan class=\"go\"\u003ep: dir1/dir2/filename\u003c/span\u003e\n\u003cspan class=\"go\"\u003edir1/filename\u003c/span\u003e\n\u003cspan class=\"go\"\u003edir1/filename\u003c/span\u003e\n\u003cspan class=\"go\"\u003eDir(p): dir1/dir2\u003c/span\u003e\n\u003cspan class=\"go\"\u003eBase(p): filename\u003c/span\u003e\n\u003cspan class=\"go\"\u003efalse\u003c/span\u003e\n\u003cspan class=\"go\"\u003etrue\u003c/span\u003e\n\u003cspan class=\"go\"\u003e.json\u003c/span\u003e\n\u003cspan class=\"go\"\u003econfig\u003c/span\u003e\n\u003cspan class=\"go\"\u003et/file\u003c/span\u003e\n\u003cspan class=\"go\"\u003e../c/t/file\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "directories",
    "Name": "Directories",
    "GoCode": "// Go has several useful functions for working with\n// *directories* in the file system.\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"path/filepath\"\n)\n\nfunc check(e error) {\n\tif e != nil {\n\t\tpanic(e)\n\t}\n}\n\nfunc main() {\n\n\t// Create a new sub-directory in the current working\n\t// directory.\n\terr := os.Mkdir(\"subdir\", 0755)\n\tcheck(err)\n\n\t// When creating temporary directories, it's good\n\t// practice to `defer` their removal. `os.RemoveAll`\n\t// will delete a whole directory tree (similarly to\n\t// `rm -rf`).\n\tdefer os.RemoveAll(\"subdir\")\n\n\t// Helper function to create a new empty file.\n\tcreateEmptyFile := func(name string) {\n\t\td := []byte(\"\")\n\t\tcheck(ioutil.WriteFile(name, d, 0644))\n\t}\n\n\tcreateEmptyFile(\"subdir/file1\")\n\n\t// We can create a hierarchy of directories, including\n\t// parents with `MkdirAll`. This is similar to the\n\t// command-line `mkdir -p`.\n\terr = os.MkdirAll(\"subdir/parent/child\", 0755)\n\tcheck(err)\n\n\tcreateEmptyFile(\"subdir/parent/file2\")\n\tcreateEmptyFile(\"subdir/parent/file3\")\n\tcreateEmptyFile(\"subdir/parent/child/file4\")\n\n\t// `ReadDir` lists directory contents, returning a\n\t// slice of `os.FileInfo` objects.\n\tc, err := ioutil.ReadDir(\"subdir/parent\")\n\tcheck(err)\n\n\tfmt.Println(\"Listing subdir/parent\")\n\tfor _, entry := range c {\n\t\tfmt.Println(\" \", entry.Name(), entry.IsDir())\n\t}\n\n\t// `Chdir` lets us change the current working directory,\n\t// similarly to `cd`.\n\terr = os.Chdir(\"subdir/parent/child\")\n\tcheck(err)\n\n\t// Now we'll see the contents of `subdir/parent/child`\n\t// when listing the *current* directory.\n\tc, err = ioutil.ReadDir(\".\")\n\tcheck(err)\n\n\tfmt.Println(\"Listing subdir/parent/child\")\n\tfor _, entry := range c {\n\t\tfmt.Println(\" \", entry.Name(), entry.IsDir())\n\t}\n\n\t// `cd` back to where we started.\n\terr = os.Chdir(\"../../..\")\n\tcheck(err)\n\n\t// We can also visit a directory *recursively*,\n\t// including all its sub-directories. `Walk` accepts\n\t// a callback function to handle every file or\n\t// directory visited.\n\tfmt.Println(\"Visiting subdir\")\n\terr = filepath.Walk(\"subdir\", visit)\n}\n\n// `visit` is called for every file or directory found\n// recursively by `filepath.Walk`.\nfunc visit(p string, info os.FileInfo, err error) error {\n\tif err != nil {\n\t\treturn err\n\t}\n\tfmt.Println(\" \", p, info.IsDir())\n\treturn nil\n}\n",
    "GoCodeHash": "fa3655fa8f4fa28e971cbe853dffb02773afce83",
    "URLHash": "UaeLMS5VQVR",
    "Segs": [
      [
        {
          "docs": "Go has several useful functions for working with\n*directories* in the file system.",
          "docs_rendered": "\u003cp\u003eGo has several useful functions for working with\n\u003cem\u003edirectories\u003c/em\u003e in the file system.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"fmt\"\n    \"io/ioutil\"\n    \"os\"\n    \"path/filepath\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;io/ioutil\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;os\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;path/filepath\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"fmt\"\n    \"io/ioutil\"\n    \"os\"\n    \"path/filepath\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func check(e error) {\n    if e != nil {\n        panic(e)\n    }\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003echeck\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ee\u003c/span\u003e \u003cspan class=\"kt\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003epanic\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func check(e error) {\n    if e != nil {\n        panic(e)\n    }\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Create a new sub-directory in the current working\ndirectory.",
          "docs_rendered": "\u003cp\u003eCreate a new sub-directory in the current working\ndirectory.\u003c/p\u003e\n",
          "code": "\n    err := os.Mkdir(\"subdir\", 0755)\n    check(err)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eMkdir\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;subdir\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mo\"\u003e0755\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003echeck\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    err := os.Mkdir(\"subdir\", 0755)\n    check(err)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "When creating temporary directories, it's good\npractice to `defer` their removal. `os.RemoveAll`\nwill delete a whole directory tree (similarly to\n`rm -rf`).",
          "docs_rendered": "\u003cp\u003eWhen creating temporary directories, it\u0026rsquo;s good\npractice to \u003ccode\u003edefer\u003c/code\u003e their removal. \u003ccode\u003eos.RemoveAll\u003c/code\u003e\nwill delete a whole directory tree (similarly to\n\u003ccode\u003erm -rf\u003c/code\u003e).\u003c/p\u003e\n",
          "code": "\n    defer os.RemoveAll(\"subdir\")",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003edefer\u003c/span\u003e \u003cspan class=\"nx\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eRemoveAll\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;subdir\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    defer os.RemoveAll(\"subdir\")\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Helper function to create a new empty file.",
          "docs_rendered": "\u003cp\u003eHelper function to create a new empty file.\u003c/p\u003e\n",
          "code": "\n    createEmptyFile := func(name string) {\n        d := []byte(\"\")\n        check(ioutil.WriteFile(name, d, 0644))\n    }",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ecreateEmptyFile\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ename\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003ed\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"nb\"\u003ebyte\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003echeck\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eioutil\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eWriteFile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mo\"\u003e0644\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    createEmptyFile := func(name string) {\n        d := []byte(\"\")\n        check(ioutil.WriteFile(name, d, 0644))\n    }\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "    createEmptyFile(\"subdir/file1\")",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ecreateEmptyFile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;subdir/file1\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    createEmptyFile(\"subdir/file1\")\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "We can create a hierarchy of directories, including\nparents with `MkdirAll`. This is similar to the\ncommand-line `mkdir -p`.",
          "docs_rendered": "\u003cp\u003eWe can create a hierarchy of directories, including\nparents with \u003ccode\u003eMkdirAll\u003c/code\u003e. This is similar to the\ncommand-line \u003ccode\u003emkdir -p\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n    err = os.MkdirAll(\"subdir/parent/child\", 0755)\n    check(err)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eMkdirAll\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;subdir/parent/child\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mo\"\u003e0755\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003echeck\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    err = os.MkdirAll(\"subdir/parent/child\", 0755)\n    check(err)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "    createEmptyFile(\"subdir/parent/file2\")\n    createEmptyFile(\"subdir/parent/file3\")\n    createEmptyFile(\"subdir/parent/child/file4\")",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ecreateEmptyFile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;subdir/parent/file2\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ecreateEmptyFile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;subdir/parent/file3\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ecreateEmptyFile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;subdir/parent/child/file4\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    createEmptyFile(\"subdir/parent/file2\")\n    createEmptyFile(\"subdir/parent/file3\")\n    createEmptyFile(\"subdir/parent/child/file4\")\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "`ReadDir` lists directory contents, returning a\nslice of `os.FileInfo` objects.",
          "docs_rendered": "\u003cp\u003e\u003ccode\u003eReadDir\u003c/code\u003e lists directory contents, returning a\nslice of \u003ccode\u003eos.FileInfo\u003c/code\u003e objects.\u003c/p\u003e\n",
          "code": "\n    c, err := ioutil.ReadDir(\"subdir/parent\")\n    check(err)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eioutil\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eReadDir\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;subdir/parent\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003echeck\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    c, err := ioutil.ReadDir(\"subdir/parent\")\n    check(err)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "    fmt.Println(\"Listing subdir/parent\")\n    for _, entry := range c {\n        fmt.Println(\" \", entry.Name(), entry.IsDir())\n    }",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Listing subdir/parent\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eentry\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"k\"\u003erange\u003c/span\u003e \u003cspan class=\"nx\"\u003ec\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot; \u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eentry\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eName\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"nx\"\u003eentry\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eIsDir\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(\"Listing subdir/parent\")\n    for _, entry := range c {\n        fmt.Println(\" \", entry.Name(), entry.IsDir())\n    }\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "`Chdir` lets us change the current working directory,\nsimilarly to `cd`.",
          "docs_rendered": "\u003cp\u003e\u003ccode\u003eChdir\u003c/code\u003e lets us change the current working directory,\nsimilarly to \u003ccode\u003ecd\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n    err = os.Chdir(\"subdir/parent/child\")\n    check(err)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eChdir\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;subdir/parent/child\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003echeck\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    err = os.Chdir(\"subdir/parent/child\")\n    check(err)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Now we'll see the contents of `subdir/parent/child`\nwhen listing the *current* directory.",
          "docs_rendered": "\u003cp\u003eNow we\u0026rsquo;ll see the contents of \u003ccode\u003esubdir/parent/child\u003c/code\u003e\nwhen listing the \u003cem\u003ecurrent\u003c/em\u003e directory.\u003c/p\u003e\n",
          "code": "\n    c, err = ioutil.ReadDir(\".\")\n    check(err)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eioutil\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eReadDir\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;.\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003echeck\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    c, err = ioutil.ReadDir(\".\")\n    check(err)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "    fmt.Println(\"Listing subdir/parent/child\")\n    for _, entry := range c {\n        fmt.Println(\" \", entry.Name(), entry.IsDir())\n    }",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Listing subdir/parent/child\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eentry\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"k\"\u003erange\u003c/span\u003e \u003cspan class=\"nx\"\u003ec\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot; \u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eentry\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eName\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"nx\"\u003eentry\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eIsDir\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(\"Listing subdir/parent/child\")\n    for _, entry := range c {\n        fmt.Println(\" \", entry.Name(), entry.IsDir())\n    }\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "`cd` back to where we started.",
          "docs_rendered": "\u003cp\u003e\u003ccode\u003ecd\u003c/code\u003e back to where we started.\u003c/p\u003e\n",
          "code": "\n    err = os.Chdir(\"../../..\")\n    check(err)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eChdir\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;../../..\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003echeck\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    err = os.Chdir(\"../../..\")\n    check(err)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "We can also visit a directory *recursively*,\nincluding all its sub-directories. `Walk` accepts\na callback function to handle every file or\ndirectory visited.",
          "docs_rendered": "\u003cp\u003eWe can also visit a directory \u003cem\u003erecursively\u003c/em\u003e,\nincluding all its sub-directories. \u003ccode\u003eWalk\u003c/code\u003e accepts\na callback function to handle every file or\ndirectory visited.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(\"Visiting subdir\")\n    err = filepath.Walk(\"subdir\", visit)\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Visiting subdir\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003efilepath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eWalk\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;subdir\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(\"Visiting subdir\")\n    err = filepath.Walk(\"subdir\", visit)\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "`visit` is called for every file or directory found\nrecursively by `filepath.Walk`.",
          "docs_rendered": "\u003cp\u003e\u003ccode\u003evisit\u003c/code\u003e is called for every file or directory found\nrecursively by \u003ccode\u003efilepath.Walk\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\nfunc visit(p string, info os.FileInfo, err error) error {\n    if err != nil {\n        return err\n    }\n    fmt.Println(\" \", p, info.IsDir())\n    return nil\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ep\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003einfo\u003c/span\u003e \u003cspan class=\"nx\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eFileInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"kt\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kt\"\u003eerror\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot; \u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eIsDir\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func visit(p string, info os.FileInfo, err error) error {\n    if err != nil {\n        return err\n    }\n    fmt.Println(\" \", p, info.IsDir())\n    return nil\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "",
          "docs_rendered": "",
          "code": "$ go run directories.go\nListing subdir/parent\n  child true\n  file2 false\n  file3 false\nListing subdir/parent/child\n  file4 false\nVisiting subdir\n  subdir true\n  subdir/file1 false\n  subdir/parent true\n  subdir/parent/child true\n  subdir/parent/child/file4 false\n  subdir/parent/file2 false\n  subdir/parent/file3 false",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run directories.go\n\u003cspan class=\"go\"\u003eListing subdir/parent\u003c/span\u003e\n\u003cspan class=\"go\"\u003e  child true\u003c/span\u003e\n\u003cspan class=\"go\"\u003e  file2 false\u003c/span\u003e\n\u003cspan class=\"go\"\u003e  file3 false\u003c/span\u003e\n\u003cspan class=\"go\"\u003eListing subdir/parent/child\u003c/span\u003e\n\u003cspan class=\"go\"\u003e  file4 false\u003c/span\u003e\n\u003cspan class=\"go\"\u003eVisiting subdir\u003c/span\u003e\n\u003cspan class=\"go\"\u003e  subdir true\u003c/span\u003e\n\u003cspan class=\"go\"\u003e  subdir/file1 false\u003c/span\u003e\n\u003cspan class=\"go\"\u003e  subdir/parent true\u003c/span\u003e\n\u003cspan class=\"go\"\u003e  subdir/parent/child true\u003c/span\u003e\n\u003cspan class=\"go\"\u003e  subdir/parent/child/file4 false\u003c/span\u003e\n\u003cspan class=\"go\"\u003e  subdir/parent/file2 false\u003c/span\u003e\n\u003cspan class=\"go\"\u003e  subdir/parent/file3 false\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "temporary-files-and-directories",
    "Name": "Temporary Files and Directories",
    "GoCode": "// Throughout program execution, we often want to create\n// data that isn't needed after the program exits.\n// *Temporary files and directories* are useful for this\n// purpose since they don't pollute the file system over\n// time.\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"path/filepath\"\n)\n\nfunc check(e error) {\n\tif e != nil {\n\t\tpanic(e)\n\t}\n}\n\nfunc main() {\n\n\t// The easiest way to create a temporary file is by\n\t// calling `ioutil.TempFile`. It creates a file *and*\n\t// opens it for reading and writing. We provide `\"\"`\n\t// as the first argument, so `ioutil.TempFile` will\n\t// create the file in the default location for our OS.\n\tf, err := ioutil.TempFile(\"\", \"sample\")\n\tcheck(err)\n\n\t// Display the name of the temporary file. On\n\t// Unix-based OSes the directory will likely be `/tmp`.\n\t// The file name starts with the prefix given as the\n\t// second argument to `ioutil.TempFile` and the rest\n\t// is chosen automatically to ensure that concurrent\n\t// calls will always create different file names.\n\tfmt.Println(\"Temp file name:\", f.Name())\n\n\t// Clean up the file after we're done. The OS is\n\t// likely to clean up temporary files by itself after\n\t// some time, but it's good practice to do this\n\t// explicitly.\n\tdefer os.Remove(f.Name())\n\n\t// We can write some data to the file.\n\t_, err = f.Write([]byte{1, 2, 3, 4})\n\tcheck(err)\n\n\t// If we intend to write many temporary files, we may\n\t// prefer to create a temporary *directory*.\n\t// `ioutil.TempDir`'s arguments are the same as\n\t// `TempFile`'s, but it returns a directory *name*\n\t// rather than an open file.\n\tdname, err := ioutil.TempDir(\"\", \"sampledir\")\n\tcheck(err)\n\tfmt.Println(\"Temp dir name:\", dname)\n\n\tdefer os.RemoveAll(dname)\n\n\t// Now we can synthesize temporary file names by\n\t// prefixing them with our temporary directory.\n\tfname := filepath.Join(dname, \"file1\")\n\terr = ioutil.WriteFile(fname, []byte{1, 2}, 0666)\n\tcheck(err)\n}\n",
    "GoCodeHash": "cc4755e23cb4ba3c0e0ef5554ec9e9477372422a",
    "URLHash": "nMpjCsALS6P",
    "Segs": [
      [
        {
          "docs": "Throughout program execution, we often want to create\ndata that isn't needed after the program exits.\n*Temporary files and directories* are useful for this\npurpose since they don't pollute the file system over\ntime.",
          "docs_rendered": "\u003cp\u003eThroughout program execution, we often want to create\ndata that isn\u0026rsquo;t needed after the program exits.\n\u003cem\u003eTemporary files and directories\u003c/em\u003e are useful for this\npurpose since they don\u0026rsquo;t pollute the file system over\ntime.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"fmt\"\n    \"io/ioutil\"\n    \"os\"\n    \"path/filepath\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;io/ioutil\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;os\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;path/filepath\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"fmt\"\n    \"io/ioutil\"\n    \"os\"\n    \"path/filepath\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func check(e error) {\n    if e != nil {\n        panic(e)\n    }\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003echeck\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ee\u003c/span\u003e \u003cspan class=\"kt\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003epanic\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func check(e error) {\n    if e != nil {\n        panic(e)\n    }\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "The easiest way to create a temporary file is by\ncalling `ioutil.TempFile`. It creates a file *and*\nopens it for reading and writing. We provide `\"\"`\nas the first argument, so `ioutil.TempFile` will\ncreate the file in the default location for our OS.",
          "docs_rendered": "\u003cp\u003eThe easiest way to create a temporary file is by\ncalling \u003ccode\u003eioutil.TempFile\u003c/code\u003e. It creates a file \u003cem\u003eand\u003c/em\u003e\nopens it for reading and writing. We provide \u003ccode\u003e\u0026quot;\u0026quot;\u003c/code\u003e\nas the first argument, so \u003ccode\u003eioutil.TempFile\u003c/code\u003e will\ncreate the file in the default location for our OS.\u003c/p\u003e\n",
          "code": "\n    f, err := ioutil.TempFile(\"\", \"sample\")\n    check(err)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eioutil\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eTempFile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;sample\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003echeck\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    f, err := ioutil.TempFile(\"\", \"sample\")\n    check(err)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Display the name of the temporary file. On\nUnix-based OSes the directory will likely be `/tmp`.\nThe file name starts with the prefix given as the\nsecond argument to `ioutil.TempFile` and the rest\nis chosen automatically to ensure that concurrent\ncalls will always create different file names.",
          "docs_rendered": "\u003cp\u003eDisplay the name of the temporary file. On\nUnix-based OSes the directory will likely be \u003ccode\u003e/tmp\u003c/code\u003e.\nThe file name starts with the prefix given as the\nsecond argument to \u003ccode\u003eioutil.TempFile\u003c/code\u003e and the rest\nis chosen automatically to ensure that concurrent\ncalls will always create different file names.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(\"Temp file name:\", f.Name())",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Temp file name:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eName\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(\"Temp file name:\", f.Name())\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Clean up the file after we're done. The OS is\nlikely to clean up temporary files by itself after\nsome time, but it's good practice to do this\nexplicitly.",
          "docs_rendered": "\u003cp\u003eClean up the file after we\u0026rsquo;re done. The OS is\nlikely to clean up temporary files by itself after\nsome time, but it\u0026rsquo;s good practice to do this\nexplicitly.\u003c/p\u003e\n",
          "code": "\n    defer os.Remove(f.Name())",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003edefer\u003c/span\u003e \u003cspan class=\"nx\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eRemove\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eName\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    defer os.Remove(f.Name())\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "We can write some data to the file.",
          "docs_rendered": "\u003cp\u003eWe can write some data to the file.\u003c/p\u003e\n",
          "code": "\n    _, err = f.Write([]byte{1, 2, 3, 4})\n    check(err)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eWrite\u003c/span\u003e\u003cspan class=\"p\"\u003e([]\u003c/span\u003e\u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e})\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003echeck\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    _, err = f.Write([]byte{1, 2, 3, 4})\n    check(err)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "If we intend to write many temporary files, we may\nprefer to create a temporary *directory*.\n`ioutil.TempDir`'s arguments are the same as\n`TempFile`'s, but it returns a directory *name*\nrather than an open file.",
          "docs_rendered": "\u003cp\u003eIf we intend to write many temporary files, we may\nprefer to create a temporary \u003cem\u003edirectory\u003c/em\u003e.\n\u003ccode\u003eioutil.TempDir\u003c/code\u003e\u0026rsquo;s arguments are the same as\n\u003ccode\u003eTempFile\u003c/code\u003e\u0026rsquo;s, but it returns a directory \u003cem\u003ename\u003c/em\u003e\nrather than an open file.\u003c/p\u003e\n",
          "code": "\n    dname, err := ioutil.TempDir(\"\", \"sampledir\")\n    check(err)\n    fmt.Println(\"Temp dir name:\", dname)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003edname\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eioutil\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eTempDir\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;sampledir\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003echeck\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Temp dir name:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003edname\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    dname, err := ioutil.TempDir(\"\", \"sampledir\")\n    check(err)\n    fmt.Println(\"Temp dir name:\", dname)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "    defer os.RemoveAll(dname)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003edefer\u003c/span\u003e \u003cspan class=\"nx\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eRemoveAll\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003edname\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    defer os.RemoveAll(dname)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Now we can synthesize temporary file names by\nprefixing them with our temporary directory.",
          "docs_rendered": "\u003cp\u003eNow we can synthesize temporary file names by\nprefixing them with our temporary directory.\u003c/p\u003e\n",
          "code": "\n    fname := filepath.Join(dname, \"file1\")\n    err = ioutil.WriteFile(fname, []byte{1, 2}, 0666)\n    check(err)\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efname\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003efilepath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eJoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003edname\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;file1\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eioutil\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eWriteFile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efname\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"mo\"\u003e0666\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003echeck\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fname := filepath.Join(dname, \"file1\")\n    err = ioutil.WriteFile(fname, []byte{1, 2}, 0666)\n    check(err)\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "",
          "docs_rendered": "",
          "code": "$ go run temporary-files-and-directories.go\nTemp file name: /tmp/sample610887201\nTemp dir name: /tmp/sampledir898854668",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run temporary-files-and-directories.go\n\u003cspan class=\"go\"\u003eTemp file name: /tmp/sample610887201\u003c/span\u003e\n\u003cspan class=\"go\"\u003eTemp dir name: /tmp/sampledir898854668\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "testing",
    "Name": "Testing",
    "GoCode": "// Unit testing is an important part of writing\n// principled Go programs. The `testing` package\n// provides the tools we need to write unit tests\n// and the `go test` command runs tests.\n\n// For the sake of demonstration, this code is in package\n// `main`, but it could be any package. Testing code\n// typically lives in the same package as the code it tests.\npackage main\n\nimport (\n\t\"fmt\"\n\t\"testing\"\n)\n\n// We'll be testing this simple implementation of an\n// integer minimum. Typically, the code we're testing\n// would be in a source file named something like\n// `intutils.go`, and the test file for it would then\n// be named `intutils_test.go`.\nfunc IntMin(a, b int) int {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n\n// A test is created by writing a function with a name\n// beginning with `Test`.\nfunc TestIntMinBasic(t *testing.T) {\n\tans := IntMin(2, -2)\n\tif ans != -2 {\n\t\t// `t.Error*` will report test failures but continue\n\t\t// executing the test. `t.Fail*` will report test\n\t\t// failures and stop the test immediately.\n\t\tt.Errorf(\"IntMin(2, -2) = %d; want -2\", ans)\n\t}\n}\n\n// Writing tests can be repetitive, so it's idiomatic to\n// use a *table-driven style*, where test inputs and\n// expected outputs are listed in a table and a single loop\n// walks over them and performs the test logic.\nfunc TestIntMinTableDriven(t *testing.T) {\n\tvar tests = []struct {\n\t\ta, b int\n\t\twant int\n\t}{\n\t\t{0, 1, 0},\n\t\t{1, 0, 0},\n\t\t{2, -2, -2},\n\t\t{0, -1, -1},\n\t\t{-1, 0, -1},\n\t}\n\n\tfor _, tt := range tests {\n\t\t// t.Run enables running \"subtests\", one for each\n\t\t// table entry. These are shown separately\n\t\t// when executing `go test -v`.\n\t\ttestname := fmt.Sprintf(\"%d,%d\", tt.a, tt.b)\n\t\tt.Run(testname, func(t *testing.T) {\n\t\t\tans := IntMin(tt.a, tt.b)\n\t\t\tif ans != tt.want {\n\t\t\t\tt.Errorf(\"got %d, want %d\", ans, tt.want)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "GoCodeHash": "8e15d97f54c34ac1546c2ec6589cc1b60ff27f80",
    "URLHash": "GFuPdlBlyMU",
    "Segs": [
      [
        {
          "docs": "Unit testing is an important part of writing\nprincipled Go programs. The `testing` package\nprovides the tools we need to write unit tests\nand the `go test` command runs tests.",
          "docs_rendered": "\u003cp\u003eUnit testing is an important part of writing\nprincipled Go programs. The \u003ccode\u003etesting\u003c/code\u003e package\nprovides the tools we need to write unit tests\nand the \u003ccode\u003ego test\u003c/code\u003e command runs tests.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "For the sake of demonstration, this code is in package\n`main`, but it could be any package. Testing code\ntypically lives in the same package as the code it tests.",
          "docs_rendered": "\u003cp\u003eFor the sake of demonstration, this code is in package\n\u003ccode\u003emain\u003c/code\u003e, but it could be any package. Testing code\ntypically lives in the same package as the code it tests.\u003c/p\u003e\n",
          "code": "\npackage main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"fmt\"\n    \"testing\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;testing\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"fmt\"\n    \"testing\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "We'll be testing this simple implementation of an\ninteger minimum. Typically, the code we're testing\nwould be in a source file named something like\n`intutils.go`, and the test file for it would then\nbe named `intutils_test.go`.",
          "docs_rendered": "\u003cp\u003eWe\u0026rsquo;ll be testing this simple implementation of an\ninteger minimum. Typically, the code we\u0026rsquo;re testing\nwould be in a source file named something like\n\u003ccode\u003eintutils.go\u003c/code\u003e, and the test file for it would then\nbe named \u003ccode\u003eintutils_test.go\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\nfunc IntMin(a, b int) int {\n    if a \u003c b {\n        return a\n    }\n    return b\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003eIntMin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003ea\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003ea\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func IntMin(a, b int) int {\n    if a \u003c b {\n        return a\n    }\n    return b\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "A test is created by writing a function with a name\nbeginning with `Test`.",
          "docs_rendered": "\u003cp\u003eA test is created by writing a function with a name\nbeginning with \u003ccode\u003eTest\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\nfunc TestIntMinBasic(t *testing.T) {\n    ans := IntMin(2, -2)\n    if ans != -2 {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003eTestIntMinBasic\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003et\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003etesting\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eans\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eIntMin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003eans\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func TestIntMinBasic(t *testing.T) {\n    ans := IntMin(2, -2)\n    if ans != -2 {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "`t.Error*` will report test failures but continue\nexecuting the test. `t.Fail*` will report test\nfailures and stop the test immediately.",
          "docs_rendered": "\u003cp\u003e\u003ccode\u003et.Error*\u003c/code\u003e will report test failures but continue\nexecuting the test. \u003ccode\u003et.Fail*\u003c/code\u003e will report test\nfailures and stop the test immediately.\u003c/p\u003e\n",
          "code": "\n        t.Errorf(\"IntMin(2, -2) = %d; want -2\", ans)\n    }\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e        \u003cspan class=\"nx\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eErrorf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;IntMin(2, -2) = %d; want -2\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eans\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "        t.Errorf(\"IntMin(2, -2) = %d; want -2\", ans)\n    }\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Writing tests can be repetitive, so it's idiomatic to\nuse a *table-driven style*, where test inputs and\nexpected outputs are listed in a table and a single loop\nwalks over them and performs the test logic.",
          "docs_rendered": "\u003cp\u003eWriting tests can be repetitive, so it\u0026rsquo;s idiomatic to\nuse a \u003cem\u003etable-driven style\u003c/em\u003e, where test inputs and\nexpected outputs are listed in a table and a single loop\nwalks over them and performs the test logic.\u003c/p\u003e\n",
          "code": "\nfunc TestIntMinTableDriven(t *testing.T) {\n    var tests = []struct {\n        a, b int\n        want int\n    }{\n        {0, 1, 0},\n        {1, 0, 0},\n        {2, -2, -2},\n        {0, -1, -1},\n        {-1, 0, -1},\n    }",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003eTestIntMinTableDriven\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003et\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003etesting\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003etests\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003ewant\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}{\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func TestIntMinTableDriven(t *testing.T) {\n    var tests = []struct {\n        a, b int\n        want int\n    }{\n        {0, 1, 0},\n        {1, 0, 0},\n        {2, -2, -2},\n        {0, -1, -1},\n        {-1, 0, -1},\n    }\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "\nt.Run enables running \"subtests\", one for each\ntable entry. These are shown separately\nwhen executing `go test -v`.",
          "docs_rendered": "\u003cp\u003et.Run enables running \u0026ldquo;subtests\u0026rdquo;, one for each\ntable entry. These are shown separately\nwhen executing \u003ccode\u003ego test -v\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "    for _, tt := range tests {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ett\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"k\"\u003erange\u003c/span\u003e \u003cspan class=\"nx\"\u003etests\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    for _, tt := range tests {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "        testname := fmt.Sprintf(\"%d,%d\", tt.a, tt.b)\n        t.Run(testname, func(t *testing.T) {\n            ans := IntMin(tt.a, tt.b)\n            if ans != tt.want {\n                t.Errorf(\"got %d, want %d\", ans, tt.want)\n            }\n        })\n    }\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e        \u003cspan class=\"nx\"\u003etestname\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;%d,%d\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ett\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ett\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eRun\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etestname\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003et\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003etesting\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"nx\"\u003eans\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eIntMin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ett\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ett\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003eans\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"nx\"\u003ett\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ewant\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"nx\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eErrorf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;got %d, want %d\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eans\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ett\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ewant\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e})\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "        testname := fmt.Sprintf(\"%d,%d\", tt.a, tt.b)\n        t.Run(testname, func(t *testing.T) {\n            ans := IntMin(tt.a, tt.b)\n            if ans != tt.want {\n                t.Errorf(\"got %d, want %d\", ans, tt.want)\n            }\n        })\n    }\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "Run all tests in the current project in verbose mode.",
          "docs_rendered": "\u003cp\u003eRun all tests in the current project in verbose mode.\u003c/p\u003e\n",
          "code": "\n$ go test -v\n== RUN   TestIntMinBasic\n--- PASS: TestIntMinBasic (0.00s)\n=== RUN   TestIntMinTableDriven\n=== RUN   TestIntMinTableDriven/0,1\n=== RUN   TestIntMinTableDriven/1,0\n=== RUN   TestIntMinTableDriven/2,-2\n=== RUN   TestIntMinTableDriven/0,-1\n=== RUN   TestIntMinTableDriven/-1,0\n--- PASS: TestIntMinTableDriven (0.00s)\n    --- PASS: TestIntMinTableDriven/0,1 (0.00s)\n    --- PASS: TestIntMinTableDriven/1,0 (0.00s)\n    --- PASS: TestIntMinTableDriven/2,-2 (0.00s)\n    --- PASS: TestIntMinTableDriven/0,-1 (0.00s)\n    --- PASS: TestIntMinTableDriven/-1,0 (0.00s)\nPASS\nok      examples/testing    0.023s",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go \u003cspan class=\"nb\"\u003etest\u003c/span\u003e -v\n\u003cspan class=\"go\"\u003e== RUN   TestIntMinBasic\u003c/span\u003e\n\u003cspan class=\"go\"\u003e--- PASS: TestIntMinBasic (0.00s)\u003c/span\u003e\n\u003cspan class=\"go\"\u003e=== RUN   TestIntMinTableDriven\u003c/span\u003e\n\u003cspan class=\"go\"\u003e=== RUN   TestIntMinTableDriven/0,1\u003c/span\u003e\n\u003cspan class=\"go\"\u003e=== RUN   TestIntMinTableDriven/1,0\u003c/span\u003e\n\u003cspan class=\"go\"\u003e=== RUN   TestIntMinTableDriven/2,-2\u003c/span\u003e\n\u003cspan class=\"go\"\u003e=== RUN   TestIntMinTableDriven/0,-1\u003c/span\u003e\n\u003cspan class=\"go\"\u003e=== RUN   TestIntMinTableDriven/-1,0\u003c/span\u003e\n\u003cspan class=\"go\"\u003e--- PASS: TestIntMinTableDriven (0.00s)\u003c/span\u003e\n\u003cspan class=\"go\"\u003e    --- PASS: TestIntMinTableDriven/0,1 (0.00s)\u003c/span\u003e\n\u003cspan class=\"go\"\u003e    --- PASS: TestIntMinTableDriven/1,0 (0.00s)\u003c/span\u003e\n\u003cspan class=\"go\"\u003e    --- PASS: TestIntMinTableDriven/2,-2 (0.00s)\u003c/span\u003e\n\u003cspan class=\"go\"\u003e    --- PASS: TestIntMinTableDriven/0,-1 (0.00s)\u003c/span\u003e\n\u003cspan class=\"go\"\u003e    --- PASS: TestIntMinTableDriven/-1,0 (0.00s)\u003c/span\u003e\n\u003cspan class=\"go\"\u003ePASS\u003c/span\u003e\n\u003cspan class=\"go\"\u003eok      examples/testing    0.023s\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "command-line-arguments",
    "Name": "Command-Line Arguments",
    "GoCode": "// [_Command-line arguments_](http://en.wikipedia.org/wiki/Command-line_interface#Arguments)\n// are a common way to parameterize execution of programs.\n// For example, `go run hello.go` uses `run` and\n// `hello.go` arguments to the `go` program.\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc main() {\n\n\t// `os.Args` provides access to raw command-line\n\t// arguments. Note that the first value in this slice\n\t// is the path to the program, and `os.Args[1:]`\n\t// holds the arguments to the program.\n\targsWithProg := os.Args\n\targsWithoutProg := os.Args[1:]\n\n\t// You can get individual args with normal indexing.\n\targ := os.Args[3]\n\n\tfmt.Println(argsWithProg)\n\tfmt.Println(argsWithoutProg)\n\tfmt.Println(arg)\n}\n",
    "GoCodeHash": "d60d1c9cb5dbbb748cf3b692334076951cea7d59",
    "URLHash": "oSxtj7v_v1K",
    "Segs": [
      [
        {
          "docs": "[_Command-line arguments_](http://en.wikipedia.org/wiki/Command-line_interface#Arguments)\nare a common way to parameterize execution of programs.\nFor example, `go run hello.go` uses `run` and\n`hello.go` arguments to the `go` program.",
          "docs_rendered": "\u003cp\u003e\u003ca href=\"http://en.wikipedia.org/wiki/Command-line_interface#Arguments\"\u003e\u003cem\u003eCommand-line arguments\u003c/em\u003e\u003c/a\u003e\nare a common way to parameterize execution of programs.\nFor example, \u003ccode\u003ego run hello.go\u003c/code\u003e uses \u003ccode\u003erun\u003c/code\u003e and\n\u003ccode\u003ehello.go\u003c/code\u003e arguments to the \u003ccode\u003ego\u003c/code\u003e program.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"fmt\"\n    \"os\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;os\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"fmt\"\n    \"os\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "`os.Args` provides access to raw command-line\narguments. Note that the first value in this slice\nis the path to the program, and `os.Args[1:]`\nholds the arguments to the program.",
          "docs_rendered": "\u003cp\u003e\u003ccode\u003eos.Args\u003c/code\u003e provides access to raw command-line\narguments. Note that the first value in this slice\nis the path to the program, and \u003ccode\u003eos.Args[1:]\u003c/code\u003e\nholds the arguments to the program.\u003c/p\u003e\n",
          "code": "\n    argsWithProg := os.Args\n    argsWithoutProg := os.Args[1:]",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003eargsWithProg\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eArgs\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eargsWithoutProg\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eArgs\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e:]\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    argsWithProg := os.Args\n    argsWithoutProg := os.Args[1:]\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "You can get individual args with normal indexing.",
          "docs_rendered": "\u003cp\u003eYou can get individual args with normal indexing.\u003c/p\u003e\n",
          "code": "\n    arg := os.Args[3]",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003earg\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eArgs\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    arg := os.Args[3]\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "    fmt.Println(argsWithProg)\n    fmt.Println(argsWithoutProg)\n    fmt.Println(arg)\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eargsWithProg\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eargsWithoutProg\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003earg\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(argsWithProg)\n    fmt.Println(argsWithoutProg)\n    fmt.Println(arg)\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "To experiment with command-line arguments it's best to\nbuild a binary with `go build` first.",
          "docs_rendered": "\u003cp\u003eTo experiment with command-line arguments it\u0026rsquo;s best to\nbuild a binary with \u003ccode\u003ego build\u003c/code\u003e first.\u003c/p\u003e\n",
          "code": "\n$ go build command-line-arguments.go\n$ ./command-line-arguments a b c d\n[./command-line-arguments a b c d]       \n[a b c d]\nc",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go build command-line-arguments.go\n\u003cspan class=\"gp\"\u003e$\u003c/span\u003e ./command-line-arguments a b c d\n\u003cspan class=\"go\"\u003e[./command-line-arguments a b c d]       \u003c/span\u003e\n\u003cspan class=\"go\"\u003e[a b c d]\u003c/span\u003e\n\u003cspan class=\"go\"\u003ec\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Next we'll look at more advanced command-line processing\nwith flags.",
          "docs_rendered": "\u003cp\u003eNext we\u0026rsquo;ll look at more advanced command-line processing\nwith flags.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "command-line-flags",
    "Name": "Command-Line Flags",
    "GoCode": "// [_Command-line flags_](http://en.wikipedia.org/wiki/Command-line_interface#Command-line_option)\n// are a common way to specify options for command-line\n// programs. For example, in `wc -l` the `-l` is a\n// command-line flag.\n\npackage main\n\n// Go provides a `flag` package supporting basic\n// command-line flag parsing. We'll use this package to\n// implement our example command-line program.\nimport (\n\t\"flag\"\n\t\"fmt\"\n)\n\nfunc main() {\n\n\t// Basic flag declarations are available for string,\n\t// integer, and boolean options. Here we declare a\n\t// string flag `word` with a default value `\"foo\"`\n\t// and a short description. This `flag.String` function\n\t// returns a string pointer (not a string value);\n\t// we'll see how to use this pointer below.\n\twordPtr := flag.String(\"word\", \"foo\", \"a string\")\n\n\t// This declares `numb` and `fork` flags, using a\n\t// similar approach to the `word` flag.\n\tnumbPtr := flag.Int(\"numb\", 42, \"an int\")\n\tboolPtr := flag.Bool(\"fork\", false, \"a bool\")\n\n\t// It's also possible to declare an option that uses an\n\t// existing var declared elsewhere in the program.\n\t// Note that we need to pass in a pointer to the flag\n\t// declaration function.\n\tvar svar string\n\tflag.StringVar(\u0026svar, \"svar\", \"bar\", \"a string var\")\n\n\t// Once all flags are declared, call `flag.Parse()`\n\t// to execute the command-line parsing.\n\tflag.Parse()\n\n\t// Here we'll just dump out the parsed options and\n\t// any trailing positional arguments. Note that we\n\t// need to dereference the pointers with e.g. `*wordPtr`\n\t// to get the actual option values.\n\tfmt.Println(\"word:\", *wordPtr)\n\tfmt.Println(\"numb:\", *numbPtr)\n\tfmt.Println(\"fork:\", *boolPtr)\n\tfmt.Println(\"svar:\", svar)\n\tfmt.Println(\"tail:\", flag.Args())\n}\n",
    "GoCodeHash": "e86d2c60cee18fa926ce1eea60bd082837bd950b",
    "URLHash": "fD0SmjD4GdZ",
    "Segs": [
      [
        {
          "docs": "[_Command-line flags_](http://en.wikipedia.org/wiki/Command-line_interface#Command-line_option)\nare a common way to specify options for command-line\nprograms. For example, in `wc -l` the `-l` is a\ncommand-line flag.",
          "docs_rendered": "\u003cp\u003e\u003ca href=\"http://en.wikipedia.org/wiki/Command-line_interface#Command-line_option\"\u003e\u003cem\u003eCommand-line flags\u003c/em\u003e\u003c/a\u003e\nare a common way to specify options for command-line\nprograms. For example, in \u003ccode\u003ewc -l\u003c/code\u003e the \u003ccode\u003e-l\u003c/code\u003e is a\ncommand-line flag.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "Go provides a `flag` package supporting basic\ncommand-line flag parsing. We'll use this package to\nimplement our example command-line program.",
          "docs_rendered": "\u003cp\u003eGo provides a \u003ccode\u003eflag\u003c/code\u003e package supporting basic\ncommand-line flag parsing. We\u0026rsquo;ll use this package to\nimplement our example command-line program.\u003c/p\u003e\n",
          "code": "\nimport (\n    \"flag\"\n    \"fmt\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;flag\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"flag\"\n    \"fmt\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Basic flag declarations are available for string,\ninteger, and boolean options. Here we declare a\nstring flag `word` with a default value `\"foo\"`\nand a short description. This `flag.String` function\nreturns a string pointer (not a string value);\nwe'll see how to use this pointer below.",
          "docs_rendered": "\u003cp\u003eBasic flag declarations are available for string,\ninteger, and boolean options. Here we declare a\nstring flag \u003ccode\u003eword\u003c/code\u003e with a default value \u003ccode\u003e\u0026quot;foo\u0026quot;\u003c/code\u003e\nand a short description. This \u003ccode\u003eflag.String\u003c/code\u003e function\nreturns a string pointer (not a string value);\nwe\u0026rsquo;ll see how to use this pointer below.\u003c/p\u003e\n",
          "code": "\n    wordPtr := flag.String(\"word\", \"foo\", \"a string\")",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ewordPtr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eflag\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;word\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;foo\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;a string\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    wordPtr := flag.String(\"word\", \"foo\", \"a string\")\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "This declares `numb` and `fork` flags, using a\nsimilar approach to the `word` flag.",
          "docs_rendered": "\u003cp\u003eThis declares \u003ccode\u003enumb\u003c/code\u003e and \u003ccode\u003efork\u003c/code\u003e flags, using a\nsimilar approach to the \u003ccode\u003eword\u003c/code\u003e flag.\u003c/p\u003e\n",
          "code": "\n    numbPtr := flag.Int(\"numb\", 42, \"an int\")\n    boolPtr := flag.Bool(\"fork\", false, \"a bool\")",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003enumbPtr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eflag\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;numb\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;an int\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eboolPtr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eflag\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eBool\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;fork\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;a bool\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    numbPtr := flag.Int(\"numb\", 42, \"an int\")\n    boolPtr := flag.Bool(\"fork\", false, \"a bool\")\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "It's also possible to declare an option that uses an\nexisting var declared elsewhere in the program.\nNote that we need to pass in a pointer to the flag\ndeclaration function.",
          "docs_rendered": "\u003cp\u003eIt\u0026rsquo;s also possible to declare an option that uses an\nexisting var declared elsewhere in the program.\nNote that we need to pass in a pointer to the flag\ndeclaration function.\u003c/p\u003e\n",
          "code": "\n    var svar string\n    flag.StringVar(\u0026svar, \"svar\", \"bar\", \"a string var\")",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003esvar\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eflag\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eStringVar\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003esvar\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;svar\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;bar\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;a string var\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    var svar string\n    flag.StringVar(\u0026svar, \"svar\", \"bar\", \"a string var\")\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Once all flags are declared, call `flag.Parse()`\nto execute the command-line parsing.",
          "docs_rendered": "\u003cp\u003eOnce all flags are declared, call \u003ccode\u003eflag.Parse()\u003c/code\u003e\nto execute the command-line parsing.\u003c/p\u003e\n",
          "code": "\n    flag.Parse()",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003eflag\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eParse\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    flag.Parse()\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Here we'll just dump out the parsed options and\nany trailing positional arguments. Note that we\nneed to dereference the pointers with e.g. `*wordPtr`\nto get the actual option values.",
          "docs_rendered": "\u003cp\u003eHere we\u0026rsquo;ll just dump out the parsed options and\nany trailing positional arguments. Note that we\nneed to dereference the pointers with e.g. \u003ccode\u003e*wordPtr\u003c/code\u003e\nto get the actual option values.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(\"word:\", *wordPtr)\n    fmt.Println(\"numb:\", *numbPtr)\n    fmt.Println(\"fork:\", *boolPtr)\n    fmt.Println(\"svar:\", svar)\n    fmt.Println(\"tail:\", flag.Args())\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;word:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003ewordPtr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;numb:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003enumbPtr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;fork:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003eboolPtr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;svar:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003esvar\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;tail:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eflag\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eArgs\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(\"word:\", *wordPtr)\n    fmt.Println(\"numb:\", *numbPtr)\n    fmt.Println(\"fork:\", *boolPtr)\n    fmt.Println(\"svar:\", svar)\n    fmt.Println(\"tail:\", flag.Args())\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "To experiment with the command-line flags program it's\nbest to first compile it and then run the resulting\nbinary directly.",
          "docs_rendered": "\u003cp\u003eTo experiment with the command-line flags program it\u0026rsquo;s\nbest to first compile it and then run the resulting\nbinary directly.\u003c/p\u003e\n",
          "code": "\n$ go build command-line-flags.go",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go build command-line-flags.go\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Try out the built program by first giving it values for\nall flags.",
          "docs_rendered": "\u003cp\u003eTry out the built program by first giving it values for\nall flags.\u003c/p\u003e\n",
          "code": "\n$ ./command-line-flags -word=opt -numb=7 -fork -svar=flag\nword: opt\nnumb: 7\nfork: true\nsvar: flag\ntail: []",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e ./command-line-flags -word\u003cspan class=\"o\"\u003e=\u003c/span\u003eopt -numb\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"m\"\u003e7\u003c/span\u003e -fork -svar\u003cspan class=\"o\"\u003e=\u003c/span\u003eflag\n\u003cspan class=\"go\"\u003eword: opt\u003c/span\u003e\n\u003cspan class=\"go\"\u003enumb: 7\u003c/span\u003e\n\u003cspan class=\"go\"\u003efork: true\u003c/span\u003e\n\u003cspan class=\"go\"\u003esvar: flag\u003c/span\u003e\n\u003cspan class=\"go\"\u003etail: []\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Note that if you omit flags they automatically take\ntheir default values.",
          "docs_rendered": "\u003cp\u003eNote that if you omit flags they automatically take\ntheir default values.\u003c/p\u003e\n",
          "code": "\n$ ./command-line-flags -word=opt\nword: opt\nnumb: 42\nfork: false\nsvar: bar\ntail: []",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e ./command-line-flags -word\u003cspan class=\"o\"\u003e=\u003c/span\u003eopt\n\u003cspan class=\"go\"\u003eword: opt\u003c/span\u003e\n\u003cspan class=\"go\"\u003enumb: 42\u003c/span\u003e\n\u003cspan class=\"go\"\u003efork: false\u003c/span\u003e\n\u003cspan class=\"go\"\u003esvar: bar\u003c/span\u003e\n\u003cspan class=\"go\"\u003etail: []\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Trailing positional arguments can be provided after\nany flags.",
          "docs_rendered": "\u003cp\u003eTrailing positional arguments can be provided after\nany flags.\u003c/p\u003e\n",
          "code": "\n$ ./command-line-flags -word=opt a1 a2 a3\nword: opt\n...\ntail: [a1 a2 a3]",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e ./command-line-flags -word\u003cspan class=\"o\"\u003e=\u003c/span\u003eopt a1 a2 a3\n\u003cspan class=\"go\"\u003eword: opt\u003c/span\u003e\n\u003cspan class=\"go\"\u003e...\u003c/span\u003e\n\u003cspan class=\"go\"\u003etail: [a1 a2 a3]\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Note that the `flag` package requires all flags to\nappear before positional arguments (otherwise the flags\nwill be interpreted as positional arguments).",
          "docs_rendered": "\u003cp\u003eNote that the \u003ccode\u003eflag\u003c/code\u003e package requires all flags to\nappear before positional arguments (otherwise the flags\nwill be interpreted as positional arguments).\u003c/p\u003e\n",
          "code": "\n$ ./command-line-flags -word=opt a1 a2 a3 -numb=7\nword: opt\nnumb: 42\nfork: false\nsvar: bar\ntail: [a1 a2 a3 -numb=7]",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e ./command-line-flags -word\u003cspan class=\"o\"\u003e=\u003c/span\u003eopt a1 a2 a3 -numb\u003cspan class=\"o\"\u003e=\u003c/span\u003e7\n\u003cspan class=\"go\"\u003eword: opt\u003c/span\u003e\n\u003cspan class=\"go\"\u003enumb: 42\u003c/span\u003e\n\u003cspan class=\"go\"\u003efork: false\u003c/span\u003e\n\u003cspan class=\"go\"\u003esvar: bar\u003c/span\u003e\n\u003cspan class=\"go\"\u003etail: [a1 a2 a3 -numb=7]\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Use `-h` or `--help` flags to get automatically\ngenerated help text for the command-line program.",
          "docs_rendered": "\u003cp\u003eUse \u003ccode\u003e-h\u003c/code\u003e or \u003ccode\u003e--help\u003c/code\u003e flags to get automatically\ngenerated help text for the command-line program.\u003c/p\u003e\n",
          "code": "\n$ ./command-line-flags -h\nUsage of ./command-line-flags:\n  -fork=false: a bool\n  -numb=42: an int\n  -svar=\"bar\": a string var\n  -word=\"foo\": a string",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e ./command-line-flags -h\n\u003cspan class=\"go\"\u003eUsage of ./command-line-flags:\u003c/span\u003e\n\u003cspan class=\"go\"\u003e  -fork=false: a bool\u003c/span\u003e\n\u003cspan class=\"go\"\u003e  -numb=42: an int\u003c/span\u003e\n\u003cspan class=\"go\"\u003e  -svar=\u0026quot;bar\u0026quot;: a string var\u003c/span\u003e\n\u003cspan class=\"go\"\u003e  -word=\u0026quot;foo\u0026quot;: a string\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "If you provide a flag that wasn't specified to the\n`flag` package, the program will print an error message\nand show the help text again.",
          "docs_rendered": "\u003cp\u003eIf you provide a flag that wasn\u0026rsquo;t specified to the\n\u003ccode\u003eflag\u003c/code\u003e package, the program will print an error message\nand show the help text again.\u003c/p\u003e\n",
          "code": "\n$ ./command-line-flags -wat\nflag provided but not defined: -wat\nUsage of ./command-line-flags:\n...",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e ./command-line-flags -wat\n\u003cspan class=\"go\"\u003eflag provided but not defined: -wat\u003c/span\u003e\n\u003cspan class=\"go\"\u003eUsage of ./command-line-flags:\u003c/span\u003e\n\u003cspan class=\"go\"\u003e...\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "command-line-subcommands",
    "Name": "Command-Line Subcommands",
    "GoCode": "// Some command-line tools, like the `go` tool or `git`\n// have many *subcommands*, each with its own set of\n// flags. For example, `go build` and `go get` are two\n// different subcommands of the `go` tool.\n// The `flag` package lets us easily define simple\n// subcommands that have their own flags.\n\npackage main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc main() {\n\n\t// We declare a subcommand using the `NewFlagSet`\n\t// function, and proceed to define new flags specific\n\t// for this subcommand.\n\tfooCmd := flag.NewFlagSet(\"foo\", flag.ExitOnError)\n\tfooEnable := fooCmd.Bool(\"enable\", false, \"enable\")\n\tfooName := fooCmd.String(\"name\", \"\", \"name\")\n\n\t// For a different subcommand we can define different\n\t// supported flags.\n\tbarCmd := flag.NewFlagSet(\"bar\", flag.ExitOnError)\n\tbarLevel := barCmd.Int(\"level\", 0, \"level\")\n\n\t// The subcommand is expected as the first argument\n\t// to the program.\n\tif len(os.Args) \u003c 2 {\n\t\tfmt.Println(\"expected 'foo' or 'bar' subcommands\")\n\t\tos.Exit(1)\n\t}\n\n\t// Check which subcommand is invoked.\n\tswitch os.Args[1] {\n\n\t// For every subcommand, we parse its own flags and\n\t// have access to trailing positional arguments.\n\tcase \"foo\":\n\t\tfooCmd.Parse(os.Args[2:])\n\t\tfmt.Println(\"subcommand 'foo'\")\n\t\tfmt.Println(\"  enable:\", *fooEnable)\n\t\tfmt.Println(\"  name:\", *fooName)\n\t\tfmt.Println(\"  tail:\", fooCmd.Args())\n\tcase \"bar\":\n\t\tbarCmd.Parse(os.Args[2:])\n\t\tfmt.Println(\"subcommand 'bar'\")\n\t\tfmt.Println(\"  level:\", *barLevel)\n\t\tfmt.Println(\"  tail:\", barCmd.Args())\n\tdefault:\n\t\tfmt.Println(\"expected 'foo' or 'bar' subcommands\")\n\t\tos.Exit(1)\n\t}\n}\n",
    "GoCodeHash": "eed015f91ba8a8d5a667dfc4dde745e341fded6e",
    "URLHash": "DkvdHKK-XCv",
    "Segs": [
      [
        {
          "docs": "Some command-line tools, like the `go` tool or `git`\nhave many *subcommands*, each with its own set of\nflags. For example, `go build` and `go get` are two\ndifferent subcommands of the `go` tool.\nThe `flag` package lets us easily define simple\nsubcommands that have their own flags.",
          "docs_rendered": "\u003cp\u003eSome command-line tools, like the \u003ccode\u003ego\u003c/code\u003e tool or \u003ccode\u003egit\u003c/code\u003e\nhave many \u003cem\u003esubcommands\u003c/em\u003e, each with its own set of\nflags. For example, \u003ccode\u003ego build\u003c/code\u003e and \u003ccode\u003ego get\u003c/code\u003e are two\ndifferent subcommands of the \u003ccode\u003ego\u003c/code\u003e tool.\nThe \u003ccode\u003eflag\u003c/code\u003e package lets us easily define simple\nsubcommands that have their own flags.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"flag\"\n    \"fmt\"\n    \"os\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;flag\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;os\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"flag\"\n    \"fmt\"\n    \"os\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "We declare a subcommand using the `NewFlagSet`\nfunction, and proceed to define new flags specific\nfor this subcommand.",
          "docs_rendered": "\u003cp\u003eWe declare a subcommand using the \u003ccode\u003eNewFlagSet\u003c/code\u003e\nfunction, and proceed to define new flags specific\nfor this subcommand.\u003c/p\u003e\n",
          "code": "\n    fooCmd := flag.NewFlagSet(\"foo\", flag.ExitOnError)\n    fooEnable := fooCmd.Bool(\"enable\", false, \"enable\")\n    fooName := fooCmd.String(\"name\", \"\", \"name\")",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efooCmd\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eflag\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eNewFlagSet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;foo\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eflag\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eExitOnError\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efooEnable\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003efooCmd\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eBool\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;enable\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;enable\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efooName\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003efooCmd\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;name\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;name\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fooCmd := flag.NewFlagSet(\"foo\", flag.ExitOnError)\n    fooEnable := fooCmd.Bool(\"enable\", false, \"enable\")\n    fooName := fooCmd.String(\"name\", \"\", \"name\")\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "For a different subcommand we can define different\nsupported flags.",
          "docs_rendered": "\u003cp\u003eFor a different subcommand we can define different\nsupported flags.\u003c/p\u003e\n",
          "code": "\n    barCmd := flag.NewFlagSet(\"bar\", flag.ExitOnError)\n    barLevel := barCmd.Int(\"level\", 0, \"level\")",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ebarCmd\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eflag\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eNewFlagSet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;bar\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eflag\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eExitOnError\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ebarLevel\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003ebarCmd\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eInt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;level\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;level\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    barCmd := flag.NewFlagSet(\"bar\", flag.ExitOnError)\n    barLevel := barCmd.Int(\"level\", 0, \"level\")\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "The subcommand is expected as the first argument\nto the program.",
          "docs_rendered": "\u003cp\u003eThe subcommand is expected as the first argument\nto the program.\u003c/p\u003e\n",
          "code": "\n    if len(os.Args) \u003c 2 {\n        fmt.Println(\"expected 'foo' or 'bar' subcommands\")\n        os.Exit(1)\n    }",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nb\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eArgs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;expected \u0026#39;foo\u0026#39; or \u0026#39;bar\u0026#39; subcommands\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eExit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    if len(os.Args) \u003c 2 {\n        fmt.Println(\"expected 'foo' or 'bar' subcommands\")\n        os.Exit(1)\n    }\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Check which subcommand is invoked.",
          "docs_rendered": "\u003cp\u003eCheck which subcommand is invoked.\u003c/p\u003e\n",
          "code": "\n    switch os.Args[1] {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003eswitch\u003c/span\u003e \u003cspan class=\"nx\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eArgs\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    switch os.Args[1] {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "For every subcommand, we parse its own flags and\nhave access to trailing positional arguments.",
          "docs_rendered": "\u003cp\u003eFor every subcommand, we parse its own flags and\nhave access to trailing positional arguments.\u003c/p\u003e\n",
          "code": "\n    case \"foo\":\n        fooCmd.Parse(os.Args[2:])\n        fmt.Println(\"subcommand 'foo'\")\n        fmt.Println(\"  enable:\", *fooEnable)\n        fmt.Println(\"  name:\", *fooName)\n        fmt.Println(\"  tail:\", fooCmd.Args())\n    case \"bar\":\n        barCmd.Parse(os.Args[2:])\n        fmt.Println(\"subcommand 'bar'\")\n        fmt.Println(\"  level:\", *barLevel)\n        fmt.Println(\"  tail:\", barCmd.Args())\n    default:\n        fmt.Println(\"expected 'foo' or 'bar' subcommands\")\n        os.Exit(1)\n    }\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;foo\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efooCmd\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eParse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eArgs\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e:])\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;subcommand \u0026#39;foo\u0026#39;\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;  enable:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003efooEnable\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;  name:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003efooName\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;  tail:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003efooCmd\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eArgs\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;bar\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003ebarCmd\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eParse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eArgs\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e:])\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;subcommand \u0026#39;bar\u0026#39;\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;  level:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003ebarLevel\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;  tail:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ebarCmd\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eArgs\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;expected \u0026#39;foo\u0026#39; or \u0026#39;bar\u0026#39; subcommands\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eExit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    case \"foo\":\n        fooCmd.Parse(os.Args[2:])\n        fmt.Println(\"subcommand 'foo'\")\n        fmt.Println(\"  enable:\", *fooEnable)\n        fmt.Println(\"  name:\", *fooName)\n        fmt.Println(\"  tail:\", fooCmd.Args())\n    case \"bar\":\n        barCmd.Parse(os.Args[2:])\n        fmt.Println(\"subcommand 'bar'\")\n        fmt.Println(\"  level:\", *barLevel)\n        fmt.Println(\"  tail:\", barCmd.Args())\n    default:\n        fmt.Println(\"expected 'foo' or 'bar' subcommands\")\n        os.Exit(1)\n    }\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "",
          "docs_rendered": "",
          "code": "$ go build command-line-subcommands.go ",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go build command-line-subcommands.go \n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "First invoke the foo subcommand.",
          "docs_rendered": "\u003cp\u003eFirst invoke the foo subcommand.\u003c/p\u003e\n",
          "code": "\n$ ./command-line-subcommands foo -enable -name=joe a1 a2\nsubcommand 'foo'\n  enable: true\n  name: joe\n  tail: [a1 a2]",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e ./command-line-subcommands foo -enable -name\u003cspan class=\"o\"\u003e=\u003c/span\u003ejoe a1 a2\n\u003cspan class=\"go\"\u003esubcommand \u0026#39;foo\u0026#39;\u003c/span\u003e\n\u003cspan class=\"go\"\u003e  enable: true\u003c/span\u003e\n\u003cspan class=\"go\"\u003e  name: joe\u003c/span\u003e\n\u003cspan class=\"go\"\u003e  tail: [a1 a2]\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Now try bar.",
          "docs_rendered": "\u003cp\u003eNow try bar.\u003c/p\u003e\n",
          "code": "\n$ ./command-line-subcommands bar -level 8 a1\nsubcommand 'bar'\n  level: 8\n  tail: [a1]",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e ./command-line-subcommands bar -level \u003cspan class=\"m\"\u003e8\u003c/span\u003e a1\n\u003cspan class=\"go\"\u003esubcommand \u0026#39;bar\u0026#39;\u003c/span\u003e\n\u003cspan class=\"go\"\u003e  level: 8\u003c/span\u003e\n\u003cspan class=\"go\"\u003e  tail: [a1]\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "But bar won't accept foo's flags.",
          "docs_rendered": "\u003cp\u003eBut bar won\u0026rsquo;t accept foo\u0026rsquo;s flags.\u003c/p\u003e\n",
          "code": "\n$ ./command-line-subcommands bar -enable a1\nflag provided but not defined: -enable\nUsage of bar:\n  -level int\n        level",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e ./command-line-subcommands bar -enable a1\n\u003cspan class=\"go\"\u003eflag provided but not defined: -enable\u003c/span\u003e\n\u003cspan class=\"go\"\u003eUsage of bar:\u003c/span\u003e\n\u003cspan class=\"go\"\u003e  -level int\u003c/span\u003e\n\u003cspan class=\"go\"\u003e        level\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Next we'll look at environment variables, another common\nway to parameterize programs.",
          "docs_rendered": "\u003cp\u003eNext we\u0026rsquo;ll look at environment variables, another common\nway to parameterize programs.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "environment-variables",
    "Name": "Environment Variables",
    "GoCode": "// [Environment variables](http://en.wikipedia.org/wiki/Environment_variable)\n// are a universal mechanism for [conveying configuration\n// information to Unix programs](http://www.12factor.net/config).\n// Let's look at how to set, get, and list environment variables.\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\n\t// To set a key/value pair, use `os.Setenv`. To get a\n\t// value for a key, use `os.Getenv`. This will return\n\t// an empty string if the key isn't present in the\n\t// environment.\n\tos.Setenv(\"FOO\", \"1\")\n\tfmt.Println(\"FOO:\", os.Getenv(\"FOO\"))\n\tfmt.Println(\"BAR:\", os.Getenv(\"BAR\"))\n\n\t// Use `os.Environ` to list all key/value pairs in the\n\t// environment. This returns a slice of strings in the\n\t// form `KEY=value`. You can `strings.SplitN` them to\n\t// get the key and value. Here we print all the keys.\n\tfmt.Println()\n\tfor _, e := range os.Environ() {\n\t\tpair := strings.SplitN(e, \"=\", 2)\n\t\tfmt.Println(pair[0])\n\t}\n}\n",
    "GoCodeHash": "bee983e7820d64dec5331dc706c08f6135b5c632",
    "URLHash": "KuD8tDyB4lQ",
    "Segs": [
      [
        {
          "docs": "[Environment variables](http://en.wikipedia.org/wiki/Environment_variable)\nare a universal mechanism for [conveying configuration\ninformation to Unix programs](http://www.12factor.net/config).\nLet's look at how to set, get, and list environment variables.",
          "docs_rendered": "\u003cp\u003e\u003ca href=\"http://en.wikipedia.org/wiki/Environment_variable\"\u003eEnvironment variables\u003c/a\u003e\nare a universal mechanism for \u003ca href=\"http://www.12factor.net/config\"\u003econveying configuration\ninformation to Unix programs\u003c/a\u003e.\nLet\u0026rsquo;s look at how to set, get, and list environment variables.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"fmt\"\n    \"os\"\n    \"strings\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;os\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;strings\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"fmt\"\n    \"os\"\n    \"strings\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "To set a key/value pair, use `os.Setenv`. To get a\nvalue for a key, use `os.Getenv`. This will return\nan empty string if the key isn't present in the\nenvironment.",
          "docs_rendered": "\u003cp\u003eTo set a key/value pair, use \u003ccode\u003eos.Setenv\u003c/code\u003e. To get a\nvalue for a key, use \u003ccode\u003eos.Getenv\u003c/code\u003e. This will return\nan empty string if the key isn\u0026rsquo;t present in the\nenvironment.\u003c/p\u003e\n",
          "code": "\n    os.Setenv(\"FOO\", \"1\")\n    fmt.Println(\"FOO:\", os.Getenv(\"FOO\"))\n    fmt.Println(\"BAR:\", os.Getenv(\"BAR\"))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSetenv\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;FOO\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;1\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;FOO:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eGetenv\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;FOO\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;BAR:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eGetenv\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;BAR\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    os.Setenv(\"FOO\", \"1\")\n    fmt.Println(\"FOO:\", os.Getenv(\"FOO\"))\n    fmt.Println(\"BAR:\", os.Getenv(\"BAR\"))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Use `os.Environ` to list all key/value pairs in the\nenvironment. This returns a slice of strings in the\nform `KEY=value`. You can `strings.SplitN` them to\nget the key and value. Here we print all the keys.",
          "docs_rendered": "\u003cp\u003eUse \u003ccode\u003eos.Environ\u003c/code\u003e to list all key/value pairs in the\nenvironment. This returns a slice of strings in the\nform \u003ccode\u003eKEY=value\u003c/code\u003e. You can \u003ccode\u003estrings.SplitN\u003c/code\u003e them to\nget the key and value. Here we print all the keys.\u003c/p\u003e\n",
          "code": "\n    fmt.Println()\n    for _, e := range os.Environ() {\n        pair := strings.SplitN(e, \"=\", 2)\n        fmt.Println(pair[0])\n    }\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"k\"\u003erange\u003c/span\u003e \u003cspan class=\"nx\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eEnviron\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003epair\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003estrings\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSplitN\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;=\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003epair\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println()\n    for _, e := range os.Environ() {\n        pair := strings.SplitN(e, \"=\", 2)\n        fmt.Println(pair[0])\n    }\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "Running the program shows that we pick up the value\nfor `FOO` that we set in the program, but that\n`BAR` is empty.",
          "docs_rendered": "\u003cp\u003eRunning the program shows that we pick up the value\nfor \u003ccode\u003eFOO\u003c/code\u003e that we set in the program, but that\n\u003ccode\u003eBAR\u003c/code\u003e is empty.\u003c/p\u003e\n",
          "code": "\n$ go run environment-variables.go\nFOO: 1\nBAR: ",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run environment-variables.go\n\u003cspan class=\"go\"\u003eFOO: 1\u003c/span\u003e\n\u003cspan class=\"go\"\u003eBAR: \u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "The list of keys in the environment will depend on your\nparticular machine.",
          "docs_rendered": "\u003cp\u003eThe list of keys in the environment will depend on your\nparticular machine.\u003c/p\u003e\n",
          "code": "\nTERM_PROGRAM\nPATH\nSHELL\n...",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"go\"\u003eTERM_PROGRAM\u003c/span\u003e\n\u003cspan class=\"go\"\u003ePATH\u003c/span\u003e\n\u003cspan class=\"go\"\u003eSHELL\u003c/span\u003e\n\u003cspan class=\"go\"\u003e...\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "If we set `BAR` in the environment first, the running\nprogram picks that value up.",
          "docs_rendered": "\u003cp\u003eIf we set \u003ccode\u003eBAR\u003c/code\u003e in the environment first, the running\nprogram picks that value up.\u003c/p\u003e\n",
          "code": "\n$ BAR=2 go run environment-variables.go\nFOO: 1\nBAR: 2\n...",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e \u003cspan class=\"nv\"\u003eBAR\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"m\"\u003e2\u003c/span\u003e go run environment-variables.go\n\u003cspan class=\"go\"\u003eFOO: 1\u003c/span\u003e\n\u003cspan class=\"go\"\u003eBAR: 2\u003c/span\u003e\n\u003cspan class=\"go\"\u003e...\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "http-clients",
    "Name": "HTTP Clients",
    "GoCode": "// The Go standard library comes with excellent support\n// for HTTP clients and servers in the `net/http`\n// package. In this example we'll use it to issue simple\n// HTTP requests.\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc main() {\n\n\t// Issue an HTTP GET request to a server. `http.Get` is a\n\t// convenient shortcut around creating an `http.Client`\n\t// object and calling its `Get` method; it uses the\n\t// `http.DefaultClient` object which has useful default\n\t// settings.\n\tresp, err := http.Get(\"http://gobyexample.com\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer resp.Body.Close()\n\n\t// Print the HTTP response status.\n\tfmt.Println(\"Response status:\", resp.Status)\n\n\t// Print the first 5 lines of the response body.\n\tscanner := bufio.NewScanner(resp.Body)\n\tfor i := 0; scanner.Scan() \u0026\u0026 i \u003c 5; i++ {\n\t\tfmt.Println(scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\tpanic(err)\n\t}\n}\n",
    "GoCodeHash": "fbc80f8cfcd34e9daa3c52c23f6720f6ef7019dc",
    "URLHash": "kHCcVLoz7nd",
    "Segs": [
      [
        {
          "docs": "The Go standard library comes with excellent support\nfor HTTP clients and servers in the `net/http`\npackage. In this example we'll use it to issue simple\nHTTP requests.",
          "docs_rendered": "\u003cp\u003eThe Go standard library comes with excellent support\nfor HTTP clients and servers in the \u003ccode\u003enet/http\u003c/code\u003e\npackage. In this example we\u0026rsquo;ll use it to issue simple\nHTTP requests.\u003c/p\u003e\n",
          "code": "\npackage main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"bufio\"\n    \"fmt\"\n    \"net/http\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;bufio\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;net/http\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"bufio\"\n    \"fmt\"\n    \"net/http\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Issue an HTTP GET request to a server. `http.Get` is a\nconvenient shortcut around creating an `http.Client`\nobject and calling its `Get` method; it uses the\n`http.DefaultClient` object which has useful default\nsettings.",
          "docs_rendered": "\u003cp\u003eIssue an HTTP GET request to a server. \u003ccode\u003ehttp.Get\u003c/code\u003e is a\nconvenient shortcut around creating an \u003ccode\u003ehttp.Client\u003c/code\u003e\nobject and calling its \u003ccode\u003eGet\u003c/code\u003e method; it uses the\n\u003ccode\u003ehttp.DefaultClient\u003c/code\u003e object which has useful default\nsettings.\u003c/p\u003e\n",
          "code": "\n    resp, err := http.Get(\"http://gobyexample.com\")\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003eresp\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003ehttp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eGet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;http://gobyexample.com\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003epanic\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003edefer\u003c/span\u003e \u003cspan class=\"nx\"\u003eresp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eBody\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eClose\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    resp, err := http.Get(\"http://gobyexample.com\")\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Print the HTTP response status.",
          "docs_rendered": "\u003cp\u003ePrint the HTTP response status.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(\"Response status:\", resp.Status)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Response status:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eresp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eStatus\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(\"Response status:\", resp.Status)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Print the first 5 lines of the response body.",
          "docs_rendered": "\u003cp\u003ePrint the first 5 lines of the response body.\u003c/p\u003e\n",
          "code": "\n    scanner := bufio.NewScanner(resp.Body)\n    for i := 0; scanner.Scan() \u0026\u0026 i \u003c 5; i++ {\n        fmt.Println(scanner.Text())\n    }",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003escanner\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003ebufio\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eNewScanner\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eresp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eBody\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003escanner\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eScan\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003escanner\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eText\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    scanner := bufio.NewScanner(resp.Body)\n    for i := 0; scanner.Scan() \u0026\u0026 i \u003c 5; i++ {\n        fmt.Println(scanner.Text())\n    }\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "    if err := scanner.Err(); err != nil {\n        panic(err)\n    }\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003escanner\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eErr\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003epanic\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    if err := scanner.Err(); err != nil {\n        panic(err)\n    }\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "",
          "docs_rendered": "",
          "code": "$ go run http-clients.go\nResponse status: 200 OK\n\u003c!DOCTYPE html\u003e\n\u003chtml\u003e\n  \u003chead\u003e\n    \u003cmeta charset=\"utf-8\"\u003e\n    \u003ctitle\u003eGo by Example\u003c/title\u003e",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run http-clients.go\n\u003cspan class=\"go\"\u003eResponse status: 200 OK\u003c/span\u003e\n\u003cspan class=\"go\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003cspan class=\"go\"\u003e\u0026lt;html\u0026gt;\u003c/span\u003e\n\u003cspan class=\"go\"\u003e  \u0026lt;head\u0026gt;\u003c/span\u003e\n\u003cspan class=\"go\"\u003e    \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt;\u003c/span\u003e\n\u003cspan class=\"go\"\u003e    \u0026lt;title\u0026gt;Go by Example\u0026lt;/title\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "http-servers",
    "Name": "HTTP Servers",
    "GoCode": "// Writing a basic HTTP server is easy using the\n// `net/http` package.\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\n// A fundamental concept in `net/http` servers is\n// *handlers*. A handler is an object implementing the\n// `http.Handler` interface. A common way to write\n// a handler is by using the `http.HandlerFunc` adapter\n// on functions with the appropriate signature.\nfunc hello(w http.ResponseWriter, req *http.Request) {\n\n\t// Functions serving as handlers take a\n\t// `http.ResponseWriter` and a `http.Request` as\n\t// arguments. The response writer is used to fill in the\n\t// HTTP response. Here our simple response is just\n\t// \"hello\\n\".\n\tfmt.Fprintf(w, \"hello\\n\")\n}\n\nfunc headers(w http.ResponseWriter, req *http.Request) {\n\n\t// This handler does something a little more\n\t// sophisticated by reading all the HTTP request\n\t// headers and echoing them into the response body.\n\tfor name, headers := range req.Header {\n\t\tfor _, h := range headers {\n\t\t\tfmt.Fprintf(w, \"%v: %v\\n\", name, h)\n\t\t}\n\t}\n}\n\nfunc main() {\n\n\t// We register our handlers on server routes using the\n\t// `http.HandleFunc` convenience function. It sets up\n\t// the *default router* in the `net/http` package and\n\t// takes a function as an argument.\n\thttp.HandleFunc(\"/hello\", hello)\n\thttp.HandleFunc(\"/headers\", headers)\n\n\t// Finally, we call the `ListenAndServe` with the port\n\t// and a handler. `nil` tells it to use the default\n\t// router we've just set up.\n\thttp.ListenAndServe(\":8090\", nil)\n}\n",
    "GoCodeHash": "7694e4f5c3907e999331bbab9ead9743b6e9c6b7",
    "URLHash": "s3xMMt9Ytry",
    "Segs": [
      [
        {
          "docs": "Writing a basic HTTP server is easy using the\n`net/http` package.",
          "docs_rendered": "\u003cp\u003eWriting a basic HTTP server is easy using the\n\u003ccode\u003enet/http\u003c/code\u003e package.\u003c/p\u003e\n",
          "code": "\npackage main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"fmt\"\n    \"net/http\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;net/http\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"fmt\"\n    \"net/http\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "A fundamental concept in `net/http` servers is\n*handlers*. A handler is an object implementing the\n`http.Handler` interface. A common way to write\na handler is by using the `http.HandlerFunc` adapter\non functions with the appropriate signature.",
          "docs_rendered": "\u003cp\u003eA fundamental concept in \u003ccode\u003enet/http\u003c/code\u003e servers is\n\u003cem\u003ehandlers\u003c/em\u003e. A handler is an object implementing the\n\u003ccode\u003ehttp.Handler\u003c/code\u003e interface. A common way to write\na handler is by using the \u003ccode\u003ehttp.HandlerFunc\u003c/code\u003e adapter\non functions with the appropriate signature.\u003c/p\u003e\n",
          "code": "\nfunc hello(w http.ResponseWriter, req *http.Request) {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003ehello\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ew\u003c/span\u003e \u003cspan class=\"nx\"\u003ehttp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eResponseWriter\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ereq\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003ehttp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func hello(w http.ResponseWriter, req *http.Request) {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Functions serving as handlers take a\n`http.ResponseWriter` and a `http.Request` as\narguments. The response writer is used to fill in the\nHTTP response. Here our simple response is just\n\"hello\\n\".",
          "docs_rendered": "\u003cp\u003eFunctions serving as handlers take a\n\u003ccode\u003ehttp.ResponseWriter\u003c/code\u003e and a \u003ccode\u003ehttp.Request\u003c/code\u003e as\narguments. The response writer is used to fill in the\nHTTP response. Here our simple response is just\n\u0026ldquo;hello\\n\u0026rdquo;.\u003c/p\u003e\n",
          "code": "\n    fmt.Fprintf(w, \"hello\\n\")\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eFprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ew\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;hello\\n\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Fprintf(w, \"hello\\n\")\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func headers(w http.ResponseWriter, req *http.Request) {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003eheaders\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ew\u003c/span\u003e \u003cspan class=\"nx\"\u003ehttp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eResponseWriter\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ereq\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003ehttp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func headers(w http.ResponseWriter, req *http.Request) {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "This handler does something a little more\nsophisticated by reading all the HTTP request\nheaders and echoing them into the response body.",
          "docs_rendered": "\u003cp\u003eThis handler does something a little more\nsophisticated by reading all the HTTP request\nheaders and echoing them into the response body.\u003c/p\u003e\n",
          "code": "\n    for name, headers := range req.Header {\n        for _, h := range headers {\n            fmt.Fprintf(w, \"%v: %v\\n\", name, h)\n        }\n    }\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eheaders\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"k\"\u003erange\u003c/span\u003e \u003cspan class=\"nx\"\u003ereq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eHeader\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eh\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"k\"\u003erange\u003c/span\u003e \u003cspan class=\"nx\"\u003eheaders\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eFprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ew\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;%v: %v\\n\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eh\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    for name, headers := range req.Header {\n        for _, h := range headers {\n            fmt.Fprintf(w, \"%v: %v\\n\", name, h)\n        }\n    }\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "We register our handlers on server routes using the\n`http.HandleFunc` convenience function. It sets up\nthe *default router* in the `net/http` package and\ntakes a function as an argument.",
          "docs_rendered": "\u003cp\u003eWe register our handlers on server routes using the\n\u003ccode\u003ehttp.HandleFunc\u003c/code\u003e convenience function. It sets up\nthe \u003cem\u003edefault router\u003c/em\u003e in the \u003ccode\u003enet/http\u003c/code\u003e package and\ntakes a function as an argument.\u003c/p\u003e\n",
          "code": "\n    http.HandleFunc(\"/hello\", hello)\n    http.HandleFunc(\"/headers\", headers)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ehttp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eHandleFunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;/hello\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ehello\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ehttp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eHandleFunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;/headers\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eheaders\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    http.HandleFunc(\"/hello\", hello)\n    http.HandleFunc(\"/headers\", headers)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Finally, we call the `ListenAndServe` with the port\nand a handler. `nil` tells it to use the default\nrouter we've just set up.",
          "docs_rendered": "\u003cp\u003eFinally, we call the \u003ccode\u003eListenAndServe\u003c/code\u003e with the port\nand a handler. \u003ccode\u003enil\u003c/code\u003e tells it to use the default\nrouter we\u0026rsquo;ve just set up.\u003c/p\u003e\n",
          "code": "\n    http.ListenAndServe(\":8090\", nil)\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ehttp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eListenAndServe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;:8090\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    http.ListenAndServe(\":8090\", nil)\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "Run the server in the background.",
          "docs_rendered": "\u003cp\u003eRun the server in the background.\u003c/p\u003e\n",
          "code": "\n$ go run http-servers.go \u0026",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run http-servers.go \u003cspan class=\"p\"\u003e\u0026amp;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Access the `/hello` route.",
          "docs_rendered": "\u003cp\u003eAccess the \u003ccode\u003e/hello\u003c/code\u003e route.\u003c/p\u003e\n",
          "code": "\n$ curl localhost:8090/hello\nhello",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e curl localhost:8090/hello\n\u003cspan class=\"go\"\u003ehello\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "context",
    "Name": "Context",
    "GoCode": "// In the previous example we looked at setting up a simple\n// [HTTP server](http-servers). HTTP servers are useful for\n// demonstrating the usage of `context.Context` for\n// controlling cancellation. A `Context` carries deadlines,\n// cancellation signals, and other request-scoped values\n// across API boundaries and goroutines.\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n)\n\nfunc hello(w http.ResponseWriter, req *http.Request) {\n\n\t// A `context.Context` is created for each request by\n\t// the `net/http` machinery, and is available with\n\t// the `Context()` method.\n\tctx := req.Context()\n\tfmt.Println(\"server: hello handler started\")\n\tdefer fmt.Println(\"server: hello handler ended\")\n\n\t// Wait for a few seconds before sending a reply to the\n\t// client. This could simulate some work the server is\n\t// doing. While working, keep an eye on the context's\n\t// `Done()` channel for a signal that we should cancel\n\t// the work and return as soon as possible.\n\tselect {\n\tcase \u003c-time.After(10 * time.Second):\n\t\tfmt.Fprintf(w, \"hello\\n\")\n\tcase \u003c-ctx.Done():\n\t\t// The context's `Err()` method returns an error\n\t\t// that explains why the `Done()` channel was\n\t\t// closed.\n\t\terr := ctx.Err()\n\t\tfmt.Println(\"server:\", err)\n\t\tinternalError := http.StatusInternalServerError\n\t\thttp.Error(w, err.Error(), internalError)\n\t}\n}\n\nfunc main() {\n\n\t// As before, we register our handler on the \"/hello\"\n\t// route, and start serving.\n\thttp.HandleFunc(\"/hello\", hello)\n\thttp.ListenAndServe(\":8090\", nil)\n}\n",
    "GoCodeHash": "a9537bfea55bca15d8db1c453e2d9852f9d447e1",
    "URLHash": "0_bu1o8rIBO",
    "Segs": [
      [
        {
          "docs": "In the previous example we looked at setting up a simple\n[HTTP server](http-servers). HTTP servers are useful for\ndemonstrating the usage of `context.Context` for\ncontrolling cancellation. A `Context` carries deadlines,\ncancellation signals, and other request-scoped values\nacross API boundaries and goroutines.",
          "docs_rendered": "\u003cp\u003eIn the previous example we looked at setting up a simple\n\u003ca href=\"http-servers\"\u003eHTTP server\u003c/a\u003e. HTTP servers are useful for\ndemonstrating the usage of \u003ccode\u003econtext.Context\u003c/code\u003e for\ncontrolling cancellation. A \u003ccode\u003eContext\u003c/code\u003e carries deadlines,\ncancellation signals, and other request-scoped values\nacross API boundaries and goroutines.\u003c/p\u003e\n",
          "code": "\npackage main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"fmt\"\n    \"net/http\"\n    \"time\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;net/http\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;time\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"fmt\"\n    \"net/http\"\n    \"time\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func hello(w http.ResponseWriter, req *http.Request) {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003ehello\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ew\u003c/span\u003e \u003cspan class=\"nx\"\u003ehttp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eResponseWriter\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ereq\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003ehttp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func hello(w http.ResponseWriter, req *http.Request) {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "A `context.Context` is created for each request by\nthe `net/http` machinery, and is available with\nthe `Context()` method.",
          "docs_rendered": "\u003cp\u003eA \u003ccode\u003econtext.Context\u003c/code\u003e is created for each request by\nthe \u003ccode\u003enet/http\u003c/code\u003e machinery, and is available with\nthe \u003ccode\u003eContext()\u003c/code\u003e method.\u003c/p\u003e\n",
          "code": "\n    ctx := req.Context()\n    fmt.Println(\"server: hello handler started\")\n    defer fmt.Println(\"server: hello handler ended\")",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ectx\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003ereq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eContext\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;server: hello handler started\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003edefer\u003c/span\u003e \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;server: hello handler ended\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    ctx := req.Context()\n    fmt.Println(\"server: hello handler started\")\n    defer fmt.Println(\"server: hello handler ended\")\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Wait for a few seconds before sending a reply to the\nclient. This could simulate some work the server is\ndoing. While working, keep an eye on the context's\n`Done()` channel for a signal that we should cancel\nthe work and return as soon as possible.",
          "docs_rendered": "\u003cp\u003eWait for a few seconds before sending a reply to the\nclient. This could simulate some work the server is\ndoing. While working, keep an eye on the context\u0026rsquo;s\n\u003ccode\u003eDone()\u003c/code\u003e channel for a signal that we should cancel\nthe work and return as soon as possible.\u003c/p\u003e\n",
          "code": "\n    select {\n    case \u003c-time.After(10 * time.Second):\n        fmt.Fprintf(w, \"hello\\n\")\n    case \u003c-ctx.Done():",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003eselect\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eAfter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSecond\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eFprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ew\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;hello\\n\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan class=\"nx\"\u003ectx\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eDone\u003c/span\u003e\u003cspan class=\"p\"\u003e():\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    select {\n    case \u003c-time.After(10 * time.Second):\n        fmt.Fprintf(w, \"hello\\n\")\n    case \u003c-ctx.Done():\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "The context's `Err()` method returns an error\nthat explains why the `Done()` channel was\nclosed.",
          "docs_rendered": "\u003cp\u003eThe context\u0026rsquo;s \u003ccode\u003eErr()\u003c/code\u003e method returns an error\nthat explains why the \u003ccode\u003eDone()\u003c/code\u003e channel was\nclosed.\u003c/p\u003e\n",
          "code": "\n        err := ctx.Err()\n        fmt.Println(\"server:\", err)\n        internalError := http.StatusInternalServerError\n        http.Error(w, err.Error(), internalError)\n    }\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e        \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003ectx\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eErr\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;server:\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003einternalError\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003ehttp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eStatusInternalServerError\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003ehttp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eError\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ew\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eError\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"nx\"\u003einternalError\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "        err := ctx.Err()\n        fmt.Println(\"server:\", err)\n        internalError := http.StatusInternalServerError\n        http.Error(w, err.Error(), internalError)\n    }\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "As before, we register our handler on the \"/hello\"\nroute, and start serving.",
          "docs_rendered": "\u003cp\u003eAs before, we register our handler on the \u0026ldquo;/hello\u0026rdquo;\nroute, and start serving.\u003c/p\u003e\n",
          "code": "\n    http.HandleFunc(\"/hello\", hello)\n    http.ListenAndServe(\":8090\", nil)\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ehttp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eHandleFunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;/hello\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ehello\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ehttp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eListenAndServe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;:8090\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    http.HandleFunc(\"/hello\", hello)\n    http.ListenAndServe(\":8090\", nil)\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "Run the server in the background.",
          "docs_rendered": "\u003cp\u003eRun the server in the background.\u003c/p\u003e\n",
          "code": "\n$ go run context-in-http-servers.go \u0026",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run context-in-http-servers.go \u003cspan class=\"p\"\u003e\u0026amp;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Simulate a client request to `/hello`, hitting\nCtrl+C shortly after starting to signal\ncancellation.",
          "docs_rendered": "\u003cp\u003eSimulate a client request to \u003ccode\u003e/hello\u003c/code\u003e, hitting\nCtrl+C shortly after starting to signal\ncancellation.\u003c/p\u003e\n",
          "code": "\n$ curl localhost:8090/hello\nserver: hello handler started\n^C\nserver: context canceled\nserver: hello handler ended",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e curl localhost:8090/hello\n\u003cspan class=\"go\"\u003eserver: hello handler started\u003c/span\u003e\n\u003cspan class=\"go\"\u003e^C\u003c/span\u003e\n\u003cspan class=\"go\"\u003eserver: context canceled\u003c/span\u003e\n\u003cspan class=\"go\"\u003eserver: hello handler ended\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "spawning-processes",
    "Name": "Spawning Processes",
    "GoCode": "// Sometimes our Go programs need to spawn other, non-Go\n// processes. For example, the syntax highlighting on this\n// site is [implemented](https://github.com/mmcgrana/gobyexample/blob/master/tools/generate.go)\n// by spawning a [`pygmentize`](http://pygments.org/)\n// process from a Go program. Let's look at a few examples\n// of spawning processes from Go.\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os/exec\"\n)\n\nfunc main() {\n\n\t// We'll start with a simple command that takes no\n\t// arguments or input and just prints something to\n\t// stdout. The `exec.Command` helper creates an object\n\t// to represent this external process.\n\tdateCmd := exec.Command(\"date\")\n\n\t// `.Output` is another helper that handles the common\n\t// case of running a command, waiting for it to finish,\n\t// and collecting its output. If there were no errors,\n\t// `dateOut` will hold bytes with the date info.\n\tdateOut, err := dateCmd.Output()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(\"\u003e date\")\n\tfmt.Println(string(dateOut))\n\n\t// Next we'll look at a slightly more involved case\n\t// where we pipe data to the external process on its\n\t// `stdin` and collect the results from its `stdout`.\n\tgrepCmd := exec.Command(\"grep\", \"hello\")\n\n\t// Here we explicitly grab input/output pipes, start\n\t// the process, write some input to it, read the\n\t// resulting output, and finally wait for the process\n\t// to exit.\n\tgrepIn, _ := grepCmd.StdinPipe()\n\tgrepOut, _ := grepCmd.StdoutPipe()\n\tgrepCmd.Start()\n\tgrepIn.Write([]byte(\"hello grep\\ngoodbye grep\"))\n\tgrepIn.Close()\n\tgrepBytes, _ := ioutil.ReadAll(grepOut)\n\tgrepCmd.Wait()\n\n\t// We omitted error checks in the above example, but\n\t// you could use the usual `if err != nil` pattern for\n\t// all of them. We also only collect the `StdoutPipe`\n\t// results, but you could collect the `StderrPipe` in\n\t// exactly the same way.\n\tfmt.Println(\"\u003e grep hello\")\n\tfmt.Println(string(grepBytes))\n\n\t// Note that when spawning commands we need to\n\t// provide an explicitly delineated command and\n\t// argument array, vs. being able to just pass in one\n\t// command-line string. If you want to spawn a full\n\t// command with a string, you can use `bash`'s `-c`\n\t// option:\n\tlsCmd := exec.Command(\"bash\", \"-c\", \"ls -a -l -h\")\n\tlsOut, err := lsCmd.Output()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(\"\u003e ls -a -l -h\")\n\tfmt.Println(string(lsOut))\n}\n",
    "GoCodeHash": "6a62e3109c483c2b52a99905dc1ba5c8cb2a281b",
    "URLHash": "m2CpSlHPEVq",
    "Segs": [
      [
        {
          "docs": "Sometimes our Go programs need to spawn other, non-Go\nprocesses. For example, the syntax highlighting on this\nsite is [implemented](https://github.com/mmcgrana/gobyexample/blob/master/tools/generate.go)\nby spawning a [`pygmentize`](http://pygments.org/)\nprocess from a Go program. Let's look at a few examples\nof spawning processes from Go.",
          "docs_rendered": "\u003cp\u003eSometimes our Go programs need to spawn other, non-Go\nprocesses. For example, the syntax highlighting on this\nsite is \u003ca href=\"https://github.com/mmcgrana/gobyexample/blob/master/tools/generate.go\"\u003eimplemented\u003c/a\u003e\nby spawning a \u003ca href=\"http://pygments.org/\"\u003e\u003ccode\u003epygmentize\u003c/code\u003e\u003c/a\u003e\nprocess from a Go program. Let\u0026rsquo;s look at a few examples\nof spawning processes from Go.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"fmt\"\n    \"io/ioutil\"\n    \"os/exec\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;io/ioutil\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;os/exec\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"fmt\"\n    \"io/ioutil\"\n    \"os/exec\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "We'll start with a simple command that takes no\narguments or input and just prints something to\nstdout. The `exec.Command` helper creates an object\nto represent this external process.",
          "docs_rendered": "\u003cp\u003eWe\u0026rsquo;ll start with a simple command that takes no\narguments or input and just prints something to\nstdout. The \u003ccode\u003eexec.Command\u003c/code\u003e helper creates an object\nto represent this external process.\u003c/p\u003e\n",
          "code": "\n    dateCmd := exec.Command(\"date\")",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003edateCmd\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eexec\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eCommand\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;date\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    dateCmd := exec.Command(\"date\")\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "`.Output` is another helper that handles the common\ncase of running a command, waiting for it to finish,\nand collecting its output. If there were no errors,\n`dateOut` will hold bytes with the date info.",
          "docs_rendered": "\u003cp\u003e\u003ccode\u003e.Output\u003c/code\u003e is another helper that handles the common\ncase of running a command, waiting for it to finish,\nand collecting its output. If there were no errors,\n\u003ccode\u003edateOut\u003c/code\u003e will hold bytes with the date info.\u003c/p\u003e\n",
          "code": "\n    dateOut, err := dateCmd.Output()\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(\"\u003e date\")\n    fmt.Println(string(dateOut))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003edateOut\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003edateCmd\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eOutput\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003epanic\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;\u0026gt; date\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003edateOut\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    dateOut, err := dateCmd.Output()\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(\"\u003e date\")\n    fmt.Println(string(dateOut))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Next we'll look at a slightly more involved case\nwhere we pipe data to the external process on its\n`stdin` and collect the results from its `stdout`.",
          "docs_rendered": "\u003cp\u003eNext we\u0026rsquo;ll look at a slightly more involved case\nwhere we pipe data to the external process on its\n\u003ccode\u003estdin\u003c/code\u003e and collect the results from its \u003ccode\u003estdout\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n    grepCmd := exec.Command(\"grep\", \"hello\")",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003egrepCmd\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eexec\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eCommand\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;grep\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;hello\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    grepCmd := exec.Command(\"grep\", \"hello\")\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Here we explicitly grab input/output pipes, start\nthe process, write some input to it, read the\nresulting output, and finally wait for the process\nto exit.",
          "docs_rendered": "\u003cp\u003eHere we explicitly grab input/output pipes, start\nthe process, write some input to it, read the\nresulting output, and finally wait for the process\nto exit.\u003c/p\u003e\n",
          "code": "\n    grepIn, _ := grepCmd.StdinPipe()\n    grepOut, _ := grepCmd.StdoutPipe()\n    grepCmd.Start()\n    grepIn.Write([]byte(\"hello grep\\ngoodbye grep\"))\n    grepIn.Close()\n    grepBytes, _ := ioutil.ReadAll(grepOut)\n    grepCmd.Wait()",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003egrepIn\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003egrepCmd\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eStdinPipe\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003egrepOut\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003egrepCmd\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eStdoutPipe\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003egrepCmd\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eStart\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003egrepIn\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eWrite\u003c/span\u003e\u003cspan class=\"p\"\u003e([]\u003c/span\u003e\u003cspan class=\"nb\"\u003ebyte\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;hello grep\\ngoodbye grep\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003egrepIn\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eClose\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003egrepBytes\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eioutil\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eReadAll\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003egrepOut\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003egrepCmd\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eWait\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    grepIn, _ := grepCmd.StdinPipe()\n    grepOut, _ := grepCmd.StdoutPipe()\n    grepCmd.Start()\n    grepIn.Write([]byte(\"hello grep\\ngoodbye grep\"))\n    grepIn.Close()\n    grepBytes, _ := ioutil.ReadAll(grepOut)\n    grepCmd.Wait()\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "We omitted error checks in the above example, but\nyou could use the usual `if err != nil` pattern for\nall of them. We also only collect the `StdoutPipe`\nresults, but you could collect the `StderrPipe` in\nexactly the same way.",
          "docs_rendered": "\u003cp\u003eWe omitted error checks in the above example, but\nyou could use the usual \u003ccode\u003eif err != nil\u003c/code\u003e pattern for\nall of them. We also only collect the \u003ccode\u003eStdoutPipe\u003c/code\u003e\nresults, but you could collect the \u003ccode\u003eStderrPipe\u003c/code\u003e in\nexactly the same way.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(\"\u003e grep hello\")\n    fmt.Println(string(grepBytes))",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;\u0026gt; grep hello\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003egrepBytes\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(\"\u003e grep hello\")\n    fmt.Println(string(grepBytes))\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Note that when spawning commands we need to\nprovide an explicitly delineated command and\nargument array, vs. being able to just pass in one\ncommand-line string. If you want to spawn a full\ncommand with a string, you can use `bash`'s `-c`\noption:",
          "docs_rendered": "\u003cp\u003eNote that when spawning commands we need to\nprovide an explicitly delineated command and\nargument array, vs. being able to just pass in one\ncommand-line string. If you want to spawn a full\ncommand with a string, you can use \u003ccode\u003ebash\u003c/code\u003e\u0026rsquo;s \u003ccode\u003e-c\u003c/code\u003e\noption:\u003c/p\u003e\n",
          "code": "\n    lsCmd := exec.Command(\"bash\", \"-c\", \"ls -a -l -h\")\n    lsOut, err := lsCmd.Output()\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(\"\u003e ls -a -l -h\")\n    fmt.Println(string(lsOut))\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003elsCmd\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eexec\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eCommand\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;bash\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;-c\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;ls -a -l -h\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003elsOut\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003elsCmd\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eOutput\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003epanic\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;\u0026gt; ls -a -l -h\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003elsOut\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    lsCmd := exec.Command(\"bash\", \"-c\", \"ls -a -l -h\")\n    lsOut, err := lsCmd.Output()\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(\"\u003e ls -a -l -h\")\n    fmt.Println(string(lsOut))\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "The spawned programs return output that is the same\nas if we had run them directly from the command-line.",
          "docs_rendered": "\u003cp\u003eThe spawned programs return output that is the same\nas if we had run them directly from the command-line.\u003c/p\u003e\n",
          "code": "\n$ go run spawning-processes.go \n\u003e date\nWed Oct 10 09:53:11 PDT 2012",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run spawning-processes.go \n\u003cspan class=\"gp\"\u003e\u0026gt;\u003c/span\u003e date\n\u003cspan class=\"go\"\u003eWed Oct 10 09:53:11 PDT 2012\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "\u003e grep hello\nhello grep",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e\u0026gt;\u003c/span\u003e grep hello\n\u003cspan class=\"go\"\u003ehello grep\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "\u003e ls -a -l -h\ndrwxr-xr-x  4 mark 136B Oct 3 16:29 .\ndrwxr-xr-x 91 mark 3.0K Oct 3 12:50 ..\n-rw-r--r--  1 mark 1.3K Oct 3 16:28 spawning-processes.go",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e\u0026gt;\u003c/span\u003e ls -a -l -h\n\u003cspan class=\"go\"\u003edrwxr-xr-x  4 mark 136B Oct 3 16:29 .\u003c/span\u003e\n\u003cspan class=\"go\"\u003edrwxr-xr-x 91 mark 3.0K Oct 3 12:50 ..\u003c/span\u003e\n\u003cspan class=\"go\"\u003e-rw-r--r--  1 mark 1.3K Oct 3 16:28 spawning-processes.go\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "execing-processes",
    "Name": "Exec'ing Processes",
    "GoCode": "// In the previous example we looked at\n// [spawning external processes](spawning-processes). We\n// do this when we need an external process accessible to\n// a running Go process. Sometimes we just want to\n// completely replace the current Go process with another\n// (perhaps non-Go) one. To do this we'll use Go's\n// implementation of the classic\n// \u003ca href=\"http://en.wikipedia.org/wiki/Exec_(operating_system)\"\u003e\u003ccode\u003eexec\u003c/code\u003e\u003c/a\u003e\n// function.\n\npackage main\n\nimport (\n\t\"os\"\n\t\"os/exec\"\n\t\"syscall\"\n)\n\nfunc main() {\n\n\t// For our example we'll exec `ls`. Go requires an\n\t// absolute path to the binary we want to execute, so\n\t// we'll use `exec.LookPath` to find it (probably\n\t// `/bin/ls`).\n\tbinary, lookErr := exec.LookPath(\"ls\")\n\tif lookErr != nil {\n\t\tpanic(lookErr)\n\t}\n\n\t// `Exec` requires arguments in slice form (as\n\t// apposed to one big string). We'll give `ls` a few\n\t// common arguments. Note that the first argument should\n\t// be the program name.\n\targs := []string{\"ls\", \"-a\", \"-l\", \"-h\"}\n\n\t// `Exec` also needs a set of [environment variables](environment-variables)\n\t// to use. Here we just provide our current\n\t// environment.\n\tenv := os.Environ()\n\n\t// Here's the actual `syscall.Exec` call. If this call is\n\t// successful, the execution of our process will end\n\t// here and be replaced by the `/bin/ls -a -l -h`\n\t// process. If there is an error we'll get a return\n\t// value.\n\texecErr := syscall.Exec(binary, args, env)\n\tif execErr != nil {\n\t\tpanic(execErr)\n\t}\n}\n",
    "GoCodeHash": "7a8185c4b55c20a678f1e51698f0f4b6e25d4536",
    "URLHash": "T3da5euHejy",
    "Segs": [
      [
        {
          "docs": "In the previous example we looked at\n[spawning external processes](spawning-processes). We\ndo this when we need an external process accessible to\na running Go process. Sometimes we just want to\ncompletely replace the current Go process with another\n(perhaps non-Go) one. To do this we'll use Go's\nimplementation of the classic\n\u003ca href=\"http://en.wikipedia.org/wiki/Exec_(operating_system)\"\u003e\u003ccode\u003eexec\u003c/code\u003e\u003c/a\u003e\nfunction.",
          "docs_rendered": "\u003cp\u003eIn the previous example we looked at\n\u003ca href=\"spawning-processes\"\u003espawning external processes\u003c/a\u003e. We\ndo this when we need an external process accessible to\na running Go process. Sometimes we just want to\ncompletely replace the current Go process with another\n(perhaps non-Go) one. To do this we\u0026rsquo;ll use Go\u0026rsquo;s\nimplementation of the classic\n\u003ca href=\"http://en.wikipedia.org/wiki/Exec_(operating_system)\"\u003e\u003ccode\u003eexec\u003c/code\u003e\u003c/a\u003e\nfunction.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"os\"\n    \"os/exec\"\n    \"syscall\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;os\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;os/exec\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;syscall\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"os\"\n    \"os/exec\"\n    \"syscall\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "For our example we'll exec `ls`. Go requires an\nabsolute path to the binary we want to execute, so\nwe'll use `exec.LookPath` to find it (probably\n`/bin/ls`).",
          "docs_rendered": "\u003cp\u003eFor our example we\u0026rsquo;ll exec \u003ccode\u003els\u003c/code\u003e. Go requires an\nabsolute path to the binary we want to execute, so\nwe\u0026rsquo;ll use \u003ccode\u003eexec.LookPath\u003c/code\u003e to find it (probably\n\u003ccode\u003e/bin/ls\u003c/code\u003e).\u003c/p\u003e\n",
          "code": "\n    binary, lookErr := exec.LookPath(\"ls\")\n    if lookErr != nil {\n        panic(lookErr)\n    }",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003ebinary\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003elookErr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eexec\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eLookPath\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;ls\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003elookErr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003epanic\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003elookErr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    binary, lookErr := exec.LookPath(\"ls\")\n    if lookErr != nil {\n        panic(lookErr)\n    }\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "`Exec` requires arguments in slice form (as\napposed to one big string). We'll give `ls` a few\ncommon arguments. Note that the first argument should\nbe the program name.",
          "docs_rendered": "\u003cp\u003e\u003ccode\u003eExec\u003c/code\u003e requires arguments in slice form (as\napposed to one big string). We\u0026rsquo;ll give \u003ccode\u003els\u003c/code\u003e a few\ncommon arguments. Note that the first argument should\nbe the program name.\u003c/p\u003e\n",
          "code": "\n    args := []string{\"ls\", \"-a\", \"-l\", \"-h\"}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003eargs\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;ls\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;-a\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;-l\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;-h\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    args := []string{\"ls\", \"-a\", \"-l\", \"-h\"}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "`Exec` also needs a set of [environment variables](environment-variables)\nto use. Here we just provide our current\nenvironment.",
          "docs_rendered": "\u003cp\u003e\u003ccode\u003eExec\u003c/code\u003e also needs a set of \u003ca href=\"environment-variables\"\u003eenvironment variables\u003c/a\u003e\nto use. Here we just provide our current\nenvironment.\u003c/p\u003e\n",
          "code": "\n    env := os.Environ()",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003eenv\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eEnviron\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    env := os.Environ()\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Here's the actual `syscall.Exec` call. If this call is\nsuccessful, the execution of our process will end\nhere and be replaced by the `/bin/ls -a -l -h`\nprocess. If there is an error we'll get a return\nvalue.",
          "docs_rendered": "\u003cp\u003eHere\u0026rsquo;s the actual \u003ccode\u003esyscall.Exec\u003c/code\u003e call. If this call is\nsuccessful, the execution of our process will end\nhere and be replaced by the \u003ccode\u003e/bin/ls -a -l -h\u003c/code\u003e\nprocess. If there is an error we\u0026rsquo;ll get a return\nvalue.\u003c/p\u003e\n",
          "code": "\n    execErr := syscall.Exec(binary, args, env)\n    if execErr != nil {\n        panic(execErr)\n    }\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003eexecErr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003esyscall\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eExec\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ebinary\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eenv\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003eexecErr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003epanic\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eexecErr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    execErr := syscall.Exec(binary, args, env)\n    if execErr != nil {\n        panic(execErr)\n    }\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "When we run our program it is replaced by `ls`.",
          "docs_rendered": "\u003cp\u003eWhen we run our program it is replaced by \u003ccode\u003els\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "\n$ go run execing-processes.go\ntotal 16\ndrwxr-xr-x  4 mark 136B Oct 3 16:29 .\ndrwxr-xr-x 91 mark 3.0K Oct 3 12:50 ..\n-rw-r--r--  1 mark 1.3K Oct 3 16:28 execing-processes.go",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run execing-processes.go\n\u003cspan class=\"go\"\u003etotal 16\u003c/span\u003e\n\u003cspan class=\"go\"\u003edrwxr-xr-x  4 mark 136B Oct 3 16:29 .\u003c/span\u003e\n\u003cspan class=\"go\"\u003edrwxr-xr-x 91 mark 3.0K Oct 3 12:50 ..\u003c/span\u003e\n\u003cspan class=\"go\"\u003e-rw-r--r--  1 mark 1.3K Oct 3 16:28 execing-processes.go\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Note that Go does not offer a classic Unix `fork`\nfunction. Usually this isn't an issue though, since\nstarting goroutines, spawning processes, and exec'ing\nprocesses covers most use cases for `fork`.",
          "docs_rendered": "\u003cp\u003eNote that Go does not offer a classic Unix \u003ccode\u003efork\u003c/code\u003e\nfunction. Usually this isn\u0026rsquo;t an issue though, since\nstarting goroutines, spawning processes, and exec\u0026rsquo;ing\nprocesses covers most use cases for \u003ccode\u003efork\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "signals",
    "Name": "Signals",
    "GoCode": "// Sometimes we'd like our Go programs to intelligently\n// handle [Unix signals](http://en.wikipedia.org/wiki/Unix_signal).\n// For example, we might want a server to gracefully\n// shutdown when it receives a `SIGTERM`, or a command-line\n// tool to stop processing input if it receives a `SIGINT`.\n// Here's how to handle signals in Go with channels.\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n)\n\nfunc main() {\n\n\t// Go signal notification works by sending `os.Signal`\n\t// values on a channel. We'll create a channel to\n\t// receive these notifications (we'll also make one to\n\t// notify us when the program can exit).\n\tsigs := make(chan os.Signal, 1)\n\tdone := make(chan bool, 1)\n\n\t// `signal.Notify` registers the given channel to\n\t// receive notifications of the specified signals.\n\tsignal.Notify(sigs, syscall.SIGINT, syscall.SIGTERM)\n\n\t// This goroutine executes a blocking receive for\n\t// signals. When it gets one it'll print it out\n\t// and then notify the program that it can finish.\n\tgo func() {\n\t\tsig := \u003c-sigs\n\t\tfmt.Println()\n\t\tfmt.Println(sig)\n\t\tdone \u003c- true\n\t}()\n\n\t// The program will wait here until it gets the\n\t// expected signal (as indicated by the goroutine\n\t// above sending a value on `done`) and then exit.\n\tfmt.Println(\"awaiting signal\")\n\t\u003c-done\n\tfmt.Println(\"exiting\")\n}\n",
    "GoCodeHash": "ccee3fe41771b7cf56d64de38b12588022458154",
    "URLHash": "YRV64KEXJW1",
    "Segs": [
      [
        {
          "docs": "Sometimes we'd like our Go programs to intelligently\nhandle [Unix signals](http://en.wikipedia.org/wiki/Unix_signal).\nFor example, we might want a server to gracefully\nshutdown when it receives a `SIGTERM`, or a command-line\ntool to stop processing input if it receives a `SIGINT`.\nHere's how to handle signals in Go with channels.",
          "docs_rendered": "\u003cp\u003eSometimes we\u0026rsquo;d like our Go programs to intelligently\nhandle \u003ca href=\"http://en.wikipedia.org/wiki/Unix_signal\"\u003eUnix signals\u003c/a\u003e.\nFor example, we might want a server to gracefully\nshutdown when it receives a \u003ccode\u003eSIGTERM\u003c/code\u003e, or a command-line\ntool to stop processing input if it receives a \u003ccode\u003eSIGINT\u003c/code\u003e.\nHere\u0026rsquo;s how to handle signals in Go with channels.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"fmt\"\n    \"os\"\n    \"os/signal\"\n    \"syscall\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;os\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;os/signal\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;syscall\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"fmt\"\n    \"os\"\n    \"os/signal\"\n    \"syscall\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Go signal notification works by sending `os.Signal`\nvalues on a channel. We'll create a channel to\nreceive these notifications (we'll also make one to\nnotify us when the program can exit).",
          "docs_rendered": "\u003cp\u003eGo signal notification works by sending \u003ccode\u003eos.Signal\u003c/code\u003e\nvalues on a channel. We\u0026rsquo;ll create a channel to\nreceive these notifications (we\u0026rsquo;ll also make one to\nnotify us when the program can exit).\u003c/p\u003e\n",
          "code": "\n    sigs := make(chan os.Signal, 1)\n    done := make(chan bool, 1)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003esigs\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003echan\u003c/span\u003e \u003cspan class=\"nx\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSignal\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003edone\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nb\"\u003emake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003echan\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    sigs := make(chan os.Signal, 1)\n    done := make(chan bool, 1)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "`signal.Notify` registers the given channel to\nreceive notifications of the specified signals.",
          "docs_rendered": "\u003cp\u003e\u003ccode\u003esignal.Notify\u003c/code\u003e registers the given channel to\nreceive notifications of the specified signals.\u003c/p\u003e\n",
          "code": "\n    signal.Notify(sigs, syscall.SIGINT, syscall.SIGTERM)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003esignal\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eNotify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esigs\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003esyscall\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSIGINT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003esyscall\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSIGTERM\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    signal.Notify(sigs, syscall.SIGINT, syscall.SIGTERM)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "This goroutine executes a blocking receive for\nsignals. When it gets one it'll print it out\nand then notify the program that it can finish.",
          "docs_rendered": "\u003cp\u003eThis goroutine executes a blocking receive for\nsignals. When it gets one it\u0026rsquo;ll print it out\nand then notify the program that it can finish.\u003c/p\u003e\n",
          "code": "\n    go func() {\n        sig := \u003c-sigs\n        fmt.Println()\n        fmt.Println(sig)\n        done \u003c- true\n    }()",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003esig\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan class=\"nx\"\u003esigs\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esig\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003edone\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}()\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    go func() {\n        sig := \u003c-sigs\n        fmt.Println()\n        fmt.Println(sig)\n        done \u003c- true\n    }()\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "The program will wait here until it gets the\nexpected signal (as indicated by the goroutine\nabove sending a value on `done`) and then exit.",
          "docs_rendered": "\u003cp\u003eThe program will wait here until it gets the\nexpected signal (as indicated by the goroutine\nabove sending a value on \u003ccode\u003edone\u003c/code\u003e) and then exit.\u003c/p\u003e\n",
          "code": "\n    fmt.Println(\"awaiting signal\")\n    \u003c-done\n    fmt.Println(\"exiting\")\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;awaiting signal\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan class=\"nx\"\u003edone\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;exiting\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    fmt.Println(\"awaiting signal\")\n    \u003c-done\n    fmt.Println(\"exiting\")\n}\n",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": "When we run this program it will block waiting for a\nsignal. By typing `ctrl-C` (which the\nterminal shows as `^C`) we can send a `SIGINT` signal,\ncausing the program to print `interrupt` and then exit.",
          "docs_rendered": "\u003cp\u003eWhen we run this program it will block waiting for a\nsignal. By typing \u003ccode\u003ectrl-C\u003c/code\u003e (which the\nterminal shows as \u003ccode\u003e^C\u003c/code\u003e) we can send a \u003ccode\u003eSIGINT\u003c/code\u003e signal,\ncausing the program to print \u003ccode\u003einterrupt\u003c/code\u003e and then exit.\u003c/p\u003e\n",
          "code": "\n$ go run signals.go\nawaiting signal\n^C\ninterrupt\nexiting",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run signals.go\n\u003cspan class=\"go\"\u003eawaiting signal\u003c/span\u003e\n\u003cspan class=\"go\"\u003e^C\u003c/span\u003e\n\u003cspan class=\"go\"\u003einterrupt\u003c/span\u003e\n\u003cspan class=\"go\"\u003eexiting\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  },
  {
    "ID": "exit",
    "Name": "Exit",
    "GoCode": "// Use `os.Exit` to immediately exit with a given\n// status.\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc main() {\n\n\t// `defer`s will _not_ be run when using `os.Exit`, so\n\t// this `fmt.Println` will never be called.\n\tdefer fmt.Println(\"!\")\n\n\t// Exit with status 3.\n\tos.Exit(3)\n}\n\n// Note that unlike e.g. C, Go does not use an integer\n// return value from `main` to indicate exit status. If\n// you'd like to exit with a non-zero status you should\n// use `os.Exit`.\n",
    "GoCodeHash": "16f2c50f58d9d113f2cdd5367ddd95a220d89b19",
    "URLHash": "b9aYzlENkb__R",
    "Segs": [
      [
        {
          "docs": "Use `os.Exit` to immediately exit with a given\nstatus.",
          "docs_rendered": "\u003cp\u003eUse \u003ccode\u003eos.Exit\u003c/code\u003e to immediately exit with a given\nstatus.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "package main",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "package main\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": true
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "import (\n    \"fmt\"\n    \"os\"\n)",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;fmt\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;os\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "import (\n    \"fmt\"\n    \"os\"\n)\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "",
          "docs_rendered": "",
          "code": "func main() {",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "func main() {\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "`defer`s will _not_ be run when using `os.Exit`, so\nthis `fmt.Println` will never be called.",
          "docs_rendered": "\u003cp\u003e\u003ccode\u003edefer\u003c/code\u003es will \u003cem\u003enot\u003c/em\u003e be run when using \u003ccode\u003eos.Exit\u003c/code\u003e, so\nthis \u003ccode\u003efmt.Println\u003c/code\u003e will never be called.\u003c/p\u003e\n",
          "code": "\n    defer fmt.Println(\"!\")",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003edefer\u003c/span\u003e \u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;!\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    defer fmt.Println(\"!\")\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Exit with status 3.",
          "docs_rendered": "\u003cp\u003eExit with status 3.\u003c/p\u003e\n",
          "code": "\n    os.Exit(3)\n}",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"nx\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eExit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "    os.Exit(3)\n}\n",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Note that unlike e.g. C, Go does not use an integer\nreturn value from `main` to indicate exit status. If\nyou'd like to exit with a non-zero status you should\nuse `os.Exit`.",
          "docs_rendered": "\u003cp\u003eNote that unlike e.g. C, Go does not use an integer\nreturn value from \u003ccode\u003emain\u003c/code\u003e to indicate exit status. If\nyou\u0026rsquo;d like to exit with a non-zero status you should\nuse \u003ccode\u003eos.Exit\u003c/code\u003e.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": false,
          "code_run": false
        }
      ],
      [
        {
          "docs": " If you run `exit.go` using `go run`, the exit\nwill be picked up by `go` and printed.",
          "docs_rendered": "\u003cp\u003eIf you run \u003ccode\u003eexit.go\u003c/code\u003e using \u003ccode\u003ego run\u003c/code\u003e, the exit\nwill be picked up by \u003ccode\u003ego\u003c/code\u003e and printed.\u003c/p\u003e\n",
          "code": "\n$ go run exit.go\nexit status 3",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go run exit.go\n\u003cspan class=\"go\"\u003eexit status 3\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "By building and executing a binary you can see\nthe status in the terminal.",
          "docs_rendered": "\u003cp\u003eBy building and executing a binary you can see\nthe status in the terminal.\u003c/p\u003e\n",
          "code": "\n$ go build exit.go\n$ ./exit\n$ echo $?\n3",
          "code_rendered": "\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e go build exit.go\n\u003cspan class=\"gp\"\u003e$\u003c/span\u003e ./exit\n\u003cspan class=\"gp\"\u003e$\u003c/span\u003e \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"nv\"\u003e$?\u003c/span\u003e\n\u003cspan class=\"go\"\u003e3\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n",
          "code_for_js": "",
          "code_empty": false,
          "code_leading": true,
          "code_run": false
        },
        {
          "docs": "Note that the `!` from our program never got printed.",
          "docs_rendered": "\u003cp\u003eNote that the \u003ccode\u003e!\u003c/code\u003e from our program never got printed.\u003c/p\u003e\n",
          "code": "",
          "code_rendered": "",
          "code_for_js": "",
          "code_empty": true,
          "code_leading": false,
          "code_run": false
        }
      ]
    ]
  }
]
